/*
 * Copyright 2015 Stanford University and NVIDIA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Fast chemistry kernel for C7H16 on Fermi.
 * Best version runs with 1 CTA with 20 warps.
 * Should compile to 50 registers and spill 276 bytes.
 * Completely memory latency limited on loading
 * reaction constants.
 *
 * Launch with:
 * dim3 grid((nx*ny)/32, 1);
 * dim3 block(20*32, 1, 1);
 *
 * gpu_getrates<<<grid, block>>>(temperature_ptr, 
 *                      pressure_ptr,  avmolwt_ptr,  mass_frac_ptr, 
 *                      diffusion_ptr,  dt,  (1.0/dt),  
 *                      nx*ny,  nx,  nz,  nx*ny*nz, 
 *                      0,  wdot_ptr);
 *
 * Performance numbers on C2070 with 14 SMs:
 *
 * 32x32x32
 *   Latency: 17.489 ms
 *   Throughput: 1.874 Mpoints/s
 *
 * 64x64x64
 *   Latency: 119.156 ms
 *   Throughput: 2.200 Mpoints/s
 *
 * 128x128x128
 *   Latency: 891.556 ms
 *   Throughput: 2.352 Mpoints/s
 *
 * Generation command:
 *  ./singe --dir inputs/nC7H16 --cuda --reac 20 --qssa 2 --qshared --ctas 1
 *
 */

#ifndef TOTAL_STEPS
#define TOTAL_STEPS 32
#endif

__constant__ double molecular_masses[52] = {1.00797,  2.01594,  15.9994,  31.9988,  
  17.00737,  18.01534,  28.01055,  44.00995,  15.03506,  16.04303,  33.00677,  
  34.01474,  30.02649,  30.07012,  28.05418,  29.06215,  25.03027,  26.03824,  
  32.04243,  42.03764,  41.02967,  44.05358,  40.06533,  40.06533,  42.08127,  
  54.09242,  55.10039,  56.10836,  57.11633,  57.0727,  58.08067,  69.12748000000001,  
  70.13545000000001,  71.14342000000001,  47.03386,  48.04183,  55.05676,  56.06473,  
  41.0733,  39.05736,  72.10776,  71.09979,  56.06473,  86.13485,  85.12688,  
  100.20557,  99.19760000000001,  131.1964,  163.1952,  114.18903,  146.18783,  
  28.0134}; 


__constant__ double recip_molecular_masses[52] = {0.9920930186414277,  
  0.4960465093207139,  0.06250234383789392,  0.03125117191894696,  
  0.05879803873262004,  0.05550825019122593,  0.03570083414998991,  
  0.02272213442641948,  0.06651120780362699,  0.06233236489615739,  
  0.03029681486555637,  0.02939901936631002,  0.03330392596670473,  
  0.03325560390181349,  0.03564531203549703,  0.0344090165386938,  
  0.03995162657054838,  0.0384050534905585,  0.03120861932131863,  
  0.02378820504671527,  0.02437260645771706,  0.02269963076780593,  
  0.02495923532889907,  0.02495923532889907,  0.02376354135699802,  
  0.01848687856819865,  0.01814869186951308,  0.01782265601774851,  
  0.01750812771058645,  0.01752151203640269,  0.01721743223692151,  
  0.01446602711396394,  0.01425812481419881,  0.01405611369259448,  
  0.021261278576753,  0.02081519375927187,  0.01816307388956415,  
  0.01783652574443861,  0.02434671672351625,  0.02560336899370566,  
  0.01386813291662368,  0.01406473915042506,  0.01783652574443861,  
  0.01160970269292859,  0.01174717081138179,  9.979485172331238e-03,  
  0.01008088905376743,  7.622160364156333e-03,  6.127631204839358e-03,  
  8.757408658257278e-03,  6.840514699479429e-03,  0.03569720205330306}; 


__constant__ double gibbs_temp[21] = {8.333333333333336,  8.333333333333336,  
  8.333333333333336,  8.333333333333336,  11.30833333333334,  8.333333333333336,  
  8.333333333333336,  8.333333333333336,  8.333333333333336,  11.58333333333334,  
  8.333333333333336,  8.333333333333336,  8.333333333333336,  11.53333333333334,  
  8.333333333333336,  8.333333333333336,  8.333333333333336,  8.333333333333336,  
  8.333333333333336,  8.333333333333336,  8.333333333333336}; 

__constant__ double gibbs_high[21][7] = {{2.50104422,  -0.0,  -0.0,  -0.0,  -0.0,  
  212.289555,  -0.465341317},  {2.991423,  -0.04200386399999999,  
  1.352118959999999e-04,  1.329347231999999e-06,  -1.640997273599998e-08,  
  -6.958616666666668,  -1.35511},  {2.54206,  1.6530372e-03,  7.446727199999996e-06,  
  -6.553536479999994e-07,  4.528796313599995e-09,  243.59,  4.920308},  {3.697578,  
  -0.03681118199999999,  3.021220799999999e-04,  -2.556404639999998e-06,  
  1.178255807999999e-08,  -10.28275,  3.189166},  {2.62599754,  
  -0.07919544359999998,  8.633392079999997e-04,  -6.129083519999994e-06,  
  1.887473829887997e-08,  34.34044783333334,  7.10667307},  {3.025078,  
  -0.08656133999999999,  1.351398719999999e-03,  -1.466756639999998e-05,  
  7.165275033599991e-08,  -118.9029166666667,  6.108218},  {4.453623,  
  -0.1884101399999999,  3.068186399999999e-03,  -3.447355679999996e-05,  
  1.730453414399998e-07,  -408.058,  -0.9553959},  {2.844052,  -0.3682784399999999,  
  5.352827999999998e-03,  -5.450631839999995e-05,  2.542398451199997e-07,  
  136.98175,  5.452697},  {1.683479,  -0.6142343999999998,  9.300309599999996e-03,  
  -9.771242399999991e-05,  4.669148966399994e-07,  -84.00658333333335,  9.623395},  
  {4.10547423,  -0.143071701,  1.935235173599999e-03,  -1.788360811199998e-05,  
  7.427636319743992e-08,  3.317730741666667,  3.12515836},  {4.573167,  
  -0.2601681599999999,  3.539253599999998e-03,  -3.382421759999996e-05,  
  1.484338867199998e-07,  -150.058,  0.5011370000000001},  {2.995606,  
  -0.4008792599999999,  6.309491999999997e-03,  -6.821500319999994e-05,  
  3.330737625599996e-07,  -127.66975,  6.912572},  {3.7708,  -0.4722898199999999,  
  6.375321599999997e-03,  -5.679980639999994e-05,  2.190360268799997e-07,  
  1.065270833333334,  2.929575},  {6.10683385,  -0.7754181659999998,  
  0.01062065270399999,  -9.89844085439999e-05,  4.135813157375995e-07,  
  -114.583345,  -13.008125},  {3.528419,  -0.6891107999999998,  0.010604124,  
  -1.129622543999999e-04,  5.460668006399994e-07,  36.90240833333334,  2.230389},  
  {7.19048,  -0.38904462,  1.542735599999999e-03,  3.380945759999996e-05,  
  -4.023693273599995e-07,  88.95458333333335,  -14.78089},  {4.43677,  
  -0.3225623399999999,  4.590760799999998e-03,  -4.732385759999995e-05,  
  2.236076927999997e-07,  213.8971666666667,  -2.800338},  {5.933468,  
  -0.2410647599999999,  9.520175999999997e-04,  2.075424479999998e-05,  
  -2.466178099199997e-07,  265.4529166666667,  -8.530313},  {4.029061,  
  -0.5625955799999999,  7.320609599999997e-03,  -6.276661919999994e-05,  
  2.306592806399997e-07,  -217.9825833333334,  2.378196},  {6.32752,  -0.21649626,  
  7.683712799999998e-04,  2.791799999999997e-05,  -3.638862143999995e-07,  
  -37.287575,  -8.329366},  {5.612279,  -0.5069931599999999,  6.849952799999998e-03,  
  -6.103261439999994e-05,  2.351881267199997e-07,  -43.23219166666668,  
  -3.274949}}; 

__constant__ double gibbs_low[21][7] = {{2.50104422,  -0.0,  -0.0,  -0.0,  -0.0,  
  212.289555,  -0.465341317},  {3.298124,  -0.04949665199999999,  
  1.954323599999999e-03,  1.364462495999999e-05,  -4.287035289599994e-06,  
  -8.437675,  -3.294094},  {2.946429,  0.09828995999999997,  -5.810476799999997e-03,  
  2.308093919999998e-04,  -4.033873612799995e-06,  242.897,  2.963995},  {3.212936,  
  -0.06764915999999999,  1.381476e-03,  -1.891982879999998e-04,  
  9.091236787199989e-06,  -8.377075000000001,  6.034738},  {3.43586219,  
  -0.01213414824,  2.725113887999999e-04,  -3.491210145599996e-05,  
  7.710173889407991e-07,  31.19343766666667,  2.45014127},  {3.262452,  
  -0.09071645999999997,  9.316211999999997e-03,  -8.037999359999992e-04,  
  2.566029196799997e-05,  -119.2545,  4.848897},  {2.275725,  -0.5953243199999999,  
  0.02498186399999999,  -9.888029279999989e-04,  2.195195903999997e-05,  
  -403.1095000000001,  10.18849},  {2.430443,  -0.6674459999999999,  
  0.04032527999999998,  -2.335433759999997e-03,  6.080783270399993e-05,  
  136.8648333333333,  6.789794},  {0.7787415,  -1.0486008,  0.06680181599999997,  
  -4.391579519999995e-03,  1.268971660799999e-04,  -81.87690833333335,  13.72219},  
  {3.18310656,  -0.2200607699999999,  2.237724292799999e-03,  
  4.692282033599995e-05,  -1.567018607615998e-06,  6.743175108333335,  
  8.393710990000001},  {3.388754,  -0.3941535599999999,  3.564031199999998e-04,  
  6.661160639999993e-04,  -2.562466751999997e-05,  -147.1929166666667,  6.785363},  
  {1.652731,  -0.7578863999999998,  0.04531603199999999,  -2.952044639999997e-03,  
  8.722844121599988e-05,  -123.8783333333334,  13.78482},  {2.106204,  
  -0.4329956999999999,  -0.01281233279999999,  1.062379583999999e-03,  
  -2.151993484799997e-05,  8.155009166666668,  13.15218},  {-0.0252854344,  
  -1.444588524,  0.02685443327999999,  -3.000108974399997e-04,  
  5.493677810687993e-07,  -93.62127833333335,  21.164875},  {-0.861488,  -1.6776978,  
  0.08132824799999996,  -4.010618879999996e-03,  1.009623294719999e-04,  
  46.44205000000001,  24.21149},  {2.690702,  -0.52314798,  -0.01060761359999999,  
  -1.344773231999999e-04,  4.072315046399995e-05,  107.2533333333333,  12.1382},  
  {2.013562,  -0.9114269999999998,  0.03879165599999999,  -1.307374847999999e-03,  
  1.983135052799997e-05,  217.7036666666667,  8.805377999999999},  {2.459276,  
  -0.4422885599999999,  -5.063695199999997e-03,  1.903164479999998e-04,  
  1.228384051199999e-05,  277.9354166666667,  11.5562},  {2.660115,  
  -0.4404904799999999,  -0.01720812239999999,  1.266219935999999e-03,  
  -2.478542975999997e-05,  -211.279,  11.23263},  {2.862628,  -0.6009161999999998,  
  1.26850464e-03,  7.399497599999993e-04,  -2.328695308799997e-05,  
  -27.91399166666667,  10.39794},  {3.125278,  -0.5866931999999999,  -0.0108514752,  
  1.297362527999999e-03,  -3.311246822399995e-05,  -34.23756666666667,  11.22885}}; 

__device__ const int chem_index[640] = {44,  33,  27,  13,  51,  0,  0,  0,  0,  0,  0,  0,  
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  28,  30,  34,  17,  
  48,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  
  0,  0,  31,  47,  21,  18,  47,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  16,  50,  24,  22,  41,  0,  0,  0,  0,  0,  0,  0,  0,  0,  
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  36,  29,  14,  25,  29,  0,  
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  
  32,  41,  11,  26,  49,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  
  0,  0,  0,  0,  0,  0,  0,  0,  46,  48,  9,  39,  43,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  35,  0,  45,  19,  50,  0,  0,  0,  0,  0,  
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  26,  0,  38,  
  32,  42,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  
  0,  0,  0,  0,  27,  0,  6,  35,  33,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  21,  0,  1,  46,  30,  0,  0,  0,  0,  0,  0,  0,  0,  0,  
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  34,  0,  15,  37,  44,  0,  0,  
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  45,  
  0,  12,  40,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  
  0,  0,  0,  0,  0,  0,  11,  0,  5,  20,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  38,  0,  2,  7,  0,  0,  0,  0,  0,  0,  0,  0,  0,  
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  15,  0,  8,  23,  0,  0,  
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  
  2,  0,  10,  36,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  
  0,  0,  0,  0,  0,  0,  0,  8,  0,  3,  16,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  28,  0,  0,  0,  0,  0,  0,  0,  0,  0,  
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4,  0,  4,  31,  0,  0,  0,  
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}; 

__device__ const double chem_real[1920] = {-4.0,  -2.108e+03,  
  1.762164883879368e+23,  -0.4,  -0.0,  3.477592858402554e+15,  1.5,  -2.976e+03,  
  1.354513065283269e+13,  1.5,  -1.765e+04,  1.081549804537841e+12,  0.0,  -0.0,  
  4.327425499876748e+12,  0.0,  -6.605e+04,  3.269855696590543e+14,  -0.64,  
  -3.682e+04,  1.374961542202646e+15,  0.0,  -2.5e+03,  1.10393507649917e+14,  -5.89,  
  -2.527e+04,  7.26146055996481e+23,  -4.78,  -6.1e+03,  3.895867460799807e+21,  0.0,  
  -1.4e+04,  -5.0,  -4.448e+03,  4.933351840065101e+24,  0.45,  -1.822e+03,  
  1.028965438188705e+14,  0.57,  -2.762e+03,  7.033478653754364e+13,  0.57,  
  -1.534e+04,  2.466789748997023e+12,  0.05,  -8.472e+04,  5.378584097136546e+14,  
  0.0,  -0.0,  6.656728511289998e+14,  0.0,  -3.0e+03,  3.311805229497511e+12,  0.0,  
  -1.75e+04,  2.207870152998341e+12,  0.0,  -1.192e+04,  3.322844580262503e+13,  
  -0.51,  -8.991e+03,  2.419854562331453e+13,  0.0,  -1.4e+04,  -7.35,  -9.546e+04,  
  1.701309747992448e+30,  0.0,  -9.173e+04,  2.097476645348424e+17,  -1.57,  
  -2.921e+04,  1.198317430666426e+16,  -1.59,  1.631e+03,  1.956746256573066e+16,  
  0.0,  -2.98e+03,  1.126013778029154e+12,  0.02,  -1.592e+04,  
  4.769550517445503e+10,  0.0,  -3.7e+04,  1.10393507649917e+12,  0.0,  -7.0e+03,  
  5.519675382495852e+11,  -0.46,  -3.051e+04,  3.713830786235666e+14,  0.0,  
  -4.81e+03,  1.666941965513747e+12,  -0.26,  -5.082e+04,  -5.246,  -1.705e+03,  
  1.550795662457893e+26,  -1.17,  -635.8,  3.756208428880674e+15,  5.42,  -998.0,  
  7.45984426405874e+06,  5.42,  -1.615e+04,  1.555980717783869e+07,  0.0,  -2.5e+03,  
  2.207870152998341e+14,  0.0,  -6.808e+04,  1.469337586820396e+14,  -1.0,  
  -9.677e+04,  9.199458970826422e+17,  0.0,  -0.0,  9.935415688492534e+13,  0.0,  
  -2.91e+04,  1.10393507649917e+15,  0.48,  -1.775e+04,  8.476765430311639e+13,  0.0,  
  -4.2e+03,  -0.41,  1.116e+03,  5.426843110271914e+16,  0.6,  -0.0,  
  2.879017473981534e+14,  0.0,  -0.0,  1.335761442563996e+15,  0.0,  -9.048e+04,  
  2.28845741358278e+17,  2.1,  -496.7,  2.565807968463017e+11,  2.08,  -1.738e+04,  
  2.093944762817148e+12,  -0.73,  -8.171e+04,  3.300482647360804e+18,  0.0,  -0.0,  
  1.998122488463498e+14,  0.09,  -2.356e+04,  3.444592055957653e+13,  0.0,  
  -1.06e+04,  1.655902614748756e+12,  -1.21,  -2.105e+04,  -2.788,  -4.191e+03,  
  2.379687817934913e+19,  0.0,  -2.384e+03,  1.987083137698507e+11,  0.33,  
  3.861e+03,  1.593728387054492e+12,  0.0,  -3.895e+04,  2.263066906823299e+14,  
  -5.31,  -6.5e+03,  1.709779232588963e+19,  -5.31,  -9.305e+04,  
  1.66653187552936e+19,  0.0,  -0.0,  1.10393507649917e+12,  0.0,  -0.0,  0.0,  0.0,  
  -6.0e+03,  1.103935076499171e+13,  0.0,  -3.2e+04,  1.421868378530932e+12,  0.0,  
  854.0,  -2.7,  -3.06e+04,  6.296682219005562e+20,  0.0,  -1.35e+04,  
  6.016446166920479e+14,  0.0,  -2.424e+03,  6.071642920745437e+11,  0.35,  
  -3.139e+04,  7.772708474537296e+10,  3.7,  -9.5e+03,  3.603895028364368e+09,  4.02,  
  -5.472e+03,  3.627560247652561e+09,  0.0,  -0.0,  3.311805229497511e+14,  0.0,  
  -1.102e+05,  1.068277973528247e+17,  0.0,  1.0e+03,  7.727545535494194e+13,  -0.16,  
  -1.226e+04,  1.047411983085103e+14,  0.0,  1.013e+03,  0.0,  -5.5443e+04,  
  1.655902614748756e+16,  0.0,  -7.6e+04,  1.987083137698507e+14,  0.0,  -410.0,  
  8.367827879863712e+13,  0.33,  -3.293e+04,  4.838525086319775e+13,  0.15,  
  -8.055e+04,  5.917336991808406e+16,  0.0,  -0.0,  2.207870152998341e+14,  1.88,  
  -179.0,  3.033918943303356e+11,  1.79,  -1.605e+04,  5.514829751494089e+11,  0.0,  
  1.0e+03,  7.727545535494194e+13,  -0.74,  -1.702e+04,  6.369048628052206e+14,  0.5,  
  -4.22e+04,  -4.63,  -2.049e+03,  7.931416999628537e+21,  -0.37,  -0.0,  
  2.320945500112477e+14,  4.53,  -6.557e+03,  1.68483572288107e+08,  4.2,  
  -4.921e+03,  7.120477083648235e+07,  0.0,  -3.915e+04,  3.322844580262503e+14,  
  0.32,  1.94e+03,  4.368669834285631e+12,  0.0,  -7.3e+03,  5.519675382495853e+12,  
  0.0,  -4.7e+03,  1.10393507649917e+14,  0.0,  -2.186e+03,  2.925427952722802e+14,  
  0.89,  -1.211e+03,  2.531764784604205e+13,  0.76,  340.0,  -7.269,  -6.577e+03,  
  1.915706474623814e+26,  0.58,  -2.589e+03,  5.516060801473469e+13,  4.62,  
  -2.583e+03,  3.750360199515491e+08,  3.79,  -3.233e+03,  4.793626596522831e+08,  
  1.8,  -1.3e+03,  1.220393178395407e+11,  1.79,  -3.285e+04,  7.875835337541396e+10,  
  -1.44,  -2.979e+04,  8.922567221932516e+15,  0.0,  -7.2e+03,  
  3.642985752447263e+12,  0.0,  -4.49e+04,  2.263066906823299e+14,  1.99,  4.424e+03,  
  6.044748676028107e+10,  0.0,  -4.2e+03,  -5.39,  -3.62e+04,  4.121270198664171e+23,  
  -0.73,  -3.282e+04,  9.382082652396192e+13,  0.0,  -5.95e+03,  
  2.263066906823299e+14,  -0.83,  -2.176e+04,  1.252438542051169e+15,  0.0,  
  -3.3e+03,  1.479273002508888e+14,  -0.01,  -1.969e+04,  2.205682506224569e+13,  
  -6.96,  -2.38e+04,  5.03704497779653e+24,  -6.99,  -1.685e+04,  
  2.082031728241946e+23,  0.0,  -1.9e+04,  8.765244507403413e+15,  0.0,  -2.0e+04,  
  1.10393507649917e+11,  0.0,  -1.79e+03,  0.0,  -1.2518e+04,  1.324722091799005e+16,  
  0.0,  -1.672e+04,  3.311805229497511e+13,  0.0,  -0.0,  2.660483534363001e+13,  
  -1.08,  -1.541e+05,  8.329632907153239e+14,  0.0,  -1.868e+03,  
  6.557374354405073e+13,  -0.01,  -1.617e+04,  4.293504115169963e+12,  -0.61,  
  -5.26e+03,  2.083104308254044e+14,  0.12,  -6.459e+03,  5.076651285766208e+13,  
  0.0,  -1.9e+04,  8.765244507403413e+15,  0.0,  -2.0e+04,  1.10393507649917e+11,  
  0.0,  -1.36e+04,  0.0,  -0.0,  1.126013778029154e+15,  0.0,  -1.052e+05,  
  3.196995981541598e+16,  1.8,  596.0,  4.332395783303693e+11,  3.46,  -2.272e+04,  
  5.682014987070902e+09,  0.0,  -1.192e+04,  3.322844580262503e+13,  -0.34,  
  -1.201e+04,  2.623054290835822e+13,  0.0,  -4.23e+04,  6.965830332709765e+15,  0.6,  
  1.771e+03,  2.275887711635572e+13,  0.0,  1.0e+03,  7.727545535494194e+13,  0.26,  
  -1.689e+04,  3.86359138439917e+12,  0.0,  -8.44e+03,  -1.0,  -1.7e+04,  
  1.711099368573714e+16,  0.0,  442.0,  7.139148139720135e+14,  0.0,  -6.095e+03,  
  3.974166275397013e+13,  -0.02,  -7.825e+03,  7.490418090552697e+13,  1.78,  
  -5.911e+03,  1.44608472233566e+11,  1.77,  -2.278e+04,  5.634450178181056e+11,  
  0.0,  -0.0,  5.519675382495852e+14,  0.0,  -0.0,  0.0,  0.0,  1.0e+03,  
  7.727545535494194e+13,  -0.32,  -2.165e+04,  2.348427401848734e+13,  0.0,  
  -1.28e+03,  1.88,  -179.0,  9.128605670116292e+11,  1.05,  -3.177e+04,  
  4.798229964308618e+11,  0.0,  -6.095e+03,  1.589666510158805e+14,  1.66,  
  -1.425e+04,  4.816708090821427e+11,  -13.28,  -1.232e+05,  7.371896554490857e+35,  
  -13.19,  -2.954e+04,  1.957709188877632e+33,  0.0,  -1.166e+04,  
  2.196830802233349e+13,  -0.5,  -7.009e+03,  8.569908032736446e+12,  0.0,  -0.0,  
  1.103935076499171e+13,  0.0,  -1.323e+04,  1.788374823928656e+13,  0.0,  -9.5e+03,  
  0.0,  -1.94e+04,  4.393661604466698e+14,  1.33,  -1.125e+04,  7.04798780986573e+12,  
  2.5,  -3.08e+03,  6.756602562630061e+11,  4.16,  -9.143e+03,  
  8.991627142304124e+08,  1.76,  1.216e+03,  7.960853151582145e+11,  1.88,  
  -2.651e+04,  1.254735798970886e+10,  0.0,  -1.719e+04,  2.46177522059315e+13,  
  -1.33,  1.489e+03,  1.537306337697092e+14,  0.0,  -850.0,  1.435115599448922e+14,  
  0.0,  -3.815e+04,  2.59424742977305e+13,  -0.86,  -1.34e+04,  0.0,  -0.0,  
  1.214328584149088e+14,  -0.35,  -2.455e+04,  9.877749161372114e+14,  2.27,  770.0,  
  3.769345526426692e+11,  0.9399999999999999,  -2.177e+04,  3.001793736692415e+13,  
  -1.0,  -9.815e+04,  3.7046221275518e+18,  0.0,  -0.0,  1.390958196388955e+14,  0.0,  
  -0.0,  3.532592244797346e+14,  -0.32,  -2.749e+04,  7.335853576477911e+15,  0.0,  
  -0.0,  5.519675382495853e+12,  0.0,  -3.243e+04,  1.085168180198685e+14,  -1.4,  
  -4.345e+04,  0.0,  -0.0,  8.102883461503911e+14,  0.0,  -9.0e+04,  
  5.313239523190507e+15,  6.0,  -9.484e+03,  6.988224847986424e+07,  6.33,  
  -1.757e+04,  1.782567610960603e+07,  0.0,  -0.0,  1.103935076499171e+13,  0.0,  
  -1.855e+04,  6.002095010925989e+12,  0.0,  1.0e+03,  7.727545535494194e+13,  -0.93,  
  -2.831e+04,  3.821269129474368e+15,  0.0,  -0.0,  5.519675382495852e+14,  0.38,  
  -4.6e+03,  2.623200070736312e+12,  0.0,  -0.0,  -3.57,  -9.32e+04,  
  2.620797973014887e+23,  -2.57,  -427.0,  1.331463811851586e+20,  0.0,  -0.0,  
  1.10393507649917e+14,  0.0,  -4.036e+04,  2.6615874694395e+15,  0.0,  -5.82e+04,  
  4.415740305996682e+14,  -0.5,  -1.368e+03,  4.97727843058388e+13,  0.0,  1.0e+03,  
  7.727545535494194e+13,  -0.9,  -3.126e+04,  9.753930870852754e+15,  0.0,  -0.0,  
  1.10393507649917e+14,  0.0,  -1.568e+04,  1.482584807738386e+16,  0.0,  -0.0,  1.18,  
  447.0,  1.075651341627646e+13,  1.18,  -2.938e+04,  3.719307554432618e+12,  0.0,  
  -0.0,  1.214328584149088e+15,  0.89,  -2.783e+04,  1.600738797682387e+15,  -0.55,  
  -2.84e+04,  1.811715279697042e+14,  0.0,  -7.204e+03,  4.526133813646599e+12,  
  -1.61,  -1.86e+03,  6.943681027513478e+13,  0.0,  -0.0,  0.0,  0.0,  -2.87e+03,  
  3.322844580262503e+11,  0.0,  -5.947e+04,  5.388307108392451e+12,  0.0,  -0.0,  
  9.383448150242948e+15,  -0.01,  -4.768e+04,  1.565866206709045e+15,  0.0,  -0.0,  
  7.727545535494192e+14,  -0.89,  -1.613e+04,  3.866108170318852e+16,  0.0,  
  -1.525e+04,  4.967707844246267e+11,  0.0,  0.0,  0.0,  0.0,  -2.3e+04,  
  3.322844580262503e+14,  -0.33,  -8.461e+04,  1.463397379153963e+16,  0.0,  
  -2.0e+03,  1.10393507649917e+14,  0.0,  -9.995e+03,  1.558756328016829e+12,  -0.52,  
  -3.832e+04,  1.226167672542054e+15,  0.0,  1.10393507649917e+15,  -0.41,  
  -4.246e+04,  2.504100463739754e+15,  0.0,  -0.0,  3.311805229497511e+13,  -0.89,  
  -6.552e+04,  4.442441781526739e+14,  -1.4,  -2.675e+04,  2.908837805632946e+15,  
  0.0,  0.0,  0.0,  -3.0,  -1.226e+05,  1.173569870097788e+22,  -2.0,  -0.0,  
  1.724898557029955e+19,  0.0,  -8.0e+03,  2.207870152998341e+15,  0.0,  -840.0,  
  7.19986456892759e+12,  0.0,  -4.93e+04,  1.324722091799004e+15,  0.0,  
  9.837318174035296e+15,  0.0,  -1.23e+04,  5.519675382495852e+14,  -21.01,  
  -1.395e+05,  3.717054413414876e+45,  -19.67,  -3.889e+04,  7.278401362421919e+40,  
  -1.55,  -2.702e+04,  6.530847549404108e+15,  0.0,  0.0,  0.0,  0.0,  -4.77e+04,  
  1.788374823928656e+14,  0.0,  -5.392e+04,  1.581938964623311e+15,  0.0,  -0.0,  
  8.831480611993364e+14,  0.0,  -0.0,  0.0,  0.0,  -0.0,  8.831480611993364e+13,  0.0,  
  2.207870152998341e+14,  0.0,  -0.0,  0.0,  -17.71,  -1.207e+05,  
  2.351798479337159e+42,  -16.11,  -3.246e+04,  4.806506288714641e+35,  -1.49,  
  -2.68e+04,  2.29053442997015e+15,  0.0,  0.0,  0.0,  0.0,  -4.3e+03,  
  2.483853922123133e+14,  0.0,  -7.602e+04,  7.458185376828396e+15,  0.0,  
  -5.187e+04,  6.656728511289998e+14,  0.89,  1.922e+03,  2.09598203274248e+11,  0.0,  
  -0.0,  6.965830332709766e+13,  0.0,  2.403435307851804e+14,  -1.4,  -8.862e+04,  
  6.701441803844029e+14,  2.4,  -4.471e+03,  7.0128068903085e+12,  0.0,  0.0,  0.0,  
  -2.38,  -3.76e+04,  1.553825270487408e+19,  0.0,  -0.0,  8.323670476803745e+13,  
  0.0,  -0.0,  8.831480611993364e+14,  0.0,  -6.963e+04,  1.164651505706625e+16,  0.0,  
  -2.047e+04,  1.457194300978905e+14,  0.24,  -7.852e+03,  2.890150525716946e+12,  
  0.0,  -0.0,  1.10393507649917e+10,  0.0,  2.649444183598009e+12,  0.0,  -1.336e+05,  
  1.627200302759777e+15,  2.71,  -2.106e+03,  1.135045034275711e+12,  0.0,  0.0,  0.0,  
  0.0,  -0.0,  2.759837691247926e+13,  0.0,  -0.0,  0.0,  0.0,  -0.0,  
  3.587788998622304e+14,  -0.33,  -5.539e+04,  1.786777499302671e+15,  0.0,  -0.0,  
  3.985205626162005e+14,  -1.03,  -1.698e+04,  4.339747747732986e+15,  0.0,  -0.0,  
  3.488434841737379e+14,  0.0,  4.117677835341905e+13,  1.66,  -2.749e+04,  
  2.943717258356841e+11,  1.61,  35.0,  5.774218333035636e+12,  0.0,  0.0,  0.0,  0.0,  
  -0.0,  2.759837691247926e+13,  0.0,  -0.0,  0.0,  0.0,  -0.0,  3.974166275397013e+13,  
  -0.33,  -5.796e+04,  1.177312856547019e+16,  -1.56,  -1.038e+05,  
  1.753613965061648e+19,  0.0,  -0.0,  3.985205626162005e+14,  0.0,  -0.0,  
  4.393661604466698e+13,  0.0,  2.418600573679147e+15,  0.5,  -4.0e+03,  
  1.209300286839574e+09,  0.0,  -1.769e+04,  3.091018214197678e+14,  0.01,  
  -8.165e+03,  5.035294551700053e+12,  3.0,  -8.224e+03,  3.294424875653106e+11,  
  3.0,  -7.744e+03,  1.260923475857964e+10,  0.0,  -300.0,  7.815860341614126e+14,  
  -0.33,  -3.957e+04,  3.074612675394186e+14,  -1.2,  -1.668e+04,  
  4.27631984675011e+15,  0.0,  -4.0e+03,  1.10393507649917e+15,  0.0,  -7.1e+04,  
  5.519675382495852e+16,  0.0,  1.129467034691771e+13,  0.75,  -3.122e+04,  
  7.412598027991528e+12,  2.26,  -7.287e+03,  7.462250788153815e+10,  0.0,  0.0,  0.0,  
  2.4,  -2.106e+03,  2.082264199737754e+11,  2.4,  -1.678e+04,  
  3.451379883399522e+10,  0.0,  -820.0,  1.832532226988623e+14,  -0.33,  -5.83e+04,  
  2.078092502052668e+15,  -9.9,  -8.208e+04,  6.897905352343636e+28,  -9.82,  
  -3.695e+04,  1.101600702017212e+27,  -1.0,  -9.735e+04,  3.778217799318412e+17,  
  0.0,  4.415740305996682e+14,  0.0,  -2.4e+04,  1.987083137698507e+14,  0.0,  
  -5.015e+04,  1.10393507649917e+15,  0.67,  541.0,  2.996382885428535e+11,  0.5,  
  -1.029e+04,  3.809295903544656e+14,  0.5,  -7.715e+03,  6.404454319102382e+12,  
  0.0,  500.0,  3.190372371082602e+14,  -0.33,  -7.214e+04,  1.566415096754079e+16,  
  -13.26,  -1.185e+05,  5.973051615729153e+34,  -12.25,  -2.808e+04,  
  1.828165916139986e+32,  0.0,  -3.9e+03,  5.519675382495852e+14,  0.0,  
  5.519675382495852e+13,  0.0,  -1.9e+04,  1.103935076499171e+13,  0.0,  -1.04e+04,  
  2.759837691247926e+12,  0.0,  -1.29e+04,  1.10393507649917e+12,  1.95,  1.347e+03,  
  1.751761585076332e+10,  1.95,  -2.099e+04,  1.961972975285491e+12,  -0.66,  
  -5.315e+04,  2.783662365632565e+17,  0.0,  -1.198e+04,  4.636527321296516e+15,  
  1.76,  -76.0,  1.259628663225023e+12,  0.0,  -0.0,  11.0393507649917,  0.0,  
  -2.217e+03,  2.483853922123133e+14,  0.0,  3.091018214197677e+13,  0.0,  -1.0e+04,  
  1.103935076499171e+13,  0.0,  -7.0e+03,  3.488434841737378e+12,  0.0,  -9.2e+03,  
  1.324722091799005e+11,  0.0,  -1.654e+04,  2.174752100703366e+15,  0.0,  -425.0,  
  1.71661904395621e+14,  0.0,  -3.97e+03,  2.660483534363001e+14,  0.0,  -7.47e+04,  
  8.55549684286857e+13,  1.76,  -76.0,  1.259628663225023e+12,  0.0,  -0.0,  0.0,  0.0,  
  -3.32e+04,  2.98062470654776e+14,  0.0,  1.87668963004859e+13,  0.0,  -2.8e+04,  
  1.655902614748756e+14,  0.0,  -5.0e+03,  6.044044543832958e+12,  0.0,  -7.2e+03,  
  9.825022180842616e+10,  2.67,  -6.292e+03,  1.996278696128123e+11,  2.67,  
  -4.197e+03,  8.76712159657843e+10,  0.0,  -1.929e+04,  3.775457961627163e+12,  
  -0.33,  -2.502e+03,  7.652419861465558e+11,  2.0,  298.0,  4.95975951169547e+11,  
  2.01,  -3.188e+04,  1.032925593667234e+12,  -1.41,  -2.958e+04,  
  9.686914951835372e+15,  0.0,  1.269525337974046e+12,  0.0,  -1.8e+04,  
  3.311805229497511e+12,  0.0,  -1.77e+04,  2.225533114222328e+14,  0.0,  -3.7e+03,  
  2.622949741762029e+12,  2.02,  -1.34e+04,  5.195724313044046e+11,  2.02,  3.85e+03,  
  5.270948604445021e+10,  0.0,  -1.07e+05,  4.636527321296516e+17,  2.08,  2.891e+04,  
  1.662379040071959e+13,  0.0,  -0.0,  1.103935076499171e+13,  0.0,  -3.002e+04,  
  4.117677835341905e+13,  -1.17,  -3.816e+04,  4.724816115772413e+15,  0.0,  
  1.103935076499171e+13,  0.0,  -1.0e+04,  2.759837691247926e+11,  -0.89,  
  -3.013e+04,  1.381954540171992e+15,  0.0,  -8.2e+03,  1.10393507649917e+12,  1.51,  
  -3.43e+03,  3.288220749682686e+12,  1.51,  -1.858e+04,  1.423677798658911e+13,  
  1.5,  -3.01e+04,  2.902320688414976e+12,  1.5,  -2.54e+04,  3.238989888271113e+09,  
  0.0,  -0.0,  1.103935076499171e+13,  0.0,  -7.106e+04,  3.864876702823596e+07,  0.0,  
  -3.1e+04,  1.10393507649917e+15,  0.0,  9.575628162924701e+14,  0.0,  -4.8e+03,  
  1.655902614748756e+12,  -1.42,  -3.058e+04,  4.745753453929371e+15,  0.0,  
  -7.7e+03,  1.10393507649917e+12,  0.0,  -0.0,  1.103935076499171e+13,  0.33,  
  -3.146e+04,  9.029698494239475e+12,  2.0,  -1.4e+04,  5.357176139235172e+12,  3.08,  
  -685.0,  1.306867741291913e+11,  0.0,  -0.0,  1.103935076499171e+13,  0.0,  
  -7.905e+04,  1.186730207236608e+13,  -1.63,  -7.399e+04,  4.134181081938831e+18,  
  0.0,  1.661805754755821e+16,  0.0,  -1.16e+04,  1.10393507649917e+12,  -0.89,  
  -3.059e+04,  1.690059373406912e+15,  0.0,  -8.2e+03,  1.10393507649917e+12,  3.5,  
  -5.167e+03,  1.157677676194965e+11,  4.06,  -8.857e+03,  4.133887818907141e+08,  
  -0.6,  -1.5e+04,  1.97297629748708e+15,  0.48,  1.556e+04,  4.882326783364611e+12,  
  0.7,  -5.884e+03,  1.650827489355111e+14,  0.71,  -2.082e+04,  
  3.486700766249929e+13,  0.0,  -4.0e+03,  3.091018214197678e+14,  0.0,  
  4.415740305996682e+14,  -0.89,  -1.565e+04,  8.456527500669236e+14,  0.35,  
  -1.976e+04,  1.498516861441523e+11,  0.74,  -2.228e+04,  6.14657514351811e+10,  
  -5.76,  -1.01e+04,  1.423047466021348e+19,  -5.63,  -2.23e+04,  
  2.73639537502256e+19,  2.0,  -3.97e+03,  1.518131517201658e+12,  2.33,  -1.818e+04,  
  1.259377675806665e+11,  2.5,  -2.492e+03,  3.012608874574744e+11,  2.51,  
  -1.952e+04,  1.449191955957372e+11,  2.56,  1.13e+03,  5.894965114670608e+11,  0.0,  
  1.324722091799004e+15,  -0.33,  -1.982e+04,  2.36736079518147e+14,  -2.36,  
  -3.767e+04,  1.915154555545609e+19,  0.0,  -0.0,  8.323670476803745e+13,  1.73,  
  -1.16e+03,  2.531366813107196e+12,  2.29,  -2.0e+04,  3.913617689963521e+10,  2.0,  
  -1.9e+03,  2.27322310952709e+12,  2.0,  -1.331e+04,  3.212716017030944e+10,  -5.81,  
  -1.85e+04,  4.434530273555837e+22,  -5.9,  -3.162e+04,  1.380224759859303e+22,  
  2.0,  298.0,  8.13909253201308e+11,  2.16,  7.727545535494192e+14,  0.0,  -0.0,  0.0,  
  0.0,  -2.085e+04,  3.311805229497512e+11,  -0.51,  -8.08e+03,  
  3.731129464110902e+10,  2.13,  -5.19e+03,  3.850728854440135e+12,  2.69,  
  -6.785e+03,  6.041398603395334e+09,  4.5,  1.0e+03,  5.491655113791278e+06,  4.5,  
  -1.966e+04,  5.418934566622352e+07,  0.0,  -4.5e+04,  2.759837691247926e+14,  0.0,  
  -0.0,  0.0,  0.0,  -0.0,  1.10393507649917e+12,  0.0,  -7.6e+03,  
  1.931886383873548e+12,  0.0,  -7.3e+03,  1.10393507649917e+12,  0.0,  -1.79e+04,  
  6.623610458995022e+12,  0.0,  -1.4e+04,  3.311805229497511e+14,  -1.38,  -4.4e+04,  
  2.31358367474493e+14,  -5.71,  -2.145e+04,  1.440405870989592e+19,  0.0,  -0.0,  
  0.0,  0.0,  -4.16e+04,  3.863772767747097e+16,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  
  0.0,  0.0,  -1.3e+03,  4.415740305996682e+14,  0.0,  -7.95e+03,  
  5.320967068726001e+14,  0.33,  -2.426e+04,  1.004788408112701e+14,  0.0,  
  -3.99e+04,  4.415740305996682e+13,  0.34,  556.0,  1.873139616752819e+12,  0.0,  
  -1.425e+04,  8.246395021448803e+12,  0.0,  -6.777e+04,  8.586407025010548e+12,  
  0.0,  -4.16e+04,  3.863772767747097e+16,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  
  0.0,  -5.728e+04,  7.782742289319151e+14,  0.0,  -0.0,  5.519675382495852e+14,  
  0.11,  -7.439e+04,  1.028989144767378e+16,  0.0,  -0.0,  1.998122488463498e+14,  
  0.12,  -4.723e+04,  2.411850552913262e+14,  0.0,  1.01e+03,  1.909807682343565e+13,  
  0.0,  -0.0,  0.0,  0.0,  -4.16e+04,  3.863772767747097e+16,  0.0,  0.0,  0.0,  0.0,  
  0.0,  0.0,  0.0,  0.0,  0.0,  -5.0e+04,  1.10393507649917e+11,  -0.66,  -3.788e+04,  
  1.631688996886271e+15,  0.0,  -2.9e+03,  1.10393507649917e+14,  0.0,  -0.0,  
  1.10393507649917e+12,  0.05,  -4.778e+04,  6.901698133509503e+13,  0.0,  
  -1.459e+03,  4.85731433659635e+13,  0.0,  -0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  
  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  -1.7e+04,  1.10393507649917e+12,  -0.66,  
  -3.954e+04,  8.615205470209169e+13,  0.0,  1.629e+03,  1.435115599448922e+12,  0.0,  
  -0.0,  4.415740305996682e+12,  0.05,  -4.033e+04,  2.52730340105347e+13,  0.0,  
  437.0,  3.532592244797345e+13,  0.0,  -0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  
  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  -5.681e+04,  1.176794791548116e+14,  -3.42,  
  -3.047e+04,  3.714783439025736e+21,  -3.3,  -0.0,  8.265027836395292e+19,  -1.29,  
  -3.369e+04,  1.925810040126591e+16,  0.0,  -0.0,  1.103935076499171e+13,  0.0,  
  -3.0e+04,  1.733178070103698e+14,  0.0,  -7.35e+03,  2.32930301141325e+12,  0.0,  
  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  -4.984e+04,  
  3.544735530638836e+13,  0.0,  3.275e+03,  1.931886383873548e+11,  -0.83,  
  -3.488e+04,  1.070375123954223e+13,  -0.44,  -2.302e+04,  3.317422133192168e+13,  
  -0.8,  -7.488e+04,  4.56076110542646e+13,  0.0,  -1.192e+03,  5.63006889014577e+12,  
  -0.74,  -2.773e+04,  2.966047420265436e+13,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  
  0.0,  0.0,  0.0,  0.0,  0.0,  -0.0,  5.519675382495852e+13,  0.0,  -9.56e+03,  
  6.402823443695189e+15,  0.33,  -4.102e+04,  5.236153352356908e+15,  0.0,  -7.0e+04,  
  1.261797792438552e+18,  -0.38,  -1.061e+04,  3.218432067459483e+15,  2.55,  
  -1.469e+04,  5.265415739908834e+10,  1.48,  -9.762e+03,  3.391585276654633e+11,  
  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  -0.0,  
  5.519675382495852e+14,  -1.61,  1.051e+03,  1.542489142540494e+12,  0.0,  -0.0,  
  0.0,  0.0,  -9.24e+04,  1.326929961952003e+16,  -0.99,  -9.659e+04,  
  3.109421773531427e+17,  0.0,  -1.758e+04,  3.322844580262503e+13,  -1.25,  
  -1.193e+04,  3.716194040760994e+14,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  
  0.0,  0.0,  0.0,  0.0,  -2.52e+04,  4.415740305996682e+14,  0.0,  -2.047e+04,  
  1.457194300978905e+14,  0.06,  -4.832e+03,  2.542366432292221e+12,  0.0,  
  -3.916e+04,  4.415740305996682e+14,  0.3,  -38.0,  5.454259205404819e+12,  -17.62,  
  -1.204e+05,  2.071357190981279e+42,  -16.05,  -3.235e+04,  3.899470362556415e+35,  
  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  -2.647e+04,  
  5.267978185054041e+13,  1.5,  962.0,  1.340872158047719e+11,  1.48,  -3.551e+04,  
  2.831156138793739e+11,  2.0,  -1.0e+03,  1.589666510158805e+12,  1.97,  -3.452e+04,  
  9.643056556904594e+11,  2.75,  -6.28e+03,  1.083552126424333e+12,  2.7,  
  -1.055e+04,  4.049391619232169e+10,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  
  0.0,  0.0,  0.0,  0.0,  -0.0,  3.311805229497511e+12,  0.0,  -3.3e+03,  
  1.479273002508888e+14,  -0.02,  -2.462e+04,  7.213552496205228e+13,  -0.43,  
  -6.322e+04,  9.387834188694984e+15,  0.6899999999999999,  -3.007e+03,  
  7.207586021707633e+13,  2.68,  -3.716e+03,  7.956216296486793e+11,  2.63,  
  -5.893e+03,  1.306038846471058e+10,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  
  0.0,  0.0,  0.0,  0.0,  -7.2e+03,  3.642985752447263e+12,  0.0,  -1.868e+03,  
  6.557374354405073e+13,  -0.02,  -2.109e+04,  1.404390695965418e+13,  2.0,  
  -5.0e+03,  3.179333020317609e+12,  1.97,  -2.336e+04,  4.454560611393168e+11,  
  0.97,  -1.59e+03,  1.204865698599389e+13,  1.05,  -2.333e+04,  
  2.524498402828105e+13,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  
  0.0,  -2.9e+03,  1.10393507649917e+14,  0.0,  -1.192e+04,  3.322844580262503e+13,  
  -0.35,  -1.694e+04,  8.580003037242053e+13,  0.0,  -7.0e+04,  
  1.261797792438552e+18,  0.61,  -6.42e+03,  1.3735268290072e+14,  0.0,  -2.044e+04,  
  1.854610928518606e+14,  -0.38,  -8.399e+03,  3.669513758783059e+13,  0.0,  0.0,  
  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  -6.0e+03,  
  1.10393507649917e+12,  1.78,  -5.911e+03,  1.44608472233566e+11,  1.76,  
  -2.771e+04,  1.842080957100274e+12,  0.0,  -1.0e+05,  4.636527321296516e+17,  0.61,  
  1.6e+03,  2.084451866322793e+14,  3.65,  -7.154e+03,  3.873677949280994e+08,  3.6,  
  -1.191e+04,  3.780956068230468e+08,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  
  0.0,  0.0,  0.0,  0.0,  596.0,  4.415740305996682e+13,  0.0,  -1.192e+04,  
  3.322844580262503e+13,  -0.53,  -1.392e+04,  7.546446023431261e+13,  0.0,  
  -4.16e+04,  2.207870152998341e+14,  0.14,  -78.0,  5.079668438428111e+12,  0.0,  
  -5.28e+04,  6.623610458995022e+14,  0.28,  406.0,  2.182853733368149e+12,  0.0,  
  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  -1.4e+04,  
  1.103935076499171e+13,  2.34,  1.05e+03,  5.852830485575308e+11,  2.34,  
  -8.028e+04,  1.619040244972422e+11,  2.0,  -1.0e+03,  1.589666510158805e+12,  1.81,  
  -3.212e+04,  1.795537392317462e+12,  0.0,  -1.34e+04,  1.10393507649917e+12,  0.0,  
  -1.23e+04,  3.532592244797345e+12,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  
  0.0,  0.0,  0.0,  -2.99e+04,  7.727545535494193e+12,  0.0,  -850.0,  
  1.435115599448922e+14,  0.0,  -8.51e+04,  2.285145608353283e+13,  2.0,  -5.0e+03,  
  3.179333020317609e+12,  1.81,  -2.096e+04,  8.295958860760892e+11,  0.0,  
  -2.043e+04,  1.335761442563996e+14,  0.0,  -9.8e+03,  3.974166275397013e+13,  0.0,  
  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  -3.497e+04,  
  7.04437139206314e+12,  0.0,  -0.0,  1.103935076499171e+13,  0.0,  -1.993e+04,  
  1.029971426373726e+14,  0.0,  -0.0,  1.10393507649917e+14,  0.0,  -3.161e+04,  
  6.012030426614482e+15,  -1.42,  -3.084e+04,  1.004700517095818e+16,  0.0,  
  -8.2e+03,  1.10393507649917e+12,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  
  0.0,  0.0,  0.0,  -0.0,  0.0,  0.0,  -0.0,  1.103935076499171e+13,  0.0,  -1.694e+04,  
  5.464478628670894e+11,  -2.85,  -3.076e+04,  2.855837389604039e+16,  -2.4,  
  -2.05e+04,  3.038511065995894e+15,  0.0,  -1.785e+04,  1.379918845623963e+11,  0.0,  
  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0}; 

__global__ void
__launch_bounds__(640, 1)
gpu_getrates(const double *temperature_array,  const double *pressure_array,  
  const double *avmolwt_array,  const double *mass_frac_array,  const double 
  *diffusion_array,  const double dt,  const double recip_dt,  const int 
  slice_stride/*NX*NY in number of doubles*/,  const int row_stride/*NX in number 
  of doubles*/,  const int total_steps/*NZ in number of doubles*/, const int 
  spec_stride/*NX*NY*NZ in number of doubles*/,int step_stride/*always 
  zero*/,  double *wdot_array) 
{
step_stride = 0;
  __shared__ volatile double scratch[170][32];
  __shared__ volatile double real_mirror[21];
  __shared__ volatile int int_mirror[21];
  __shared__ volatile double reduc_mirror[21][32];
  const int wid = threadIdx.x >> 5;
  const int tid = threadIdx.x & 0x1f;
  const double PA = 1.013250e+06;
  // Scaled R0 for non-dimensionalization
  const double R0 = 9.977411999999998e+09;
  // Scaled R0c for non-dimensionalization
  const double R0c = 238.4658699839999;
  const double DLn10 = 2.3025850929940459e0;
  {
    const int offset = (blockIdx.x*32 + tid);
    pressure_array += offset;
    temperature_array += offset;
    mass_frac_array += offset;
    avmolwt_array += offset;
    diffusion_array += offset;
    wdot_array += offset;
  }
  int index_constants[1];
  asm volatile("ld.global.cg.s32 %0,  [%1];" : "=r"(index_constants[0]) : 
    "l"(chem_index+(wid*32+tid+0)) : "memory"); 
  double real_constants[3];
  asm volatile("ld.global.cg.f64 %0,  [%1];" : "=d"(real_constants[0]) : 
    "l"(chem_real+(wid*32+tid+0)) : "memory"); 
  asm volatile("ld.global.cg.f64 %0,  [%1];" : "=d"(real_constants[1]) : 
    "l"(chem_real+(wid*32+tid+640)) : "memory"); 
  asm volatile("ld.global.cg.f64 %0,  [%1];" : "=d"(real_constants[2]) : 
    "l"(chem_real+(wid*32+tid+1280)) : "memory"); 
  // Main loop
#ifdef DYNAMIC
  for (int step = 0; step < total_steps; step++)
#else
  #pragma unroll 1
  for (int step = 0; step < TOTAL_STEPS; step++)
#endif
  {
    asm volatile("bar.sync 0, 640;" : : : "memory");
    /* Chemistry */
    double temperature;
    asm volatile("ld.global.cg.f64 %0,  [%1];" : "=d"(temperature) : 
      "l"(temperature_array) : "memory"); 
    double avmolwt;
  asm volatile("ld.global.cg.f64 %0,  [%1];" : "=d"(avmolwt) : "l"(avmolwt_array) 
      : "memory"); 
    double pressure;
    asm volatile("ld.global.cg.f64 %0,  [%1];" : "=d"(pressure) : 
      "l"(pressure_array) : "memory"); 
    double local_mass_frac[3];
    asm volatile("ld.global.cg.f64 %0,  [%1];" : "=d"(local_mass_frac[0]) : 
      "l"(mass_frac_array+(wid+0)*spec_stride) : "memory"); 
    asm volatile("ld.global.cg.f64 %0,  [%1];" : "=d"(local_mass_frac[1]) : 
      "l"(mass_frac_array+(wid+20)*spec_stride) : "memory"); 
    if ((wid+40) < 52)
    asm volatile("ld.global.cg.f64 %0,  [%1];" : "=d"(local_mass_frac[2]) : 
      "l"(mass_frac_array+(wid+40)*spec_stride) : "memory"); 
    const double otc = 1.0 / temperature;
    const double ortc = 1.0 / (temperature * R0c);
    const double vlntemp = log(temperature);
    const double prt     = PA / (R0 * temperature);
    const double oprt    = 1.0 / prt;
    double sumyow = temperature * avmolwt * 7.03444160806564;
    sumyow = pressure/sumyow;
    double local_ctot = 0.0;
    {
      local_mass_frac[0] *= recip_molecular_masses[wid+0+step*step_stride];
      local_mass_frac[0] = (local_mass_frac[0] > 1e-200) ? local_mass_frac[0] : 
        1e-200; 
      double temp_0 = local_mass_frac[0] * sumyow;
      scratch[wid+0][tid] = temp_0;
      local_ctot += temp_0;
    }
    {
      local_mass_frac[1] *= recip_molecular_masses[wid+20+step*step_stride];
      local_mass_frac[1] = (local_mass_frac[1] > 1e-200) ? local_mass_frac[1] : 
        1e-200; 
      double temp_1 = local_mass_frac[1] * sumyow;
      scratch[wid+20][tid] = temp_1;
      local_ctot += temp_1;
    }
    if ((wid+40) < 52)
    {
      local_mass_frac[2] *= recip_molecular_masses[wid+40+step*step_stride];
      local_mass_frac[2] = (local_mass_frac[2] > 1e-200) ? local_mass_frac[2] : 
        1e-200; 
      double temp_2 = local_mass_frac[2] * sumyow;
      scratch[wid+40][tid] = temp_2;
      local_ctot += temp_2;
    }
    scratch[wid+77][tid] = local_ctot;
    asm volatile("bar.sync 0, 640;" : : : "memory");
    if ((threadIdx.x >> 5) == 0)
    {
      double ctot = 0.0;
      ctot += scratch[wid+77][tid];
      ctot += scratch[wid+78][tid];
      ctot += scratch[wid+79][tid];
      ctot += scratch[wid+80][tid];
      ctot += scratch[wid+81][tid];
      ctot += scratch[wid+82][tid];
      ctot += scratch[wid+83][tid];
      ctot += scratch[wid+84][tid];
      ctot += scratch[wid+85][tid];
      ctot += scratch[wid+86][tid];
      ctot += scratch[wid+87][tid];
      ctot += scratch[wid+88][tid];
      ctot += scratch[wid+89][tid];
      ctot += scratch[wid+90][tid];
      ctot += scratch[wid+91][tid];
      ctot += scratch[wid+92][tid];
      ctot += scratch[wid+93][tid];
      ctot += scratch[wid+94][tid];
      ctot += scratch[wid+95][tid];
      ctot += scratch[wid+96][tid];
      if ((wid & 0x0) == 0)
        reduc_mirror[0][tid] = ctot;
      ctot = reduc_mirror[0][tid];
      double thb_0 = ctot;
      scratch[52][tid] = thb_0;
      double thb_1 = ctot + 1.0*scratch[1][tid] + 4.0*scratch[5][tid] + 
        1.0*scratch[6][tid] + 2.0*scratch[7][tid]; 
      scratch[53][tid] = thb_1;
      double thb_2 = ctot + 1.5*scratch[1][tid] + 11.0*scratch[5][tid] + 
        0.8999999999999999*scratch[6][tid] + 2.8*scratch[7][tid]; 
      scratch[54][tid] = thb_2;
      double thb_3 = ctot + 1.0*scratch[1][tid] + 15.0*scratch[5][tid] + 
        1.0*scratch[6][tid] + 2.0*scratch[7][tid]; 
      scratch[55][tid] = thb_3;
    }
    else
    {
      const double &tk1 = temperature;
      const double &tklog = vlntemp;
      double tk2 = tk1 * tk1;
      double tk3 = tk1 * tk2;
      double tk4 = tk1 * tk3;
      double tk5 = tk1 * tk4;
      {
        int index = wid+-1+step*step_stride;
        if (tk1 > gibbs_temp[index])
        {
          scratch[index+56][tid] = 
            gibbs_high[index][0]*tk1*(-3.787491742782046-tklog) + 
            gibbs_high[index][1]*tk2 + gibbs_high[index][2]*tk3 + 
            gibbs_high[index][3]*tk4 + gibbs_high[index][4]*tk5 + 
            (gibbs_high[index][5] - tk1*gibbs_high[index][6]); 
        }
        else
        {
          scratch[index+56][tid] = 
            gibbs_low[index][0]*tk1*(-3.787491742782046-tklog) + 
            gibbs_low[index][1]*tk2 + gibbs_low[index][2]*tk3 + 
            gibbs_low[index][3]*tk4 + gibbs_low[index][4]*tk5 + 
            (gibbs_low[index][5] - tk1*gibbs_low[index][6]); 
        }
      }
      if ((wid+18) < 21)
      {
        int index = wid+18+step*step_stride;
        if (tk1 > gibbs_temp[index])
        {
          scratch[index+56][tid] = 
            gibbs_high[index][0]*tk1*(-3.787491742782046-tklog) + 
            gibbs_high[index][1]*tk2 + gibbs_high[index][2]*tk3 + 
            gibbs_high[index][3]*tk4 + gibbs_high[index][4]*tk5 + 
            (gibbs_high[index][5] - tk1*gibbs_high[index][6]); 
        }
        else
        {
          scratch[index+56][tid] = 
            gibbs_low[index][0]*tk1*(-3.787491742782046-tklog) + 
            gibbs_low[index][1]*tk2 + gibbs_low[index][2]*tk3 + 
            gibbs_low[index][3]*tk4 + gibbs_low[index][4]*tk5 + 
            (gibbs_low[index][5] - tk1*gibbs_low[index][6]); 
        }
      }
    }
    asm volatile("bar.sync 0, 640;" : : : "memory");
    double avals[5];
    double denoms[1];
    avals[0] = 0.0;
    avals[1] = 0.0;
    avals[2] = 0.0;
    avals[3] = 0.0;
    avals[4] = 0.0;
    denoms[0] = 0.0;
    double rr_f_0 = 0.0,  rr_r_0 = 0.0;
    /* Chemistry for level 0 */
    {
      {
        if (tid == 0)
          real_mirror[wid] = real_constants[0];
        double arrhenius = real_mirror[wid] * vlntemp;
        if (tid == 1)
          real_mirror[wid] = real_constants[0];
        arrhenius = __fma_rn(real_mirror[wid],  ortc,  arrhenius);
        arrhenius = exp(arrhenius);
        if (tid == 2)
          real_mirror[wid] = real_constants[0];
        rr_f_0 = real_mirror[wid] * arrhenius;
      }
      {
        if (tid == 3)
          real_mirror[wid] = real_constants[0];
        double arrhenius = real_mirror[wid] * vlntemp;
        if (tid == 4)
          real_mirror[wid] = real_constants[0];
        arrhenius = __fma_rn(real_mirror[wid],  ortc,  arrhenius);
        arrhenius = exp(arrhenius);
        if (tid == 5)
          real_mirror[wid] = real_constants[0];
        rr_r_0 = real_mirror[wid] * arrhenius;
      }
      if (wid == 0)
      {
        double rr_k0 = rr_f_0;
        double rr_kinf = rr_r_0;
        double pr = rr_k0 / rr_kinf * scratch[53][tid];
        double fcent = log10(1.0 * exp(-1.2e+17 * temperature) + 
          exp(-0.3333333333333334 * otc)); 
        double flogpr = log10(pr) - 0.4 - 0.67 * fcent;
        double fdenom = 0.75 - 1.27 * fcent - 0.14 * flogpr;
        double fquan = flogpr / fdenom;
        fquan = fcent / (1.0 + fquan * fquan);
        rr_f_0 = rr_kinf * pr/(1.0 + pr) * exp(fquan*DLn10);
        double xik = -scratch[56][tid] - scratch[63][tid] + scratch[64][tid];
        rr_r_0 = rr_f_0 * exp(xik*otc) * prt;
      }
      else if (wid == 1)
      {
        double rr_k0 = rr_f_0;
        double rr_kinf = rr_r_0;
        double pr = rr_k0 / rr_kinf * scratch[53][tid];
        double fcent = log10(0.0 * exp(-1.2e+17 * temperature) + 1.0 * 
  exp(-1.263157894736842 * temperature) + exp(-1.666666666666667 * otc)); 
        double flogpr = log10(pr) - 0.4 - 0.67 * fcent;
        double fdenom = 0.75 - 1.27 * fcent - 0.14 * flogpr;
        double fquan = flogpr / fdenom;
        fquan = fcent / (1.0 + fquan * fquan);
        rr_f_0 = rr_kinf * pr/(1.0 + pr) * exp(fquan*DLn10);
        double xik = -scratch[56][tid] - scratch[70][tid] + scratch[71][tid];
        rr_r_0 = rr_f_0 * exp(xik*otc) * prt;
      }
      else if (wid == 2)
      {
        double rr_k0 = rr_f_0;
        double rr_kinf = rr_r_0;
        double pr = rr_k0 / rr_kinf * scratch[55][tid];
        double fcent = log10(0.5860000000000001 * exp(-0.4301075268817203 * 
          temperature) + 0.414 * exp(-0.02198204799413812 * temperature) + 
          exp(-8.333333333333336e+97 * otc)); 
        double flogpr = log10(pr) - 0.4 - 0.67 * fcent;
        double fdenom = 0.75 - 1.27 * fcent - 0.14 * flogpr;
        double fquan = flogpr / fdenom;
        fquan = fcent / (1.0 + fquan * fquan);
        rr_f_0 = rr_kinf * pr/(1.0 + pr) * exp(fquan*DLn10);
        double xik = scratch[60][tid] + scratch[63][tid] - scratch[74][tid];
        rr_r_0 = rr_f_0 * exp(xik*otc) * oprt;
      }
      else if (wid == 3)
      {
        double rr_k0 = rr_f_0;
        double rr_kinf = rr_r_0;
        double pr = rr_k0 / rr_kinf * scratch[53][tid];
        double fcent = log10(0.595 * exp(-0.1071428571428571 * temperature) + 
          0.405 * exp(-1.724137931034482 * temperature) + 
          exp(-8.333333333333335e+12 * otc)); 
        double flogpr = log10(pr) - 0.4 - 0.67 * fcent;
        double fdenom = 0.75 - 1.27 * fcent - 0.14 * flogpr;
        double fquan = flogpr / fdenom;
        fquan = fcent / (1.0 + fquan * fquan);
        rr_f_0 = rr_kinf * pr/(1.0 + pr) * exp(fquan*DLn10);
        double xik = -2.0 * scratch[63][tid] + scratch[69][tid];
        rr_r_0 = rr_f_0 * exp(xik*otc) * prt;
      }
      else if (wid == 4)
      {
        double rr_k0 = rr_f_0;
        double rr_kinf = rr_r_0;
        double pr = rr_k0 / rr_kinf * scratch[54][tid];
        double fcent = log10(0.5 * exp(-1.2e+32 * temperature) + 0.5 * 
          exp(-1.2e-28 * temperature) + exp(-8.333333333333336e+97 * otc)); 
        double flogpr = log10(pr) - 0.4 - 0.67 * fcent;
        double fdenom = 0.75 - 1.27 * fcent - 0.14 * flogpr;
        double fquan = flogpr / fdenom;
        fquan = fcent / (1.0 + fquan * fquan);
        rr_f_0 = rr_kinf * pr/(1.0 + pr) * exp(fquan*DLn10);
        double xik = -scratch[56][tid] - scratch[59][tid] + scratch[65][tid];
        rr_r_0 = rr_f_0 * exp(xik*otc) * prt;
      }
      else if (wid == 5)
      {
        double rr_k0 = rr_f_0;
        double rr_kinf = rr_r_0;
        double pr = rr_k0 / rr_kinf * scratch[54][tid];
        rr_f_0 = rr_kinf * pr/(1.0 + pr);
        double xik = -scratch[58][tid] - scratch[61][tid] + scratch[62][tid];
        rr_r_0 = rr_f_0 * exp(xik*otc) * prt;
      }
      else if (wid == 6)
      {
        double rr_k0 = rr_f_0;
        double rr_kinf = rr_r_0;
        double pr = rr_k0 / rr_kinf * scratch[52][tid];
        rr_f_0 = rr_kinf * pr/(1.0 + pr);
        double xik = scratch[56][tid] + scratch[67][tid] - scratch[68][tid];
        rr_r_0 = rr_f_0 * exp(xik*otc) * oprt;
      }
      else if (wid == 7)
      {
        double rr_k0 = rr_f_0;
        double rr_kinf = rr_r_0;
        double pr = rr_k0 / rr_kinf * scratch[52][tid];
        rr_f_0 = rr_kinf * pr/(1.0 + pr);
        double xik = scratch[57][tid] - scratch[70][tid] + scratch[72][tid];
        rr_r_0 = rr_f_0 * exp(xik*otc) * oprt;
      }
      else if (wid == 8)
      {
        double rr_k0 = rr_f_0;
        double rr_kinf = rr_r_0;
        double pr = rr_k0 / rr_kinf * scratch[54][tid];
        double fcent = log10(0.53 * exp(-1.2 * temperature) + 0.47 * 
  exp(-0.05999999999999998 * temperature) + exp(-8.333333333333335e+12 * 
          otc)); 
        double flogpr = log10(pr) - 0.4 - 0.67 * fcent;
        double fdenom = 0.75 - 1.27 * fcent - 0.14 * flogpr;
        double fquan = flogpr / fdenom;
        fquan = fcent / (1.0 + fquan * fquan);
        rr_f_0 = rr_kinf * pr/(1.0 + pr) * exp(fquan*DLn10);
        double xik = -2.0 * scratch[60][tid] + scratch[66][tid];
        rr_r_0 = rr_f_0 * exp(xik*otc) * prt;
      }
      else if (wid == 9)
      {
        double rr_k0 = rr_f_0;
        double rr_kinf = rr_r_0;
        double pr = rr_k0 / rr_kinf * scratch[53][tid];
        double fcent = log10(0.0 * exp(-1.2e+17 * temperature) + 1.0 * 
          exp(-0.1777777777777777 * temperature) + exp(-8.333333333333335e+12 * 
          otc)); 
        double flogpr = log10(pr) - 0.4 - 0.67 * fcent;
        double fdenom = 0.75 - 1.27 * fcent - 0.14 * flogpr;
        double fquan = flogpr / fdenom;
        fquan = fcent / (1.0 + fquan * fquan);
        rr_f_0 = rr_kinf * pr/(1.0 + pr) * exp(fquan*DLn10);
        double xik = -scratch[56][tid] - scratch[72][tid] + scratch[73][tid];
        rr_r_0 = rr_f_0 * exp(xik*otc) * prt;
      }
      else if (wid == 10)
      {
        double rr_k0 = rr_f_0;
        double rr_kinf = rr_r_0;
        double pr = rr_k0 / rr_kinf * scratch[52][tid];
        double fcent = log10(0.04000000000000004 * exp(-1.775147928994083 * 
          temperature) + 0.96 * exp(-0.06469002695417789 * temperature) + 
          exp(-62.85833333333335 * otc)); 
        double flogpr = log10(pr) - 0.4 - 0.67 * fcent;
        double fdenom = 0.75 - 1.27 * fcent - 0.14 * flogpr;
        double fquan = flogpr / fdenom;
        fquan = fcent / (1.0 + fquan * fquan);
        rr_f_0 = rr_kinf * pr/(1.0 + pr) * exp(fquan*DLn10);
        double xik = scratch[56][tid] + scratch[67][tid] - scratch[75][tid];
        rr_r_0 = rr_f_0 * exp(xik*otc) * oprt;
      }
      else if (wid == 11)
      {
        double rr_k0 = rr_f_0;
        double rr_kinf = rr_r_0;
        double pr = rr_k0 / rr_kinf * scratch[52][tid];
        rr_f_0 = rr_kinf * pr/(1.0 + pr);
        double xik = scratch[61][tid] + scratch[63][tid] - scratch[76][tid];
        rr_r_0 = rr_f_0 * exp(xik*otc) * oprt;
      }
    }
    double rr_f_1 = rr_f_0,  rr_r_1 = rr_r_0;
    /* Chemistry for level 1 */
    {
      {
        if (tid == 6)
          real_mirror[wid] = real_constants[0];
        double arrhenius = real_mirror[wid] * vlntemp;
        if (tid == 7)
          real_mirror[wid] = real_constants[0];
        arrhenius = __fma_rn(real_mirror[wid],  ortc,  arrhenius);
        arrhenius = exp(arrhenius);
        if (tid == 8)
          real_mirror[wid] = real_constants[0];
        rr_f_1 = real_mirror[wid] * arrhenius;
      }
      {
        if (tid == 9)
          real_mirror[wid] = real_constants[0];
        double arrhenius = real_mirror[wid] * vlntemp;
        if (tid == 10)
          real_mirror[wid] = real_constants[0];
        arrhenius = __fma_rn(real_mirror[wid],  ortc,  arrhenius);
        arrhenius = exp(arrhenius);
        if (tid == 11)
          real_mirror[wid] = real_constants[0];
        rr_r_1 = real_mirror[wid] * arrhenius;
      }
    }
    if (wid == 0)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_0 *= mole_frac_NC_H;
      double mole_frac_NC_CH3 = scratch[8][tid];
      rr_f_0 *= mole_frac_NC_CH3;
      double mole_frac_NC_CH4 = scratch[9][tid];
      rr_r_0 *= mole_frac_NC_CH4;
      rr_f_1 *= mole_frac_NC_H;
      double mole_frac_NC_CH2O = scratch[12][tid];
      rr_f_1 *= mole_frac_NC_CH2O;
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_r_1 *= mole_frac_NC_H2;
    }
    else if (wid == 1)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_0 *= mole_frac_NC_H;
      double mole_frac_NC_C2H4 = scratch[14][tid];
      rr_f_0 *= mole_frac_NC_C2H4;
      double mole_frac_NC_C2H5 = scratch[15][tid];
      rr_r_0 *= mole_frac_NC_C2H5;
      double mole_frac_NC_O = scratch[2][tid];
      rr_f_1 *= mole_frac_NC_O;
      double mole_frac_NC_CH2O = scratch[12][tid];
      rr_f_1 *= mole_frac_NC_CH2O;
      double mole_frac_NC_OH = scratch[4][tid];
      rr_r_1 *= mole_frac_NC_OH;
    }
    else if (wid == 2)
    {
      double mole_frac_NC_CH3OH = scratch[18][tid];
      rr_f_0 *= mole_frac_NC_CH3OH;
      double mole_frac_NC_OH = scratch[4][tid];
      rr_r_0 *= mole_frac_NC_OH;
      double mole_frac_NC_CH3 = scratch[8][tid];
      rr_r_0 *= mole_frac_NC_CH3;
      double mole_frac_NC_O2 = scratch[3][tid];
      rr_f_1 *= mole_frac_NC_O2;
      rr_f_1 *= mole_frac_NC_CH3;
      double mole_frac_NC_O = scratch[2][tid];
      rr_r_1 *= mole_frac_NC_O;
    }
    else if (wid == 3)
    {
      double mole_frac_NC_CH3 = scratch[8][tid];
      rr_f_0 *= mole_frac_NC_CH3;
      rr_f_0 *= mole_frac_NC_CH3;
      double mole_frac_NC_C2H6 = scratch[13][tid];
      rr_r_0 *= mole_frac_NC_C2H6;
      rr_f_1 *= mole_frac_NC_CH3;
      double mole_frac_NC_CH2O = scratch[12][tid];
      rr_f_1 *= mole_frac_NC_CH2O;
      double mole_frac_NC_CH4 = scratch[9][tid];
      rr_r_1 *= mole_frac_NC_CH4;
    }
    else if (wid == 4)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_0 *= mole_frac_NC_H;
      double mole_frac_NC_O2 = scratch[3][tid];
      rr_f_0 *= mole_frac_NC_O2;
      double mole_frac_NC_HO2 = scratch[10][tid];
      rr_r_0 *= mole_frac_NC_HO2;
      double mole_frac_NC_CH3 = scratch[8][tid];
      rr_f_1 *= mole_frac_NC_CH3;
      double mole_frac_NC_CO = scratch[6][tid];
      rr_r_1 *= mole_frac_NC_CO;
      double mole_frac_NC_CH4 = scratch[9][tid];
      rr_r_1 *= mole_frac_NC_CH4;
    }
    else if (wid == 5)
    {
      double mole_frac_NC_O = scratch[2][tid];
      rr_f_0 *= mole_frac_NC_O;
      double mole_frac_NC_CO = scratch[6][tid];
      rr_f_0 *= mole_frac_NC_CO;
      double mole_frac_NC_CO2 = scratch[7][tid];
      rr_r_0 *= mole_frac_NC_CO2;
      double mole_frac_NC_HO2 = scratch[10][tid];
      rr_f_1 *= mole_frac_NC_HO2;
      double mole_frac_NC_O2 = scratch[3][tid];
      rr_r_1 *= mole_frac_NC_O2;
      double mole_frac_NC_CH2O = scratch[12][tid];
      rr_r_1 *= mole_frac_NC_CH2O;
    }
    else if (wid == 6)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_0 *= mole_frac_NC_H;
      double mole_frac_NC_CH2O = scratch[12][tid];
      rr_r_0 *= mole_frac_NC_CH2O;
      double mole_frac_NC_O2 = scratch[3][tid];
      rr_f_1 *= mole_frac_NC_O2;
      double mole_frac_NC_HO2 = scratch[10][tid];
      rr_r_1 *= mole_frac_NC_HO2;
      rr_r_1 *= mole_frac_NC_CH2O;
    }
    else if (wid == 7)
    {
      double mole_frac_NC_C2H4 = scratch[14][tid];
      rr_f_0 *= mole_frac_NC_C2H4;
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_r_0 *= mole_frac_NC_H2;
      double mole_frac_NC_C2H2 = scratch[17][tid];
      rr_r_0 *= mole_frac_NC_C2H2;
      double mole_frac_NC_O2 = scratch[3][tid];
      rr_f_1 *= mole_frac_NC_O2;
      double mole_frac_NC_CO = scratch[6][tid];
      rr_r_1 *= mole_frac_NC_CO;
      double mole_frac_NC_HO2 = scratch[10][tid];
      rr_r_1 *= mole_frac_NC_HO2;
    }
    else if (wid == 8)
    {
      double mole_frac_NC_OH = scratch[4][tid];
      rr_f_0 *= mole_frac_NC_OH;
      rr_f_0 *= mole_frac_NC_OH;
      double mole_frac_NC_H2O2 = scratch[11][tid];
      rr_r_0 *= mole_frac_NC_H2O2;
      double mole_frac_NC_HO2 = scratch[10][tid];
      rr_f_1 *= mole_frac_NC_HO2;
      double mole_frac_NC_CH2O = scratch[12][tid];
      rr_f_1 *= mole_frac_NC_CH2O;
      rr_r_1 *= mole_frac_NC_H2O2;
    }
    else if (wid == 9)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_0 *= mole_frac_NC_H;
      double mole_frac_NC_C2H2 = scratch[17][tid];
      rr_f_0 *= mole_frac_NC_C2H2;
      rr_f_1 *= mole_frac_NC_H;
      double mole_frac_NC_C2H4 = scratch[14][tid];
      rr_f_1 *= mole_frac_NC_C2H4;
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_r_1 *= mole_frac_NC_H2;
    }
    else if (wid == 10)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_0 *= mole_frac_NC_H;
      double mole_frac_NC_CH2O = scratch[12][tid];
      rr_r_0 *= mole_frac_NC_CH2O;
      double mole_frac_NC_OH = scratch[4][tid];
      rr_f_1 *= mole_frac_NC_OH;
      double mole_frac_NC_C2H4 = scratch[14][tid];
      rr_f_1 *= mole_frac_NC_C2H4;
      double mole_frac_NC_H2O = scratch[5][tid];
      rr_r_1 *= mole_frac_NC_H2O;
    }
    else if (wid == 11)
    {
      double mole_frac_NC_CO = scratch[6][tid];
      rr_r_0 *= mole_frac_NC_CO;
      double mole_frac_NC_CH3 = scratch[8][tid];
      rr_r_0 *= mole_frac_NC_CH3;
      double mole_frac_NC_O2 = scratch[3][tid];
      rr_f_1 *= mole_frac_NC_O2;
      double mole_frac_NC_C2H = scratch[16][tid];
      rr_f_1 *= mole_frac_NC_C2H;
      rr_r_1 *= mole_frac_NC_CO;
    }
    else if (wid == 12)
    {
      double mole_frac_NC_OH = scratch[4][tid];
      rr_f_0 *= mole_frac_NC_OH;
      double mole_frac_NC_H2O = scratch[5][tid];
      rr_r_0 *= mole_frac_NC_H2O;
      double mole_frac_NC_CO = scratch[6][tid];
      rr_r_0 *= mole_frac_NC_CO;
      rr_f_1 *= mole_frac_NC_OH;
      double mole_frac_NC_CH3OH = scratch[18][tid];
      rr_f_1 *= mole_frac_NC_CH3OH;
      rr_r_1 *= mole_frac_NC_H2O;
    }
    else if (wid == 13)
    {
      double thb_2 = scratch[54][tid];
      rr_f_0 *= thb_2;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_0 *= mole_frac_NC_H;
      double mole_frac_NC_CO = scratch[6][tid];
      rr_r_0 *= mole_frac_NC_CO;
      rr_r_0 *= thb_2;
      rr_f_1 *= mole_frac_NC_H;
      double mole_frac_NC_CH3OH = scratch[18][tid];
      rr_f_1 *= mole_frac_NC_CH3OH;
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_r_1 *= mole_frac_NC_H2;
    }
    else if (wid == 14)
    {
      double mole_frac_NC_O = scratch[2][tid];
      rr_f_0 *= mole_frac_NC_O;
      double mole_frac_NC_C2H4 = scratch[14][tid];
      rr_f_0 *= mole_frac_NC_C2H4;
      double mole_frac_NC_CH3 = scratch[8][tid];
      rr_r_0 *= mole_frac_NC_CH3;
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_1 *= mole_frac_NC_H;
      double mole_frac_NC_CH3OH = scratch[18][tid];
      rr_f_1 *= mole_frac_NC_CH3OH;
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_r_1 *= mole_frac_NC_H2;
    }
    else if (wid == 15)
    {
      double mole_frac_NC_HO2 = scratch[10][tid];
      rr_f_0 *= mole_frac_NC_HO2;
      double mole_frac_NC_CH3OH = scratch[18][tid];
      rr_f_0 *= mole_frac_NC_CH3OH;
      double mole_frac_NC_H2O2 = scratch[11][tid];
      rr_r_0 *= mole_frac_NC_H2O2;
      double mole_frac_NC_O = scratch[2][tid];
      rr_f_1 *= mole_frac_NC_O;
      rr_f_1 *= mole_frac_NC_CH3OH;
      double mole_frac_NC_OH = scratch[4][tid];
      rr_r_1 *= mole_frac_NC_OH;
    }
    else if (wid == 16)
    {
      double mole_frac_NC_CH3 = scratch[8][tid];
      rr_f_0 *= mole_frac_NC_CH3;
      double mole_frac_NC_HO2 = scratch[10][tid];
      rr_f_0 *= mole_frac_NC_HO2;
      double mole_frac_NC_OH = scratch[4][tid];
      rr_r_0 *= mole_frac_NC_OH;
      double mole_frac_NC_O2 = scratch[3][tid];
      rr_f_1 *= mole_frac_NC_O2;
      rr_r_1 *= mole_frac_NC_HO2;
      double mole_frac_NC_CH2O = scratch[12][tid];
      rr_r_1 *= mole_frac_NC_CH2O;
    }
    else if (wid == 17)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_0 *= mole_frac_NC_H;
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_r_0 *= mole_frac_NC_H2;
      double mole_frac_NC_CO = scratch[6][tid];
      rr_r_0 *= mole_frac_NC_CO;
      double mole_frac_NC_O2 = scratch[3][tid];
      rr_f_1 *= mole_frac_NC_O2;
      double mole_frac_NC_HO2 = scratch[10][tid];
      rr_r_1 *= mole_frac_NC_HO2;
      double mole_frac_NC_C2H2 = scratch[17][tid];
      rr_r_1 *= mole_frac_NC_C2H2;
    }
    else if (wid == 18)
    {
      double mole_frac_NC_CH2O = scratch[12][tid];
      rr_f_0 *= mole_frac_NC_CH2O;
      double thb_0 = scratch[52][tid];
      rr_f_0 *= thb_0;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_0 *= mole_frac_NC_H;
      rr_r_0 *= thb_0;
      double mole_frac_NC_OH = scratch[4][tid];
      rr_f_1 *= mole_frac_NC_OH;
      double mole_frac_NC_HCCO = scratch[20][tid];
      rr_f_1 *= mole_frac_NC_HCCO;
      rr_r_1 = 0.0;
    }
    else if (wid == 19)
    {
      double mole_frac_NC_OH = scratch[4][tid];
      rr_f_0 *= mole_frac_NC_OH;
      double mole_frac_NC_CH2O = scratch[12][tid];
      rr_f_0 *= mole_frac_NC_CH2O;
      double mole_frac_NC_H2O = scratch[5][tid];
      rr_r_0 *= mole_frac_NC_H2O;
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_1 *= mole_frac_NC_H;
      double mole_frac_NC_HCCO = scratch[20][tid];
      rr_f_1 *= mole_frac_NC_HCCO;
      double mole_frac_NC_CO = scratch[6][tid];
      rr_r_1 *= mole_frac_NC_CO;
    }
    scratch[wid+77][tid] = rr_f_0;
    scratch[wid+97][tid] = rr_r_0;
    scratch[wid+117][tid] = rr_f_1;
    scratch[wid+137][tid] = rr_r_1;
    asm volatile("bar.sync 0, 640;" : : : "memory");
    if (wid == 0)
    {
      double rate_91 = scratch[91][tid];
      avals[0] += rate_91;
      double rate_95 = scratch[95][tid];
      avals[0] += rate_95;
      double rate_96 = scratch[96][tid];
      avals[0] += rate_96;
      double rate_117 = scratch[117][tid];
      avals[0] += rate_117;
      double rate_118 = scratch[118][tid];
      avals[0] += rate_118;
      double rate_120 = scratch[120][tid];
      avals[0] += rate_120;
      double rate_125 = scratch[125][tid];
      avals[0] += rate_125;
      double rate_128 = scratch[128][tid];
      avals[0] += rate_128;
      double rate_135 = scratch[135][tid];
      avals[0] = __fma_rn(2.0, rate_135, avals[0]);
      double rate_109 = scratch[109][tid];
      avals[0] += rate_109;
      double rate_110 = scratch[110][tid];
      avals[0] += rate_110;
      double rate_114 = scratch[114][tid];
      avals[0] += rate_114;
      double rate_141 = scratch[141][tid];
      avals[0] += rate_141;
      double rate_142 = scratch[142][tid];
      avals[0] += rate_142;
      double rate_144 = scratch[144][tid];
      avals[0] += rate_144;
      double rate_89 = scratch[89][tid];
      denoms[0] += rate_89;
      double rate_90 = scratch[90][tid];
      denoms[0] += rate_90;
      double rate_94 = scratch[94][tid];
      denoms[0] += rate_94;
      double rate_121 = scratch[121][tid];
      denoms[0] += rate_121;
      double rate_122 = scratch[122][tid];
      denoms[0] += rate_122;
      double rate_124 = scratch[124][tid];
      denoms[0] += rate_124;
      double rate_111 = scratch[111][tid];
      denoms[0] += rate_111;
      double rate_115 = scratch[115][tid];
      denoms[0] += rate_115;
      double rate_116 = scratch[116][tid];
      denoms[0] += rate_116;
      double rate_137 = scratch[137][tid];
      denoms[0] += rate_137;
      double rate_138 = scratch[138][tid];
      denoms[0] += rate_138;
      double rate_140 = scratch[140][tid];
      denoms[0] += rate_140;
      double rate_145 = scratch[145][tid];
      denoms[0] += rate_145;
      double rate_148 = scratch[148][tid];
      denoms[0] += rate_148;
    }
    else if (wid == 1)
    {
      double rate_93 = scratch[93][tid];
      avals[0] += rate_93;
      double rate_119 = scratch[119][tid];
      avals[0] += rate_119;
      double rate_130 = scratch[130][tid];
      avals[0] += rate_130;
      double rate_103 = scratch[103][tid];
      avals[0] += rate_103;
      double rate_143 = scratch[143][tid];
      avals[0] += rate_143;
      double rate_83 = scratch[83][tid];
      denoms[0] += rate_83;
      double rate_123 = scratch[123][tid];
      denoms[0] += rate_123;
      double rate_113 = scratch[113][tid];
      denoms[0] += rate_113;
      double rate_139 = scratch[139][tid];
      denoms[0] += rate_139;
      double rate_150 = scratch[150][tid];
      denoms[0] += rate_150;
    }
    else if (wid == 2)
    {
      double rate_86 = scratch[86][tid];
      avals[0] += rate_86;
      double rate_126 = scratch[126][tid];
      avals[0] += rate_126;
      double rate_127 = scratch[127][tid];
      avals[0] += rate_127;
      double rate_154 = scratch[154][tid];
      avals[0] += rate_154;
      double rate_134 = scratch[134][tid];
      denoms[0] += rate_134;
      double rate_106 = scratch[106][tid];
      denoms[0] += rate_106;
      double rate_146 = scratch[146][tid];
      denoms[0] += rate_146;
      double rate_147 = scratch[147][tid];
      denoms[0] += rate_147;
    }
    else if (wid == 3)
    {
      double rate_108 = scratch[108][tid];
      avals[0] += rate_108;
      double rate_88 = scratch[88][tid];
      denoms[0] += rate_88;
    }
    else if (wid == 4)
    {
    }
    else if (wid == 5)
    {
    }
    else if (wid == 6)
    {
    }
    else if (wid == 7)
    {
    }
    else if (wid == 8)
    {
    }
    else if (wid == 9)
    {
    }
    else if (wid == 10)
    {
    }
    else if (wid == 11)
    {
      double rate_92 = scratch[92][tid];
      avals[0] += rate_92;
      double rate_129 = scratch[129][tid];
      avals[0] += rate_129;
      double rate_131 = scratch[131][tid];
      avals[0] += rate_131;
      double rate_132 = scratch[132][tid];
      avals[0] += rate_132;
      double rate_153 = scratch[153][tid];
      avals[0] += rate_153;
      double rate_107 = scratch[107][tid];
      avals[0] += rate_107;
      double rate_133 = scratch[133][tid];
      denoms[0] += rate_133;
      double rate_87 = scratch[87][tid];
      denoms[0] += rate_87;
      double rate_112 = scratch[112][tid];
      denoms[0] += rate_112;
      double rate_149 = scratch[149][tid];
      denoms[0] += rate_149;
      double rate_151 = scratch[151][tid];
      denoms[0] += rate_151;
      double rate_152 = scratch[152][tid];
      denoms[0] += rate_152;
    }
    else if (wid == 12)
    {
    }
    else if (wid == 13)
    {
    }
    else if (wid == 14)
    {
      double rate_136 = scratch[136][tid];
      avals[0] += rate_136;
      double rate_156 = scratch[156][tid];
      denoms[0] += rate_156;
    }
    else if (wid == 15)
    {
    }
    else if (wid == 16)
    {
    }
    else if (wid == 17)
    {
    }
    else if (wid == 18)
    {
    }
    else if (wid == 19)
    {
    }
    asm volatile("bar.sync 0, 640;" : : : "memory");
    double rr_f_2 = rr_f_1,  rr_r_2 = rr_r_1;
    /* Chemistry for level 2 */
    {
      {
        if (tid == 12)
          real_mirror[wid] = real_constants[0];
        double arrhenius = real_mirror[wid] * vlntemp;
        if (tid == 13)
          real_mirror[wid] = real_constants[0];
        arrhenius = __fma_rn(real_mirror[wid],  ortc,  arrhenius);
        arrhenius = exp(arrhenius);
        if (tid == 14)
          real_mirror[wid] = real_constants[0];
        rr_f_2 = real_mirror[wid] * arrhenius;
      }
      {
        if (tid == 15)
          real_mirror[wid] = real_constants[0];
        double arrhenius = real_mirror[wid] * vlntemp;
        if (tid == 16)
          real_mirror[wid] = real_constants[0];
        arrhenius = __fma_rn(real_mirror[wid],  ortc,  arrhenius);
        arrhenius = exp(arrhenius);
        if (tid == 17)
          real_mirror[wid] = real_constants[0];
        rr_r_2 = real_mirror[wid] * arrhenius;
      }
    }
    double rr_f_3 = rr_f_2,  rr_r_3 = rr_r_2;
    /* Chemistry for level 3 */
    {
      {
        if (tid == 18)
          real_mirror[wid] = real_constants[0];
        double arrhenius = real_mirror[wid] * vlntemp;
        if (tid == 19)
          real_mirror[wid] = real_constants[0];
        arrhenius = __fma_rn(real_mirror[wid],  ortc,  arrhenius);
        arrhenius = exp(arrhenius);
        if (tid == 20)
          real_mirror[wid] = real_constants[0];
        rr_f_3 = real_mirror[wid] * arrhenius;
      }
      {
        if (tid == 21)
          real_mirror[wid] = real_constants[0];
        double arrhenius = real_mirror[wid] * vlntemp;
        if (tid == 22)
          real_mirror[wid] = real_constants[0];
        arrhenius = __fma_rn(real_mirror[wid],  ortc,  arrhenius);
        arrhenius = exp(arrhenius);
        if (tid == 23)
          real_mirror[wid] = real_constants[0];
        rr_r_3 = real_mirror[wid] * arrhenius;
      }
    }
    if (wid == 0)
    {
      double mole_frac_NC_CH3 = scratch[8][tid];
      rr_f_2 *= mole_frac_NC_CH3;
      double mole_frac_NC_CH4 = scratch[9][tid];
      rr_r_2 *= mole_frac_NC_CH4;
      double mole_frac_NC_C2H2 = scratch[17][tid];
      rr_r_2 *= mole_frac_NC_C2H2;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_3 *= mole_frac_NC_H;
      double mole_frac_NC_C3H6 = scratch[24][tid];
      rr_r_3 *= mole_frac_NC_C3H6;
    }
    else if (wid == 1)
    {
      double mole_frac_NC_CH2O = scratch[12][tid];
      rr_f_2 *= mole_frac_NC_CH2O;
      double mole_frac_NC_CH3OH = scratch[18][tid];
      rr_f_2 *= mole_frac_NC_CH3OH;
      rr_r_2 = 0.0;
      double mole_frac_NC_O2 = scratch[3][tid];
      rr_f_3 *= mole_frac_NC_O2;
      double mole_frac_NC_HO2 = scratch[10][tid];
      rr_r_3 *= mole_frac_NC_HO2;
      double mole_frac_NC_C3H6 = scratch[24][tid];
      rr_r_3 *= mole_frac_NC_C3H6;
    }
    else if (wid == 2)
    {
      double mole_frac_NC_CH2O = scratch[12][tid];
      rr_f_2 *= mole_frac_NC_CH2O;
      double mole_frac_NC_CH3OH = scratch[18][tid];
      rr_r_2 *= mole_frac_NC_CH3OH;
      double mole_frac_NC_C4H7 = scratch[26][tid];
      rr_f_3 *= mole_frac_NC_C4H7;
      double mole_frac_NC_C2H4 = scratch[14][tid];
      rr_r_3 *= mole_frac_NC_C2H4;
    }
    else if (wid == 3)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_2 *= mole_frac_NC_H;
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_r_2 *= mole_frac_NC_H2;
      double mole_frac_NC_C2H2 = scratch[17][tid];
      rr_r_2 *= mole_frac_NC_C2H2;
      double mole_frac_NC_C4H8_1 = scratch[27][tid];
      rr_f_3 *= mole_frac_NC_C4H8_1;
      double mole_frac_NC_C2H5 = scratch[15][tid];
      rr_r_3 *= mole_frac_NC_C2H5;
    }
    else if (wid == 4)
    {
      double mole_frac_NC_OH = scratch[4][tid];
      rr_f_2 *= mole_frac_NC_OH;
      double mole_frac_NC_CH3OH = scratch[18][tid];
      rr_f_2 *= mole_frac_NC_CH3OH;
      double mole_frac_NC_H2O = scratch[5][tid];
      rr_r_2 *= mole_frac_NC_H2O;
      double mole_frac_NC_C2H5CHO = scratch[30][tid];
      rr_f_3 *= mole_frac_NC_C2H5CHO;
      double mole_frac_NC_C2H5 = scratch[15][tid];
      rr_r_3 *= mole_frac_NC_C2H5;
    }
    else if (wid == 5)
    {
      double mole_frac_NC_O2 = scratch[3][tid];
      rr_f_2 *= mole_frac_NC_O2;
      double mole_frac_NC_CH2O = scratch[12][tid];
      rr_r_2 *= mole_frac_NC_CH2O;
      double mole_frac_NC_O = scratch[2][tid];
      rr_f_3 *= mole_frac_NC_O;
      double mole_frac_NC_C5H10_1 = scratch[32][tid];
      rr_f_3 *= mole_frac_NC_C5H10_1;
      double mole_frac_NC_PC4H9 = scratch[28][tid];
      rr_r_3 *= mole_frac_NC_PC4H9;
    }
    else if (wid == 6)
    {
      double mole_frac_NC_CH3 = scratch[8][tid];
      rr_f_2 *= mole_frac_NC_CH3;
      double mole_frac_NC_C2H4 = scratch[14][tid];
      rr_f_2 *= mole_frac_NC_C2H4;
      double mole_frac_NC_CH4 = scratch[9][tid];
      rr_r_2 *= mole_frac_NC_CH4;
      double mole_frac_NC_O = scratch[2][tid];
      rr_f_3 *= mole_frac_NC_O;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_3 *= mole_frac_NC_H;
      double mole_frac_NC_CO2 = scratch[7][tid];
      rr_r_3 *= mole_frac_NC_CO2;
    }
    else if (wid == 7)
    {
      double mole_frac_NC_CH3CHO = scratch[21][tid];
      rr_f_2 *= mole_frac_NC_CH3CHO;
      double mole_frac_NC_CH3 = scratch[8][tid];
      rr_r_2 *= mole_frac_NC_CH3;
      double mole_frac_NC_O = scratch[2][tid];
      rr_f_3 *= mole_frac_NC_O;
      double mole_frac_NC_C2H4 = scratch[14][tid];
      rr_f_3 *= mole_frac_NC_C2H4;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_3 *= mole_frac_NC_H;
    }
    else if (wid == 8)
    {
      double mole_frac_NC_O2 = scratch[3][tid];
      rr_f_2 *= mole_frac_NC_O2;
      double mole_frac_NC_CH3CHO = scratch[21][tid];
      rr_f_2 *= mole_frac_NC_CH3CHO;
      double mole_frac_NC_HO2 = scratch[10][tid];
      rr_r_2 *= mole_frac_NC_HO2;
      double mole_frac_NC_C2H4 = scratch[14][tid];
      rr_f_3 *= mole_frac_NC_C2H4;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_3 *= mole_frac_NC_H;
      double mole_frac_NC_C4H6 = scratch[25][tid];
      rr_r_3 *= mole_frac_NC_C4H6;
    }
    else if (wid == 9)
    {
      double mole_frac_NC_OH = scratch[4][tid];
      rr_f_2 *= mole_frac_NC_OH;
      double mole_frac_NC_CH3CHO = scratch[21][tid];
      rr_f_2 *= mole_frac_NC_CH3CHO;
      double mole_frac_NC_H2O = scratch[5][tid];
      rr_r_2 *= mole_frac_NC_H2O;
      double mole_frac_NC_C5H11_1 = scratch[33][tid];
      rr_f_3 *= mole_frac_NC_C5H11_1;
      double mole_frac_NC_C2H4 = scratch[14][tid];
      rr_r_3 *= mole_frac_NC_C2H4;
    }
    else if (wid == 10)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_2 *= mole_frac_NC_H;
      double mole_frac_NC_CH3CHO = scratch[21][tid];
      rr_f_2 *= mole_frac_NC_CH3CHO;
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_r_2 *= mole_frac_NC_H2;
      double thb_0 = scratch[52][tid];
      rr_f_3 *= thb_0;
      double mole_frac_NC_CH3 = scratch[8][tid];
      rr_r_3 *= mole_frac_NC_CH3;
      double mole_frac_NC_CH2O = scratch[12][tid];
      rr_r_3 *= mole_frac_NC_CH2O;
      rr_r_3 *= thb_0;
    }
    else if (wid == 11)
    {
      double mole_frac_NC_O = scratch[2][tid];
      rr_f_2 *= mole_frac_NC_O;
      double mole_frac_NC_CH3CHO = scratch[21][tid];
      rr_f_2 *= mole_frac_NC_CH3CHO;
      double mole_frac_NC_OH = scratch[4][tid];
      rr_r_2 *= mole_frac_NC_OH;
      double mole_frac_NC_O2 = scratch[3][tid];
      rr_f_3 *= mole_frac_NC_O2;
      rr_r_3 *= mole_frac_NC_O;
    }
    else if (wid == 12)
    {
      double mole_frac_NC_HO2 = scratch[10][tid];
      rr_f_2 *= mole_frac_NC_HO2;
      double mole_frac_NC_CH3CHO = scratch[21][tid];
      rr_f_2 *= mole_frac_NC_CH3CHO;
      double mole_frac_NC_H2O2 = scratch[11][tid];
      rr_r_2 *= mole_frac_NC_H2O2;
      double mole_frac_NC_CH3O2H = scratch[35][tid];
      rr_f_3 *= mole_frac_NC_CH3O2H;
      double mole_frac_NC_OH = scratch[4][tid];
      rr_r_3 *= mole_frac_NC_OH;
    }
    else if (wid == 13)
    {
      double mole_frac_NC_CH3 = scratch[8][tid];
      rr_f_2 *= mole_frac_NC_CH3;
      double mole_frac_NC_CH3CHO = scratch[21][tid];
      rr_f_2 *= mole_frac_NC_CH3CHO;
      double mole_frac_NC_CH4 = scratch[9][tid];
      rr_r_2 *= mole_frac_NC_CH4;
      double mole_frac_NC_O2 = scratch[3][tid];
      rr_f_3 *= mole_frac_NC_O2;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_3 *= mole_frac_NC_H;
      double mole_frac_NC_CO = scratch[6][tid];
      rr_r_3 *= mole_frac_NC_CO;
      double mole_frac_NC_HCCO = scratch[20][tid];
      rr_r_3 *= mole_frac_NC_HCCO;
    }
    else if (wid == 14)
    {
      double mole_frac_NC_C3H6 = scratch[24][tid];
      rr_f_2 *= mole_frac_NC_C3H6;
      double mole_frac_NC_CH3 = scratch[8][tid];
      rr_r_2 *= mole_frac_NC_CH3;
      double mole_frac_NC_CH2O = scratch[12][tid];
      rr_f_3 *= mole_frac_NC_CH2O;
      double mole_frac_NC_CH3O2 = scratch[34][tid];
      rr_f_3 *= mole_frac_NC_CH3O2;
      double mole_frac_NC_CH3O2H = scratch[35][tid];
      rr_r_3 *= mole_frac_NC_CH3O2H;
    }
    else if (wid == 15)
    {
      double mole_frac_NC_O = scratch[2][tid];
      rr_f_2 *= mole_frac_NC_O;
      double mole_frac_NC_C3H6 = scratch[24][tid];
      rr_f_2 *= mole_frac_NC_C3H6;
      double mole_frac_NC_C2H5 = scratch[15][tid];
      rr_r_2 *= mole_frac_NC_C2H5;
      double mole_frac_NC_C2H4 = scratch[14][tid];
      rr_f_3 *= mole_frac_NC_C2H4;
      double mole_frac_NC_CH3O2 = scratch[34][tid];
      rr_f_3 *= mole_frac_NC_CH3O2;
      double mole_frac_NC_CH3O2H = scratch[35][tid];
      rr_r_3 *= mole_frac_NC_CH3O2H;
    }
    else if (wid == 16)
    {
      double mole_frac_NC_C4H6 = scratch[25][tid];
      rr_f_2 *= mole_frac_NC_C4H6;
      rr_r_2 = 0.0;
      double mole_frac_NC_HO2 = scratch[10][tid];
      rr_f_3 *= mole_frac_NC_HO2;
      double mole_frac_NC_C2H5 = scratch[15][tid];
      rr_f_3 *= mole_frac_NC_C2H5;
      double mole_frac_NC_OH = scratch[4][tid];
      rr_r_3 *= mole_frac_NC_OH;
    }
    else if (wid == 17)
    {
      double mole_frac_NC_OH = scratch[4][tid];
      rr_f_2 *= mole_frac_NC_OH;
      double mole_frac_NC_C4H6 = scratch[25][tid];
      rr_f_2 *= mole_frac_NC_C4H6;
      double mole_frac_NC_CH3CHO = scratch[21][tid];
      rr_r_2 *= mole_frac_NC_CH3CHO;
      double mole_frac_NC_CH3 = scratch[8][tid];
      rr_f_3 *= mole_frac_NC_CH3;
      double mole_frac_NC_CH3O2 = scratch[34][tid];
      rr_f_3 *= mole_frac_NC_CH3O2;
      rr_r_3 = 0.0;
    }
    else if (wid == 18)
    {
      double mole_frac_NC_O2 = scratch[3][tid];
      rr_f_2 *= mole_frac_NC_O2;
      double mole_frac_NC_C2H4 = scratch[14][tid];
      rr_f_2 *= mole_frac_NC_C2H4;
      double mole_frac_NC_HO2 = scratch[10][tid];
      rr_r_2 *= mole_frac_NC_HO2;
      double mole_frac_NC_C2H5 = scratch[15][tid];
      rr_f_3 *= mole_frac_NC_C2H5;
      double mole_frac_NC_CH3O2 = scratch[34][tid];
      rr_f_3 *= mole_frac_NC_CH3O2;
      rr_r_3 = 0.0;
    }
    else if (wid == 19)
    {
      double mole_frac_NC_CH3 = scratch[8][tid];
      rr_r_2 *= mole_frac_NC_CH3;
      double mole_frac_NC_C2H4 = scratch[14][tid];
      rr_r_2 *= mole_frac_NC_C2H4;
      double mole_frac_NC_CH3O2 = scratch[34][tid];
      rr_f_3 *= mole_frac_NC_CH3O2;
      rr_f_3 *= mole_frac_NC_CH3O2;
      rr_r_3 = 0.0;
    }
    scratch[wid+77][tid] = rr_f_2;
    scratch[wid+97][tid] = rr_r_2;
    scratch[wid+117][tid] = rr_f_3;
    scratch[wid+137][tid] = rr_r_3;
    asm volatile("bar.sync 0, 640;" : : : "memory");
    if (wid == 0)
    {
      double rate_84 = scratch[84][tid];
      avals[0] += rate_84;
      double rate_92 = scratch[92][tid];
      avals[0] += rate_92;
      double rate_121 = scratch[121][tid];
      avals[0] += rate_121;
      double rate_122 = scratch[122][tid];
      avals[0] += rate_122;
      double rate_131 = scratch[131][tid];
      avals[0] += rate_131;
      double rate_143 = scratch[143][tid];
      avals[0] += rate_143;
      double rate_79 = scratch[79][tid];
      avals[1] += rate_79;
      double rate_82 = scratch[82][tid];
      avals[2] += rate_82;
      double rate_123 = scratch[123][tid];
      denoms[0] += rate_123;
      double rate_99 = scratch[99][tid];
      denoms[0] += rate_99;
      double rate_102 = scratch[102][tid];
      denoms[0] += rate_102;
      double rate_104 = scratch[104][tid];
      denoms[0] += rate_104;
      double rate_112 = scratch[112][tid];
      denoms[0] += rate_112;
      double rate_141 = scratch[141][tid];
      denoms[0] += rate_141;
      double rate_142 = scratch[142][tid];
      denoms[0] += rate_142;
      double rate_151 = scratch[151][tid];
      denoms[0] += rate_151;
    }
    else if (wid == 1)
    {
      double rate_78 = scratch[78][tid];
      avals[0] = __fma_rn(2.0, rate_78, avals[0]);
      double rate_81 = scratch[81][tid];
      avals[0] += rate_81;
      double rate_129 = scratch[129][tid];
      avals[0] += rate_129;
      double rate_134 = scratch[134][tid];
      avals[0] = __fma_rn(2.0, rate_134, avals[0]);
      double rate_135 = scratch[135][tid];
      avals[0] += rate_135;
      double rate_136 = scratch[136][tid];
      avals[0] = __fma_rn(2.0, rate_136, avals[0]);
      double rate_99 = scratch[99][tid];
      avals[1] += rate_99;
      double rate_79 = scratch[79][tid];
      denoms[0] += rate_79;
      double rate_101 = scratch[101][tid];
      denoms[0] += rate_101;
      double rate_149 = scratch[149][tid];
      denoms[0] += rate_149;
    }
    else if (wid == 2)
    {
      double rate_83 = scratch[83][tid];
      avals[0] += rate_83;
      double rate_91 = scratch[91][tid];
      avals[0] += rate_91;
      double rate_93 = scratch[93][tid];
      avals[0] = __fma_rn(2.0, rate_93, avals[0]);
      double rate_94 = scratch[94][tid];
      avals[0] += rate_94;
      double rate_95 = scratch[95][tid];
      avals[0] += rate_95;
      double rate_119 = scratch[119][tid];
      avals[0] += rate_119;
      double rate_120 = scratch[120][tid];
      avals[0] += rate_120;
      double rate_132 = scratch[132][tid];
      avals[0] += rate_132;
      double rate_97 = scratch[97][tid];
      avals[0] += rate_97;
      double rate_100 = scratch[100][tid];
      avals[0] += rate_100;
      double rate_145 = scratch[145][tid];
      avals[0] += rate_145;
      double rate_102 = scratch[102][tid];
      avals[1] += rate_102;
      double rate_148 = scratch[148][tid];
      avals[2] += rate_148;
      double rate_77 = scratch[77][tid];
      denoms[0] += rate_77;
      double rate_80 = scratch[80][tid];
      denoms[0] += rate_80;
      double rate_82 = scratch[82][tid];
      denoms[0] += rate_82;
      double rate_125 = scratch[125][tid];
      denoms[0] += rate_125;
      double rate_128 = scratch[128][tid];
      denoms[0] += rate_128;
      double rate_103 = scratch[103][tid];
      denoms[0] += rate_103;
      double rate_111 = scratch[111][tid];
      denoms[0] += rate_111;
      double rate_114 = scratch[114][tid];
      denoms[0] += rate_114;
      double rate_115 = scratch[115][tid];
      denoms[0] += rate_115;
      double rate_139 = scratch[139][tid];
      denoms[0] += rate_139;
      double rate_140 = scratch[140][tid];
      denoms[0] += rate_140;
      double rate_152 = scratch[152][tid];
      denoms[0] += rate_152;
    }
    else if (wid == 3)
    {
      double rate_85 = scratch[85][tid];
      avals[0] += rate_85;
      double rate_86 = scratch[86][tid];
      avals[0] += rate_86;
      double rate_87 = scratch[87][tid];
      avals[0] += rate_87;
      double rate_88 = scratch[88][tid];
      avals[0] += rate_88;
      double rate_89 = scratch[89][tid];
      avals[0] += rate_89;
      double rate_90 = scratch[90][tid];
      avals[0] += rate_90;
      double rate_105 = scratch[105][tid];
      denoms[0] += rate_105;
      double rate_106 = scratch[106][tid];
      denoms[0] += rate_106;
      double rate_107 = scratch[107][tid];
      denoms[0] += rate_107;
      double rate_108 = scratch[108][tid];
      denoms[0] += rate_108;
      double rate_109 = scratch[109][tid];
      denoms[0] += rate_109;
      double rate_110 = scratch[110][tid];
      denoms[0] += rate_110;
    }
    else if (wid == 4)
    {
      double rate_124 = scratch[124][tid];
      avals[0] += rate_124;
      double rate_128 = scratch[128][tid];
      avals[1] += rate_128;
      double rate_144 = scratch[144][tid];
      denoms[0] += rate_144;
      double rate_148 = scratch[148][tid];
      denoms[0] += rate_148;
    }
    else if (wid == 5)
    {
      double rate_126 = scratch[126][tid];
      avals[0] += rate_126;
      double rate_116 = scratch[116][tid];
      avals[0] += rate_116;
      double rate_137 = scratch[137][tid];
      avals[0] += rate_137;
      double rate_138 = scratch[138][tid];
      avals[0] += rate_138;
      double rate_96 = scratch[96][tid];
      denoms[0] += rate_96;
      double rate_117 = scratch[117][tid];
      denoms[0] += rate_117;
      double rate_118 = scratch[118][tid];
      denoms[0] += rate_118;
      double rate_146 = scratch[146][tid];
      denoms[0] += rate_146;
    }
    else if (wid == 6)
    {
    }
    else if (wid == 7)
    {
    }
    else if (wid == 8)
    {
    }
    else if (wid == 9)
    {
    }
    else if (wid == 10)
    {
    }
    else if (wid == 11)
    {
    }
    else if (wid == 12)
    {
      double rate_133 = scratch[133][tid];
      avals[0] += rate_133;
      double rate_135 = scratch[135][tid];
      avals[0] += rate_135;
      double rate_147 = scratch[147][tid];
      avals[0] += rate_147;
      double rate_127 = scratch[127][tid];
      denoms[0] += rate_127;
      double rate_153 = scratch[153][tid];
      denoms[0] += rate_153;
    }
    else if (wid == 13)
    {
      double rate_150 = scratch[150][tid];
      avals[0] += rate_150;
      double rate_130 = scratch[130][tid];
      denoms[0] += rate_130;
    }
    else if (wid == 14)
    {
    }
    else if (wid == 15)
    {
    }
    else if (wid == 16)
    {
    }
    else if (wid == 17)
    {
    }
    else if (wid == 18)
    {
    }
    else if (wid == 19)
    {
    }
    asm volatile("bar.sync 0, 640;" : : : "memory");
    double rr_f_4 = rr_f_3,  rr_r_4 = rr_r_3;
    /* Chemistry for level 4 */
    {
      {
        if (tid == 24)
          real_mirror[wid] = real_constants[0];
        double arrhenius = real_mirror[wid] * vlntemp;
        if (tid == 25)
          real_mirror[wid] = real_constants[0];
        arrhenius = __fma_rn(real_mirror[wid],  ortc,  arrhenius);
        arrhenius = exp(arrhenius);
        if (tid == 26)
          real_mirror[wid] = real_constants[0];
        rr_f_4 = real_mirror[wid] * arrhenius;
      }
      {
        if (tid == 27)
          real_mirror[wid] = real_constants[0];
        double arrhenius = real_mirror[wid] * vlntemp;
        if (tid == 28)
          real_mirror[wid] = real_constants[0];
        arrhenius = __fma_rn(real_mirror[wid],  ortc,  arrhenius);
        arrhenius = exp(arrhenius);
        if (tid == 29)
          real_mirror[wid] = real_constants[0];
        rr_r_4 = real_mirror[wid] * arrhenius;
      }
    }
    double rr_f_5 = rr_f_4,  rr_r_5 = rr_r_4;
    /* Chemistry for level 5 */
    {
      {
        if (tid == 30)
          real_mirror[wid] = real_constants[0];
        double arrhenius = real_mirror[wid] * vlntemp;
        if (tid == 31)
          real_mirror[wid] = real_constants[0];
        arrhenius = __fma_rn(real_mirror[wid],  ortc,  arrhenius);
        arrhenius = exp(arrhenius);
        if (tid == 0)
          real_mirror[wid] = real_constants[1];
        rr_f_5 = real_mirror[wid] * arrhenius;
      }
      {
        if (tid == 1)
          real_mirror[wid] = real_constants[1];
        double arrhenius = real_mirror[wid] * vlntemp;
        if (tid == 2)
          real_mirror[wid] = real_constants[1];
        arrhenius = __fma_rn(real_mirror[wid],  ortc,  arrhenius);
        arrhenius = exp(arrhenius);
        if (tid == 3)
          real_mirror[wid] = real_constants[1];
        rr_r_5 = real_mirror[wid] * arrhenius;
      }
    }
    if (wid == 0)
    {
      double thb_0 = scratch[52][tid];
      rr_f_4 *= thb_0;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_4 *= mole_frac_NC_H;
      double mole_frac_NC_CH3CHO = scratch[21][tid];
      rr_r_4 *= mole_frac_NC_CH3CHO;
      rr_r_4 *= thb_0;
    }
    else if (wid == 1)
    {
      double mole_frac_NC_CH3CHO = scratch[21][tid];
      rr_f_4 *= mole_frac_NC_CH3CHO;
      double mole_frac_NC_CH3O2 = scratch[34][tid];
      rr_f_4 *= mole_frac_NC_CH3O2;
      double mole_frac_NC_CH3O2H = scratch[35][tid];
      rr_r_4 *= mole_frac_NC_CH3O2H;
    }
    else if (wid == 2)
    {
      double mole_frac_NC_C2H3CO = scratch[36][tid];
      rr_f_4 *= mole_frac_NC_C2H3CO;
      double mole_frac_NC_CO = scratch[6][tid];
      rr_r_4 *= mole_frac_NC_CO;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_5 *= mole_frac_NC_H;
      double mole_frac_NC_CH2CO = scratch[19][tid];
      rr_r_5 *= mole_frac_NC_CH2CO;
    }
    else if (wid == 3)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_4 *= mole_frac_NC_H;
      double mole_frac_NC_C2H3CHO = scratch[37][tid];
      rr_r_4 *= mole_frac_NC_C2H3CHO;
      double mole_frac_NC_O2 = scratch[3][tid];
      rr_f_5 *= mole_frac_NC_O2;
      double mole_frac_NC_OH = scratch[4][tid];
      rr_r_5 *= mole_frac_NC_OH;
      double mole_frac_NC_CO = scratch[6][tid];
      rr_r_5 *= mole_frac_NC_CO;
      double mole_frac_NC_CH2O = scratch[12][tid];
      rr_r_5 *= mole_frac_NC_CH2O;
    }
    else if (wid == 4)
    {
      double mole_frac_NC_CH2O = scratch[12][tid];
      rr_r_4 *= mole_frac_NC_CH2O;
      double mole_frac_NC_O2 = scratch[3][tid];
      rr_f_5 *= mole_frac_NC_O2;
      double mole_frac_NC_C3H5_A = scratch[38][tid];
      rr_f_5 *= mole_frac_NC_C3H5_A;
      rr_r_5 *= mole_frac_NC_CH2O;
    }
    else if (wid == 5)
    {
      double mole_frac_NC_O2 = scratch[3][tid];
      rr_f_4 *= mole_frac_NC_O2;
      double mole_frac_NC_HO2 = scratch[10][tid];
      rr_r_4 *= mole_frac_NC_HO2;
      double mole_frac_NC_C2H3CHO = scratch[37][tid];
      rr_r_4 *= mole_frac_NC_C2H3CHO;
      rr_f_5 *= mole_frac_NC_O2;
      double mole_frac_NC_HCCO = scratch[20][tid];
      rr_f_5 *= mole_frac_NC_HCCO;
      double mole_frac_NC_CO2 = scratch[7][tid];
      rr_r_5 *= mole_frac_NC_CO2;
    }
    else if (wid == 6)
    {
      double mole_frac_NC_HO2 = scratch[10][tid];
      rr_f_4 *= mole_frac_NC_HO2;
      double mole_frac_NC_C3H5_A = scratch[38][tid];
      rr_f_4 *= mole_frac_NC_C3H5_A;
      double mole_frac_NC_OH = scratch[4][tid];
      rr_r_4 *= mole_frac_NC_OH;
      rr_f_5 *= mole_frac_NC_OH;
      double mole_frac_NC_CH2CO = scratch[19][tid];
      rr_f_5 *= mole_frac_NC_CH2CO;
      double mole_frac_NC_CO = scratch[6][tid];
      rr_r_5 *= mole_frac_NC_CO;
    }
    else if (wid == 7)
    {
      double mole_frac_NC_CH3O2 = scratch[34][tid];
      rr_f_4 *= mole_frac_NC_CH3O2;
      double mole_frac_NC_C3H5_A = scratch[38][tid];
      rr_f_4 *= mole_frac_NC_C3H5_A;
      rr_r_4 = 0.0;
      double mole_frac_NC_O2 = scratch[3][tid];
      rr_f_5 *= mole_frac_NC_O2;
      double mole_frac_NC_NC3H7CHO = scratch[40][tid];
      rr_f_5 *= mole_frac_NC_NC3H7CHO;
      double mole_frac_NC_HO2 = scratch[10][tid];
      rr_r_5 *= mole_frac_NC_HO2;
    }
    else if (wid == 8)
    {
      double mole_frac_NC_OH = scratch[4][tid];
      rr_f_4 *= mole_frac_NC_OH;
      double mole_frac_NC_CH3 = scratch[8][tid];
      rr_f_4 *= mole_frac_NC_CH3;
      double mole_frac_NC_H2O = scratch[5][tid];
      rr_r_4 *= mole_frac_NC_H2O;
      rr_f_5 *= mole_frac_NC_OH;
      double mole_frac_NC_NC3H7CHO = scratch[40][tid];
      rr_f_5 *= mole_frac_NC_NC3H7CHO;
      rr_r_5 *= mole_frac_NC_H2O;
    }
    else if (wid == 9)
    {
      double mole_frac_NC_O2 = scratch[3][tid];
      rr_f_4 *= mole_frac_NC_O2;
      double mole_frac_NC_CH3OH = scratch[18][tid];
      rr_f_4 *= mole_frac_NC_CH3OH;
      double mole_frac_NC_HO2 = scratch[10][tid];
      rr_r_4 *= mole_frac_NC_HO2;
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_5 *= mole_frac_NC_H;
      double mole_frac_NC_NC3H7CHO = scratch[40][tid];
      rr_f_5 *= mole_frac_NC_NC3H7CHO;
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_r_5 *= mole_frac_NC_H2;
    }
    else if (wid == 10)
    {
      double mole_frac_NC_CH3CHO = scratch[21][tid];
      rr_r_4 *= mole_frac_NC_CH3CHO;
      double mole_frac_NC_O = scratch[2][tid];
      rr_f_5 *= mole_frac_NC_O;
      double mole_frac_NC_NC3H7CHO = scratch[40][tid];
      rr_f_5 *= mole_frac_NC_NC3H7CHO;
      double mole_frac_NC_OH = scratch[4][tid];
      rr_r_5 *= mole_frac_NC_OH;
    }
    else if (wid == 11)
    {
      double mole_frac_NC_CH3 = scratch[8][tid];
      rr_r_4 *= mole_frac_NC_CH3;
      double mole_frac_NC_C2H3CHO = scratch[37][tid];
      rr_r_4 *= mole_frac_NC_C2H3CHO;
      double mole_frac_NC_HO2 = scratch[10][tid];
      rr_f_5 *= mole_frac_NC_HO2;
      double mole_frac_NC_NC3H7CHO = scratch[40][tid];
      rr_f_5 *= mole_frac_NC_NC3H7CHO;
      double mole_frac_NC_H2O2 = scratch[11][tid];
      rr_r_5 *= mole_frac_NC_H2O2;
    }
    else if (wid == 12)
    {
      double mole_frac_NC_HO2 = scratch[10][tid];
      rr_f_4 *= mole_frac_NC_HO2;
      double mole_frac_NC_C4H7 = scratch[26][tid];
      rr_f_4 *= mole_frac_NC_C4H7;
      double mole_frac_NC_OH = scratch[4][tid];
      rr_r_4 *= mole_frac_NC_OH;
      double mole_frac_NC_CH3 = scratch[8][tid];
      rr_f_5 *= mole_frac_NC_CH3;
      double mole_frac_NC_NC3H7CHO = scratch[40][tid];
      rr_f_5 *= mole_frac_NC_NC3H7CHO;
      double mole_frac_NC_CH4 = scratch[9][tid];
      rr_r_5 *= mole_frac_NC_CH4;
    }
    else if (wid == 13)
    {
      double mole_frac_NC_C4H7 = scratch[26][tid];
      rr_f_4 *= mole_frac_NC_C4H7;
      double mole_frac_NC_CH3O2 = scratch[34][tid];
      rr_f_4 *= mole_frac_NC_CH3O2;
      rr_r_4 = 0.0;
      double mole_frac_NC_NC3H7CHO = scratch[40][tid];
      rr_f_5 *= mole_frac_NC_NC3H7CHO;
      double mole_frac_NC_CH3OH = scratch[18][tid];
      rr_r_5 *= mole_frac_NC_CH3OH;
    }
    else if (wid == 14)
    {
      double mole_frac_NC_OH = scratch[4][tid];
      rr_f_4 *= mole_frac_NC_OH;
      double mole_frac_NC_C4H8_1 = scratch[27][tid];
      rr_f_4 *= mole_frac_NC_C4H8_1;
      double mole_frac_NC_CH2O = scratch[12][tid];
      rr_r_4 *= mole_frac_NC_CH2O;
      double mole_frac_NC_CH3O2 = scratch[34][tid];
      rr_f_5 *= mole_frac_NC_CH3O2;
      double mole_frac_NC_NC3H7CHO = scratch[40][tid];
      rr_f_5 *= mole_frac_NC_NC3H7CHO;
      double mole_frac_NC_CH3O2H = scratch[35][tid];
      rr_r_5 *= mole_frac_NC_CH3O2H;
    }
    else if (wid == 15)
    {
      double mole_frac_NC_O = scratch[2][tid];
      rr_f_4 *= mole_frac_NC_O;
      double mole_frac_NC_C4H8_1 = scratch[27][tid];
      rr_f_4 *= mole_frac_NC_C4H8_1;
      double mole_frac_NC_C2H5 = scratch[15][tid];
      rr_r_4 *= mole_frac_NC_C2H5;
      double mole_frac_NC_CO = scratch[6][tid];
      rr_r_5 *= mole_frac_NC_CO;
    }
    else if (wid == 16)
    {
      double mole_frac_NC_OH = scratch[4][tid];
      rr_f_4 *= mole_frac_NC_OH;
      double mole_frac_NC_C4H8_1 = scratch[27][tid];
      rr_f_4 *= mole_frac_NC_C4H8_1;
      double mole_frac_NC_C2H6 = scratch[13][tid];
      rr_r_4 *= mole_frac_NC_C2H6;
      double mole_frac_NC_NC3H7COCH2 = scratch[44][tid];
      rr_f_5 *= mole_frac_NC_NC3H7COCH2;
      double mole_frac_NC_CH2CO = scratch[19][tid];
      rr_r_5 *= mole_frac_NC_CH2CO;
    }
    else if (wid == 17)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_4 *= mole_frac_NC_H;
      double mole_frac_NC_C3H3 = scratch[39][tid];
      rr_f_4 *= mole_frac_NC_C3H3;
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_r_4 *= mole_frac_NC_H2;
      double mole_frac_NC_CH4 = scratch[9][tid];
      rr_f_5 *= mole_frac_NC_CH4;
      double mole_frac_NC_CH3 = scratch[8][tid];
      rr_r_5 *= mole_frac_NC_CH3;
      rr_r_5 *= mole_frac_NC_CH3;
    }
    else if (wid == 18)
    {
      double mole_frac_NC_OH = scratch[4][tid];
      rr_f_4 *= mole_frac_NC_OH;
      double mole_frac_NC_C3H3 = scratch[39][tid];
      rr_f_4 *= mole_frac_NC_C3H3;
      double mole_frac_NC_H2O = scratch[5][tid];
      rr_r_4 *= mole_frac_NC_H2O;
      double mole_frac_NC_C2H6 = scratch[13][tid];
      rr_f_5 *= mole_frac_NC_C2H6;
      double mole_frac_NC_CH3 = scratch[8][tid];
      rr_r_5 *= mole_frac_NC_CH3;
      double mole_frac_NC_C2H5 = scratch[15][tid];
      rr_r_5 *= mole_frac_NC_C2H5;
    }
    else if (wid == 19)
    {
      double mole_frac_NC_O2 = scratch[3][tid];
      rr_f_4 *= mole_frac_NC_O2;
      double mole_frac_NC_C3H3 = scratch[39][tid];
      rr_f_4 *= mole_frac_NC_C3H3;
      double mole_frac_NC_CH2CO = scratch[19][tid];
      rr_r_4 *= mole_frac_NC_CH2CO;
      rr_f_5 *= mole_frac_NC_O2;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_5 *= mole_frac_NC_H;
      double mole_frac_NC_OH = scratch[4][tid];
      rr_r_5 *= mole_frac_NC_OH;
      double mole_frac_NC_CO = scratch[6][tid];
      rr_r_5 *= mole_frac_NC_CO;
    }
    scratch[wid+77][tid] = rr_f_4;
    scratch[wid+97][tid] = rr_r_4;
    scratch[wid+117][tid] = rr_f_5;
    scratch[wid+137][tid] = rr_r_5;
    asm volatile("bar.sync 0, 640;" : : : "memory");
    if (wid == 0)
    {
      double rate_96 = scratch[96][tid];
      avals[0] += rate_96;
      double rate_122 = scratch[122][tid];
      avals[0] += rate_122;
      double rate_116 = scratch[116][tid];
      denoms[0] += rate_116;
      double rate_142 = scratch[142][tid];
      denoms[0] += rate_142;
    }
    else if (wid == 1)
    {
      double rate_84 = scratch[84][tid];
      avals[0] += rate_84;
      double rate_90 = scratch[90][tid];
      avals[0] += rate_90;
      double rate_150 = scratch[150][tid];
      avals[2] += rate_150;
      double rate_130 = scratch[130][tid];
      denoms[0] += rate_130;
    }
    else if (wid == 2)
    {
      double rate_79 = scratch[79][tid];
      avals[0] += rate_79;
      double rate_81 = scratch[81][tid];
      avals[3] += rate_81;
      double rate_87 = scratch[87][tid];
      avals[4] += rate_87;
      double rate_99 = scratch[99][tid];
      denoms[0] += rate_99;
      double rate_101 = scratch[101][tid];
      denoms[0] += rate_101;
      double rate_107 = scratch[107][tid];
      denoms[0] += rate_107;
    }
    else if (wid == 3)
    {
      double rate_78 = scratch[78][tid];
      avals[0] += rate_78;
      double rate_92 = scratch[92][tid];
      avals[0] += rate_92;
      double rate_93 = scratch[93][tid];
      avals[0] += rate_93;
      double rate_117 = scratch[117][tid];
      avals[1] += rate_117;
      double rate_98 = scratch[98][tid];
      denoms[0] += rate_98;
      double rate_112 = scratch[112][tid];
      denoms[0] += rate_112;
      double rate_113 = scratch[113][tid];
      denoms[0] += rate_113;
      double rate_137 = scratch[137][tid];
      denoms[0] += rate_137;
    }
    else if (wid == 4)
    {
      double rate_121 = scratch[121][tid];
      avals[0] += rate_121;
      double rate_139 = scratch[139][tid];
      avals[0] += rate_139;
      double rate_140 = scratch[140][tid];
      avals[0] += rate_140;
      double rate_118 = scratch[118][tid];
      avals[2] += rate_118;
      double rate_119 = scratch[119][tid];
      denoms[0] += rate_119;
      double rate_120 = scratch[120][tid];
      denoms[0] += rate_120;
      double rate_138 = scratch[138][tid];
      denoms[0] += rate_138;
      double rate_141 = scratch[141][tid];
      denoms[0] += rate_141;
    }
    else if (wid == 5)
    {
      double rate_91 = scratch[91][tid];
      avals[0] += rate_91;
      double rate_133 = scratch[133][tid];
      avals[0] += rate_133;
      double rate_132 = scratch[132][tid];
      avals[1] += rate_132;
      double rate_111 = scratch[111][tid];
      denoms[0] += rate_111;
      double rate_152 = scratch[152][tid];
      denoms[0] += rate_152;
      double rate_153 = scratch[153][tid];
      denoms[0] += rate_153;
    }
    else if (wid == 6)
    {
      double rate_137 = scratch[137][tid];
      avals[1] += rate_137;
      double rate_138 = scratch[138][tid];
      avals[2] += rate_138;
      double rate_117 = scratch[117][tid];
      denoms[0] += rate_117;
      double rate_118 = scratch[118][tid];
      denoms[0] += rate_118;
    }
    else if (wid == 7)
    {
      double rate_83 = scratch[83][tid];
      avals[0] += rate_83;
      double rate_84 = scratch[84][tid];
      avals[0] += rate_84;
      double rate_100 = scratch[100][tid];
      avals[0] += rate_100;
      double rate_102 = scratch[102][tid];
      avals[0] += rate_102;
      double rate_101 = scratch[101][tid];
      avals[1] += rate_101;
      double rate_80 = scratch[80][tid];
      denoms[0] += rate_80;
      double rate_81 = scratch[81][tid];
      denoms[0] += rate_81;
      double rate_82 = scratch[82][tid];
      denoms[0] += rate_82;
      double rate_103 = scratch[103][tid];
      denoms[0] += rate_103;
    }
    else if (wid == 8)
    {
      double rate_89 = scratch[89][tid];
      avals[0] += rate_89;
      double rate_90 = scratch[90][tid];
      avals[0] += rate_90;
      double rate_108 = scratch[108][tid];
      avals[0] += rate_108;
      double rate_107 = scratch[107][tid];
      avals[1] += rate_107;
      double rate_87 = scratch[87][tid];
      denoms[0] += rate_87;
      double rate_88 = scratch[88][tid];
      denoms[0] += rate_88;
      double rate_109 = scratch[109][tid];
      denoms[0] += rate_109;
    }
    else if (wid == 9)
    {
      double rate_124 = scratch[124][tid];
      avals[0] += rate_124;
      double rate_125 = scratch[125][tid];
      avals[0] += rate_125;
      double rate_126 = scratch[126][tid];
      avals[0] += rate_126;
      double rate_127 = scratch[127][tid];
      avals[0] += rate_127;
      double rate_128 = scratch[128][tid];
      avals[0] += rate_128;
      double rate_129 = scratch[129][tid];
      avals[0] += rate_129;
      double rate_131 = scratch[131][tid];
      avals[0] += rate_131;
      double rate_130 = scratch[130][tid];
      avals[1] += rate_130;
      double rate_152 = scratch[152][tid];
      avals[2] += rate_152;
      double rate_132 = scratch[132][tid];
      denoms[0] += rate_132;
      double rate_144 = scratch[144][tid];
      denoms[0] += rate_144;
      double rate_145 = scratch[145][tid];
      denoms[0] += rate_145;
      double rate_146 = scratch[146][tid];
      denoms[0] += rate_146;
      double rate_147 = scratch[147][tid];
      denoms[0] += rate_147;
      double rate_148 = scratch[148][tid];
      denoms[0] += rate_148;
      double rate_149 = scratch[149][tid];
      denoms[0] += rate_149;
      double rate_150 = scratch[150][tid];
      denoms[0] += rate_150;
      double rate_151 = scratch[151][tid];
      denoms[0] += rate_151;
    }
    else if (wid == 10)
    {
    }
    else if (wid == 11)
    {
      double rate_86 = scratch[86][tid];
      avals[0] += rate_86;
      double rate_123 = scratch[123][tid];
      avals[0] += rate_123;
      double rate_106 = scratch[106][tid];
      denoms[0] += rate_106;
      double rate_143 = scratch[143][tid];
      denoms[0] += rate_143;
    }
    else if (wid == 12)
    {
      double rate_97 = scratch[97][tid];
      avals[0] += rate_97;
      double rate_77 = scratch[77][tid];
      denoms[0] += rate_77;
    }
    else if (wid == 13)
    {
      double rate_94 = scratch[94][tid];
      avals[0] += rate_94;
      double rate_95 = scratch[95][tid];
      avals[0] += rate_95;
      double rate_114 = scratch[114][tid];
      denoms[0] += rate_114;
      double rate_115 = scratch[115][tid];
      denoms[0] += rate_115;
    }
    else if (wid == 14)
    {
      double rate_85 = scratch[85][tid];
      avals[0] += rate_85;
      double rate_154 = scratch[154][tid];
      avals[0] += rate_154;
      double rate_155 = scratch[155][tid];
      avals[0] += rate_155;
      double rate_156 = scratch[156][tid];
      avals[0] += rate_156;
      double rate_134 = scratch[134][tid];
      denoms[0] += rate_134;
      double rate_135 = scratch[135][tid];
      denoms[0] += rate_135;
      double rate_136 = scratch[136][tid];
      denoms[0] += rate_136;
      double rate_105 = scratch[105][tid];
      denoms[0] += rate_105;
    }
    else if (wid == 15)
    {
    }
    else if (wid == 16)
    {
    }
    else if (wid == 17)
    {
    }
    else if (wid == 18)
    {
    }
    else if (wid == 19)
    {
    }
    asm volatile("bar.sync 0, 640;" : : : "memory");
    double rr_f_6 = rr_f_5,  rr_r_6 = rr_r_5;
    /* Chemistry for level 6 */
    {
      {
        if (tid == 4)
          real_mirror[wid] = real_constants[1];
        double arrhenius = real_mirror[wid] * vlntemp;
        if (tid == 5)
          real_mirror[wid] = real_constants[1];
        arrhenius = __fma_rn(real_mirror[wid],  ortc,  arrhenius);
        arrhenius = exp(arrhenius);
        if (tid == 6)
          real_mirror[wid] = real_constants[1];
        rr_f_6 = real_mirror[wid] * arrhenius;
      }
      {
        if (tid == 7)
          real_mirror[wid] = real_constants[1];
        double arrhenius = real_mirror[wid] * vlntemp;
        if (tid == 8)
          real_mirror[wid] = real_constants[1];
        arrhenius = __fma_rn(real_mirror[wid],  ortc,  arrhenius);
        arrhenius = exp(arrhenius);
        if (tid == 9)
          real_mirror[wid] = real_constants[1];
        rr_r_6 = real_mirror[wid] * arrhenius;
      }
    }
    double rr_f_7 = rr_f_6,  rr_r_7 = rr_r_6;
    /* Chemistry for level 7 */
    {
      {
        if (tid == 10)
          real_mirror[wid] = real_constants[1];
        double arrhenius = real_mirror[wid] * vlntemp;
        if (tid == 11)
          real_mirror[wid] = real_constants[1];
        arrhenius = __fma_rn(real_mirror[wid],  ortc,  arrhenius);
        arrhenius = exp(arrhenius);
        if (tid == 12)
          real_mirror[wid] = real_constants[1];
        rr_f_7 = real_mirror[wid] * arrhenius;
      }
      {
        if (tid == 13)
          real_mirror[wid] = real_constants[1];
        double arrhenius = real_mirror[wid] * vlntemp;
        if (tid == 14)
          real_mirror[wid] = real_constants[1];
        arrhenius = __fma_rn(real_mirror[wid],  ortc,  arrhenius);
        arrhenius = exp(arrhenius);
        if (tid == 15)
          real_mirror[wid] = real_constants[1];
        rr_r_7 = real_mirror[wid] * arrhenius;
      }
    }
    if (wid == 0)
    {
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_f_6 *= mole_frac_NC_H2;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_6 *= mole_frac_NC_H;
      double mole_frac_NC_CH3 = scratch[8][tid];
      rr_r_6 *= mole_frac_NC_CH3;
    }
    else if (wid == 1)
    {
      double mole_frac_NC_CO2 = scratch[7][tid];
      rr_f_6 *= mole_frac_NC_CO2;
      double mole_frac_NC_CO = scratch[6][tid];
      rr_r_6 *= mole_frac_NC_CO;
      double mole_frac_NC_CH2O = scratch[12][tid];
      rr_r_6 *= mole_frac_NC_CH2O;
    }
    else if (wid == 2)
    {
      double mole_frac_NC_NC7H16 = scratch[45][tid];
      rr_f_6 *= mole_frac_NC_NC7H16;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_6 *= mole_frac_NC_H;
    }
    else if (wid == 3)
    {
      double mole_frac_NC_NC7H16 = scratch[45][tid];
      rr_f_6 *= mole_frac_NC_NC7H16;
      double mole_frac_NC_PC4H9 = scratch[28][tid];
      rr_r_6 *= mole_frac_NC_PC4H9;
    }
    else if (wid == 4)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_6 *= mole_frac_NC_H;
      double mole_frac_NC_NC7H16 = scratch[45][tid];
      rr_f_6 *= mole_frac_NC_NC7H16;
      double mole_frac_NC_C7H14OOHO2 = scratch[48][tid];
      rr_f_7 *= mole_frac_NC_C7H14OOHO2;
      double mole_frac_NC_O2 = scratch[3][tid];
      rr_r_7 *= mole_frac_NC_O2;
    }
    else if (wid == 5)
    {
      double mole_frac_NC_O = scratch[2][tid];
      rr_f_6 *= mole_frac_NC_O;
      double mole_frac_NC_NC7H16 = scratch[45][tid];
      rr_f_6 *= mole_frac_NC_NC7H16;
      double mole_frac_NC_OH = scratch[4][tid];
      rr_f_7 *= mole_frac_NC_OH;
      double mole_frac_NC_C7H14O = scratch[49][tid];
      rr_f_7 *= mole_frac_NC_C7H14O;
      double mole_frac_NC_H2O = scratch[5][tid];
      rr_r_7 *= mole_frac_NC_H2O;
      double mole_frac_NC_C5H10_1 = scratch[32][tid];
      rr_r_7 *= mole_frac_NC_C5H10_1;
    }
    else if (wid == 6)
    {
      double mole_frac_NC_OH = scratch[4][tid];
      rr_f_6 *= mole_frac_NC_OH;
      double mole_frac_NC_NC7H16 = scratch[45][tid];
      rr_f_6 *= mole_frac_NC_NC7H16;
      rr_f_7 *= mole_frac_NC_OH;
      double mole_frac_NC_C7H14O = scratch[49][tid];
      rr_f_7 *= mole_frac_NC_C7H14O;
      double mole_frac_NC_H2O = scratch[5][tid];
      rr_r_7 *= mole_frac_NC_H2O;
      double mole_frac_NC_C3H6 = scratch[24][tid];
      rr_r_7 *= mole_frac_NC_C3H6;
    }
    else if (wid == 7)
    {
      double mole_frac_NC_HO2 = scratch[10][tid];
      rr_f_6 *= mole_frac_NC_HO2;
      double mole_frac_NC_NC7H16 = scratch[45][tid];
      rr_f_6 *= mole_frac_NC_NC7H16;
      double mole_frac_NC_H2O2 = scratch[11][tid];
      rr_r_6 *= mole_frac_NC_H2O2;
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_7 *= mole_frac_NC_H;
      double mole_frac_NC_CH4 = scratch[9][tid];
      rr_f_7 *= mole_frac_NC_CH4;
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_r_7 *= mole_frac_NC_H2;
      double mole_frac_NC_CH3 = scratch[8][tid];
      rr_r_7 *= mole_frac_NC_CH3;
    }
    else if (wid == 8)
    {
      double mole_frac_NC_CH3 = scratch[8][tid];
      rr_f_6 *= mole_frac_NC_CH3;
      double mole_frac_NC_NC7H16 = scratch[45][tid];
      rr_f_6 *= mole_frac_NC_NC7H16;
      double mole_frac_NC_OH = scratch[4][tid];
      rr_f_7 *= mole_frac_NC_OH;
      double mole_frac_NC_CH4 = scratch[9][tid];
      rr_f_7 *= mole_frac_NC_CH4;
      double mole_frac_NC_H2O = scratch[5][tid];
      rr_r_7 *= mole_frac_NC_H2O;
      rr_r_7 *= mole_frac_NC_CH3;
    }
    else if (wid == 9)
    {
      double mole_frac_NC_O2 = scratch[3][tid];
      rr_f_6 *= mole_frac_NC_O2;
      double mole_frac_NC_NC7H16 = scratch[45][tid];
      rr_f_6 *= mole_frac_NC_NC7H16;
      double mole_frac_NC_HO2 = scratch[10][tid];
      rr_r_6 *= mole_frac_NC_HO2;
      double mole_frac_NC_O = scratch[2][tid];
      rr_f_7 *= mole_frac_NC_O;
      double mole_frac_NC_CH4 = scratch[9][tid];
      rr_f_7 *= mole_frac_NC_CH4;
      double mole_frac_NC_OH = scratch[4][tid];
      rr_r_7 *= mole_frac_NC_OH;
      double mole_frac_NC_CH3 = scratch[8][tid];
      rr_r_7 *= mole_frac_NC_CH3;
    }
    else if (wid == 10)
    {
      double mole_frac_NC_C2H5 = scratch[15][tid];
      rr_f_6 *= mole_frac_NC_C2H5;
      double mole_frac_NC_NC7H16 = scratch[45][tid];
      rr_f_6 *= mole_frac_NC_NC7H16;
      double mole_frac_NC_C2H6 = scratch[13][tid];
      rr_r_6 *= mole_frac_NC_C2H6;
      double mole_frac_NC_OH = scratch[4][tid];
      rr_f_7 *= mole_frac_NC_OH;
      double mole_frac_NC_CO = scratch[6][tid];
      rr_f_7 *= mole_frac_NC_CO;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_7 *= mole_frac_NC_H;
      double mole_frac_NC_CO2 = scratch[7][tid];
      rr_r_7 *= mole_frac_NC_CO2;
    }
    else if (wid == 11)
    {
      double mole_frac_NC_NC7H16 = scratch[45][tid];
      rr_f_6 *= mole_frac_NC_NC7H16;
      double mole_frac_NC_CH3OH = scratch[18][tid];
      rr_r_6 *= mole_frac_NC_CH3OH;
      double mole_frac_NC_C7H15_1 = scratch[46][tid];
      rr_r_6 *= mole_frac_NC_C7H15_1;
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_7 *= mole_frac_NC_H;
      double mole_frac_NC_O2 = scratch[3][tid];
      rr_f_7 *= mole_frac_NC_O2;
      double mole_frac_NC_O = scratch[2][tid];
      rr_r_7 *= mole_frac_NC_O;
      double mole_frac_NC_OH = scratch[4][tid];
      rr_r_7 *= mole_frac_NC_OH;
    }
    else if (wid == 12)
    {
      double mole_frac_NC_NC7H16 = scratch[45][tid];
      rr_f_6 *= mole_frac_NC_NC7H16;
      double mole_frac_NC_CH3OH = scratch[18][tid];
      rr_r_6 *= mole_frac_NC_CH3OH;
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_f_7 *= mole_frac_NC_H2;
      double mole_frac_NC_O = scratch[2][tid];
      rr_f_7 *= mole_frac_NC_O;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_7 *= mole_frac_NC_H;
      double mole_frac_NC_OH = scratch[4][tid];
      rr_r_7 *= mole_frac_NC_OH;
    }
    else if (wid == 13)
    {
      double mole_frac_NC_CH3O2 = scratch[34][tid];
      rr_f_6 *= mole_frac_NC_CH3O2;
      double mole_frac_NC_NC7H16 = scratch[45][tid];
      rr_f_6 *= mole_frac_NC_NC7H16;
      double mole_frac_NC_CH3O2H = scratch[35][tid];
      rr_r_6 *= mole_frac_NC_CH3O2H;
      double mole_frac_NC_O = scratch[2][tid];
      rr_f_7 *= mole_frac_NC_O;
      double mole_frac_NC_H2O = scratch[5][tid];
      rr_f_7 *= mole_frac_NC_H2O;
      double mole_frac_NC_OH = scratch[4][tid];
      rr_r_7 *= mole_frac_NC_OH;
      rr_r_7 *= mole_frac_NC_OH;
    }
    else if (wid == 14)
    {
      double mole_frac_NC_C3H6 = scratch[24][tid];
      rr_r_6 *= mole_frac_NC_C3H6;
      double mole_frac_NC_PC4H9 = scratch[28][tid];
      rr_r_6 *= mole_frac_NC_PC4H9;
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_f_7 *= mole_frac_NC_H2;
      double mole_frac_NC_OH = scratch[4][tid];
      rr_f_7 *= mole_frac_NC_OH;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_7 *= mole_frac_NC_H;
      double mole_frac_NC_H2O = scratch[5][tid];
      rr_r_7 *= mole_frac_NC_H2O;
    }
    else if (wid == 15)
    {
      double mole_frac_NC_C4H8_1 = scratch[27][tid];
      rr_r_6 *= mole_frac_NC_C4H8_1;
      double mole_frac_NC_OH = scratch[4][tid];
      rr_f_7 *= mole_frac_NC_OH;
      double mole_frac_NC_H2O2 = scratch[11][tid];
      rr_f_7 *= mole_frac_NC_H2O2;
      double mole_frac_NC_H2O = scratch[5][tid];
      rr_r_7 *= mole_frac_NC_H2O;
      double mole_frac_NC_HO2 = scratch[10][tid];
      rr_r_7 *= mole_frac_NC_HO2;
    }
    else if (wid == 16)
    {
      double mole_frac_NC_C2H5 = scratch[15][tid];
      rr_r_6 *= mole_frac_NC_C2H5;
      double mole_frac_NC_C5H10_1 = scratch[32][tid];
      rr_r_6 *= mole_frac_NC_C5H10_1;
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_7 *= mole_frac_NC_H;
      double mole_frac_NC_C2H6 = scratch[13][tid];
      rr_f_7 *= mole_frac_NC_C2H6;
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_r_7 *= mole_frac_NC_H2;
      rr_r_7 *= mole_frac_NC_C2H5;
    }
    else if (wid == 17)
    {
      double mole_frac_NC_C7H15_1 = scratch[46][tid];
      rr_f_6 *= mole_frac_NC_C7H15_1;
      double mole_frac_NC_O2 = scratch[3][tid];
      rr_f_7 *= mole_frac_NC_O2;
      double mole_frac_NC_C2H5 = scratch[15][tid];
      rr_f_7 *= mole_frac_NC_C2H5;
      double mole_frac_NC_HO2 = scratch[10][tid];
      rr_r_7 *= mole_frac_NC_HO2;
      double mole_frac_NC_C2H4 = scratch[14][tid];
      rr_r_7 *= mole_frac_NC_C2H4;
    }
    else if (wid == 18)
    {
      double mole_frac_NC_C7H15O2 = scratch[47][tid];
      rr_f_6 *= mole_frac_NC_C7H15O2;
      double mole_frac_NC_O2 = scratch[3][tid];
      rr_r_6 *= mole_frac_NC_O2;
      double mole_frac_NC_OH = scratch[4][tid];
      rr_f_7 *= mole_frac_NC_OH;
      double mole_frac_NC_C2H6 = scratch[13][tid];
      rr_f_7 *= mole_frac_NC_C2H6;
      double mole_frac_NC_H2O = scratch[5][tid];
      rr_r_7 *= mole_frac_NC_H2O;
      double mole_frac_NC_C2H5 = scratch[15][tid];
      rr_r_7 *= mole_frac_NC_C2H5;
    }
    else if (wid == 19)
    {
      double mole_frac_NC_C7H15O2 = scratch[47][tid];
      rr_f_6 *= mole_frac_NC_C7H15O2;
      double mole_frac_NC_O = scratch[2][tid];
      rr_f_7 *= mole_frac_NC_O;
      double mole_frac_NC_C2H6 = scratch[13][tid];
      rr_f_7 *= mole_frac_NC_C2H6;
      double mole_frac_NC_OH = scratch[4][tid];
      rr_r_7 *= mole_frac_NC_OH;
      double mole_frac_NC_C2H5 = scratch[15][tid];
      rr_r_7 *= mole_frac_NC_C2H5;
    }
    scratch[wid+77][tid] = rr_f_6;
    scratch[wid+97][tid] = rr_r_6;
    scratch[wid+117][tid] = rr_f_7;
    scratch[wid+137][tid] = rr_r_7;
    asm volatile("bar.sync 0, 640;" : : : "memory");
    if (wid == 0)
    {
    }
    else if (wid == 1)
    {
      double rate_108 = scratch[108][tid];
      avals[0] += rate_108;
      double rate_109 = scratch[109][tid];
      avals[3] += rate_109;
      double rate_88 = scratch[88][tid];
      denoms[0] += rate_88;
      double rate_89 = scratch[89][tid];
      denoms[0] += rate_89;
    }
    else if (wid == 2)
    {
    }
    else if (wid == 3)
    {
      double rate_122 = scratch[122][tid];
      avals[0] += rate_122;
      double rate_142 = scratch[142][tid];
      denoms[0] += rate_142;
    }
    else if (wid == 4)
    {
    }
    else if (wid == 5)
    {
      double rate_80 = scratch[80][tid];
      avals[0] += rate_80;
      double rate_92 = scratch[92][tid];
      avals[2] += rate_92;
      double rate_100 = scratch[100][tid];
      denoms[0] += rate_100;
      double rate_112 = scratch[112][tid];
      denoms[0] += rate_112;
    }
    else if (wid == 6)
    {
    }
    else if (wid == 7)
    {
    }
    else if (wid == 8)
    {
    }
    else if (wid == 9)
    {
      double rate_123 = scratch[123][tid];
      avals[0] += rate_123;
      double rate_143 = scratch[143][tid];
      denoms[0] += rate_143;
    }
    else if (wid == 10)
    {
      double rate_79 = scratch[79][tid];
      avals[0] += rate_79;
      double rate_81 = scratch[81][tid];
      avals[0] += rate_81;
      double rate_82 = scratch[82][tid];
      avals[0] += rate_82;
      double rate_83 = scratch[83][tid];
      avals[0] += rate_83;
      double rate_84 = scratch[84][tid];
      avals[0] += rate_84;
      double rate_85 = scratch[85][tid];
      avals[0] += rate_85;
      double rate_86 = scratch[86][tid];
      avals[0] += rate_86;
      double rate_87 = scratch[87][tid];
      avals[0] += rate_87;
      double rate_90 = scratch[90][tid];
      avals[0] += rate_90;
      double rate_94 = scratch[94][tid];
      avals[0] += rate_94;
      double rate_95 = scratch[95][tid];
      avals[0] += rate_95;
      double rate_111 = scratch[111][tid];
      avals[0] += rate_111;
      double rate_113 = scratch[113][tid];
      avals[0] += rate_113;
      double rate_89 = scratch[89][tid];
      avals[1] += rate_89;
      double rate_112 = scratch[112][tid];
      avals[2] += rate_112;
      double rate_91 = scratch[91][tid];
      denoms[0] += rate_91;
      double rate_92 = scratch[92][tid];
      denoms[0] += rate_92;
      double rate_93 = scratch[93][tid];
      denoms[0] += rate_93;
      double rate_99 = scratch[99][tid];
      denoms[0] += rate_99;
      double rate_101 = scratch[101][tid];
      denoms[0] += rate_101;
      double rate_102 = scratch[102][tid];
      denoms[0] += rate_102;
      double rate_103 = scratch[103][tid];
      denoms[0] += rate_103;
      double rate_104 = scratch[104][tid];
      denoms[0] += rate_104;
      double rate_105 = scratch[105][tid];
      denoms[0] += rate_105;
      double rate_106 = scratch[106][tid];
      denoms[0] += rate_106;
      double rate_107 = scratch[107][tid];
      denoms[0] += rate_107;
      double rate_109 = scratch[109][tid];
      denoms[0] += rate_109;
      double rate_110 = scratch[110][tid];
      denoms[0] += rate_110;
      double rate_114 = scratch[114][tid];
      denoms[0] += rate_114;
      double rate_115 = scratch[115][tid];
      denoms[0] += rate_115;
    }
    else if (wid == 11)
    {
    }
    else if (wid == 12)
    {
    }
    else if (wid == 13)
    {
    }
    else if (wid == 14)
    {
      double rate_97 = scratch[97][tid];
      avals[0] += rate_97;
      double rate_98 = scratch[98][tid];
      avals[0] += rate_98;
      double rate_77 = scratch[77][tid];
      denoms[0] += rate_77;
      double rate_78 = scratch[78][tid];
      denoms[0] += rate_78;
    }
    else if (wid == 15)
    {
      double rate_96 = scratch[96][tid];
      avals[0] += rate_96;
      double rate_121 = scratch[121][tid];
      avals[0] += rate_121;
      double rate_137 = scratch[137][tid];
      avals[0] += rate_137;
      double rate_138 = scratch[138][tid];
      avals[0] += rate_138;
      double rate_139 = scratch[139][tid];
      avals[0] += rate_139;
      double rate_140 = scratch[140][tid];
      avals[0] += rate_140;
      double rate_117 = scratch[117][tid];
      denoms[0] += rate_117;
      double rate_118 = scratch[118][tid];
      denoms[0] += rate_118;
      double rate_119 = scratch[119][tid];
      denoms[0] += rate_119;
      double rate_120 = scratch[120][tid];
      denoms[0] += rate_120;
      double rate_116 = scratch[116][tid];
      denoms[0] += rate_116;
      double rate_141 = scratch[141][tid];
      denoms[0] += rate_141;
    }
    else if (wid == 16)
    {
    }
    else if (wid == 17)
    {
    }
    else if (wid == 18)
    {
    }
    else if (wid == 19)
    {
    }
    asm volatile("bar.sync 0, 640;" : : : "memory");
    if (wid == 0)
    {
      denoms[0] = 1.0/denoms[0];
      scratch[95][tid] = avals[0]*denoms[0];
      scratch[96][tid] = avals[1]*denoms[0];
      scratch[97][tid] = avals[2]*denoms[0];
      asm volatile("bar.arrive 1, 640;" : : : "memory");
    }
    else if (wid == 1)
    {
      denoms[0] = 1.0/denoms[0];
      scratch[93][tid] = avals[0]*denoms[0];
      scratch[98][tid] = avals[1]*denoms[0];
      scratch[99][tid] = avals[2]*denoms[0];
      scratch[100][tid] = avals[3]*denoms[0];
      asm volatile("bar.arrive 1, 640;" : : : "memory");
    }
    else if (wid == 2)
    {
      denoms[0] = 1.0/denoms[0];
      scratch[101][tid] = avals[0]*denoms[0];
      scratch[102][tid] = avals[1]*denoms[0];
      scratch[103][tid] = avals[2]*denoms[0];
      scratch[104][tid] = avals[3]*denoms[0];
      scratch[105][tid] = avals[4]*denoms[0];
      asm volatile("bar.arrive 1, 640;" : : : "memory");
    }
    else if (wid == 3)
    {
      denoms[0] = 1.0/denoms[0];
      scratch[106][tid] = avals[0]*denoms[0];
      scratch[107][tid] = avals[1]*denoms[0];
      asm volatile("bar.arrive 1, 640;" : : : "memory");
    }
    else if (wid == 4)
    {
      denoms[0] = 1.0/denoms[0];
      scratch[108][tid] = avals[0]*denoms[0];
      scratch[109][tid] = avals[1]*denoms[0];
      scratch[110][tid] = avals[2]*denoms[0];
      asm volatile("bar.arrive 1, 640;" : : : "memory");
    }
    else if (wid == 5)
    {
      denoms[0] = 1.0/denoms[0];
      scratch[111][tid] = avals[0]*denoms[0];
      scratch[112][tid] = avals[1]*denoms[0];
      scratch[113][tid] = avals[2]*denoms[0];
      asm volatile("bar.arrive 1, 640;" : : : "memory");
    }
    else if (wid == 6)
    {
      denoms[0] = 1.0/denoms[0];
      scratch[114][tid] = avals[0]*denoms[0];
      scratch[115][tid] = avals[1]*denoms[0];
      scratch[116][tid] = avals[2]*denoms[0];
      asm volatile("bar.arrive 1, 640;" : : : "memory");
    }
    else if (wid == 7)
    {
      denoms[0] = 1.0/denoms[0];
      scratch[117][tid] = avals[0]*denoms[0];
      scratch[118][tid] = avals[1]*denoms[0];
      asm volatile("bar.arrive 1, 640;" : : : "memory");
    }
    else if (wid == 8)
    {
      denoms[0] = 1.0/denoms[0];
      scratch[119][tid] = avals[0]*denoms[0];
      scratch[120][tid] = avals[1]*denoms[0];
      asm volatile("bar.arrive 1, 640;" : : : "memory");
    }
    else if (wid == 9)
    {
      denoms[0] = 1.0/denoms[0];
      scratch[121][tid] = avals[0]*denoms[0];
      scratch[122][tid] = avals[1]*denoms[0];
      scratch[123][tid] = avals[2]*denoms[0];
      asm volatile("bar.arrive 1, 640;" : : : "memory");
    }
    else if (wid == 10)
    {
      denoms[0] = 1.0/denoms[0];
      scratch[124][tid] = avals[0]*denoms[0];
      scratch[125][tid] = avals[1]*denoms[0];
      scratch[126][tid] = avals[2]*denoms[0];
      asm volatile("bar.arrive 1, 640;" : : : "memory");
    }
    else if (wid == 11)
    {
      denoms[0] = 1.0/denoms[0];
      scratch[127][tid] = avals[0]*denoms[0];
      asm volatile("bar.arrive 1, 640;" : : : "memory");
    }
    else if (wid == 12)
    {
      denoms[0] = 1.0/denoms[0];
      scratch[128][tid] = avals[0]*denoms[0];
      asm volatile("bar.arrive 1, 640;" : : : "memory");
    }
    else if (wid == 13)
    {
      denoms[0] = 1.0/denoms[0];
      scratch[129][tid] = avals[0]*denoms[0];
      asm volatile("bar.arrive 1, 640;" : : : "memory");
    }
    else if (wid == 14)
    {
      denoms[0] = 1.0/denoms[0];
      scratch[130][tid] = avals[0]*denoms[0];
      asm volatile("bar.arrive 1, 640;" : : : "memory");
    }
    else if (wid == 15)
    {
      denoms[0] = 1.0/denoms[0];
      scratch[131][tid] = avals[0]*denoms[0];
      asm volatile("bar.arrive 1, 640;" : : : "memory");
    }
    else if (wid == 16)
    {
      asm volatile("bar.arrive 1, 640;" : : : "memory");
    }
    else if (wid == 17)
    {
      asm volatile("bar.arrive 1, 640;" : : : "memory");
    }
    else if (wid == 18)
    {
      asm volatile("bar.sync 1, 640;" : : : "memory");
      double den;
      // QSS 1
      asm volatile("bar.arrive 4, 64;" : : : "memory");
      // QSS 6
      // QSS 10
      // QSS 11
      // QSS 5
      // QSS 9
      scratch[114][tid] += scratch[115][tid] * scratch[106][tid];
      den = 1.0/(1.0 - scratch[115][tid]*scratch[107][tid]);
      scratch[114][tid] *= den;
      scratch[116][tid] *= den;
      scratch[114][tid] += scratch[116][tid] * scratch[108][tid];
      den = 1.0/(1.0 - scratch[116][tid]*scratch[110][tid]);
      scratch[132][tid] = scratch[116][tid] * scratch[109][tid];
      scratch[114][tid] *= den;
      scratch[132][tid] *= den;
      // QSS 3
      asm volatile("bar.sync 2, 64;" : : : "memory");
      scratch[101][tid] += scratch[105][tid] * scratch[119][tid];
      den = 1.0/(1.0 - scratch[105][tid]*scratch[120][tid]);
      scratch[101][tid] *= den;
      scratch[103][tid] *= den;
      scratch[102][tid] *= den;
      scratch[104][tid] *= den;
      scratch[101][tid] += scratch[104][tid] * scratch[117][tid];
      den = 1.0/(1.0 - scratch[104][tid]*scratch[118][tid]);
      scratch[101][tid] *= den;
      scratch[103][tid] *= den;
      scratch[102][tid] *= den;
      scratch[101][tid] += scratch[102][tid] * scratch[95][tid];
      den = 1.0/(1.0 - scratch[102][tid]*scratch[97][tid]);
      scratch[133][tid] = scratch[102][tid] * scratch[96][tid];
      scratch[101][tid] *= den;
      scratch[133][tid] *= den;
      scratch[103][tid] *= den;
      scratch[101][tid] += scratch[103][tid] * scratch[108][tid];
      den = 1.0/(1.0 - scratch[103][tid]*scratch[109][tid]);
      scratch[134][tid] = scratch[103][tid] * scratch[110][tid];
      scratch[101][tid] *= den;
      scratch[133][tid] *= den;
      scratch[134][tid] *= den;
      scratch[101][tid] += scratch[134][tid] * scratch[114][tid];
      den = 1.0/(1.0 - scratch[134][tid]*scratch[132][tid]);
      scratch[101][tid] *= den;
      scratch[133][tid] *= den;
      scratch[101][tid] += scratch[133][tid] * scratch[93][tid];
      den = 1.0/(1.0 - scratch[133][tid]*scratch[94][tid]);
      scratch[101][tid] *= den;
      // QSS 13
      // Xstat 3
      scratch[79][tid] = scratch[101][tid];
      asm volatile("bar.arrive 3, 64;" : : : "memory");
      // Xstat 9
      scratch[85][tid] = scratch[114][tid] + scratch[132][tid]*scratch[79][tid];
      // Xstat 6
  scratch[82][tid] = scratch[108][tid] + scratch[109][tid]*scratch[79][tid] + 
        scratch[110][tid]*scratch[85][tid]; 
      // Xstat 1
      asm volatile("bar.sync 5, 64;" : : : "memory");
      scratch[77][tid] = scratch[95][tid] + scratch[96][tid]*scratch[78][tid] + 
        scratch[97][tid]*scratch[79][tid]; 
      // Xstat 10
      scratch[86][tid] = scratch[117][tid] + scratch[118][tid]*scratch[79][tid];
      // Xstat 11
      scratch[87][tid] = scratch[119][tid] + scratch[120][tid]*scratch[79][tid];
      // Xstat 5
      scratch[81][tid] = scratch[106][tid] + scratch[107][tid]*scratch[85][tid];
      // Xstat 13
      scratch[89][tid] = scratch[130][tid];
    }
    else if (wid == 19)
    {
      asm volatile("bar.sync 1, 640;" : : : "memory");
      double den;
      // QSS 7
      // QSS 15
      scratch[124][tid] += scratch[126][tid] * scratch[111][tid];
      den = 1.0/(1.0 - scratch[126][tid]*scratch[113][tid]);
      scratch[135][tid] = scratch[126][tid] * scratch[112][tid];
      scratch[124][tid] *= den;
      scratch[125][tid] *= den;
      scratch[135][tid] *= den;
      // QSS 14
      scratch[121][tid] += scratch[123][tid] * scratch[111][tid];
      den = 1.0/(1.0 - scratch[123][tid]*scratch[112][tid]);
      scratch[136][tid] = scratch[123][tid] * scratch[113][tid];
      scratch[121][tid] *= den;
      scratch[122][tid] *= den;
      scratch[136][tid] *= den;
      scratch[121][tid] += scratch[136][tid] * scratch[124][tid];
      den = 1.0/(1.0 - scratch[136][tid]*scratch[135][tid]);
      scratch[122][tid] += scratch[136][tid]*scratch[125][tid];
      scratch[121][tid] *= den;
      scratch[122][tid] *= den;
      // QSS 2
      asm volatile("bar.sync 4, 64;" : : : "memory");
      scratch[93][tid] += scratch[98][tid] * scratch[95][tid];
      den = 1.0/(1.0 - scratch[98][tid]*scratch[96][tid]);
      scratch[94][tid] = scratch[98][tid] * scratch[97][tid];
      scratch[93][tid] *= den;
      scratch[94][tid] *= den;
      scratch[99][tid] *= den;
      scratch[100][tid] *= den;
      scratch[93][tid] += scratch[100][tid] * scratch[124][tid];
      den = 1.0/(1.0 - scratch[100][tid]*scratch[125][tid]);
      scratch[99][tid] += scratch[100][tid]*scratch[135][tid];
      scratch[93][tid] *= den;
      scratch[94][tid] *= den;
      scratch[99][tid] *= den;
      scratch[93][tid] += scratch[99][tid] * scratch[121][tid];
      den = 1.0/(1.0 - scratch[99][tid]*scratch[122][tid]);
      scratch[93][tid] *= den;
      scratch[94][tid] *= den;
      asm volatile("bar.arrive 2, 64;" : : : "memory");
      // QSS 4
      // QSS 8
      // QSS 12
      // QSS 16
      // Xstat 2
      asm volatile("bar.sync 3, 64;" : : : "memory");
      scratch[78][tid] = scratch[93][tid] + scratch[94][tid]*scratch[79][tid];
      asm volatile("bar.arrive 5, 64;" : : : "memory");
      // Xstat 14
      scratch[90][tid] = scratch[121][tid] + scratch[122][tid]*scratch[78][tid];
      // Xstat 15
  scratch[91][tid] = scratch[124][tid] + scratch[125][tid]*scratch[78][tid] + 
        scratch[135][tid]*scratch[90][tid]; 
      // Xstat 7
  scratch[83][tid] = scratch[111][tid] + scratch[112][tid]*scratch[90][tid] + 
        scratch[113][tid]*scratch[91][tid]; 
      // Xstat 4
      scratch[80][tid] = scratch[127][tid];
      // Xstat 8
      scratch[84][tid] = scratch[128][tid];
      // Xstat 12
      scratch[88][tid] = scratch[129][tid];
      // Xstat 16
      scratch[92][tid] = scratch[131][tid];
    }
    double rr_f_8 = rr_f_7,  rr_r_8 = rr_r_7;
    /* Chemistry for level 8 */
    {
      {
        if (tid == 16)
          real_mirror[wid] = real_constants[1];
        double arrhenius = real_mirror[wid] * vlntemp;
        if (tid == 17)
          real_mirror[wid] = real_constants[1];
        arrhenius = __fma_rn(real_mirror[wid],  ortc,  arrhenius);
        arrhenius = exp(arrhenius);
        if (tid == 18)
          real_mirror[wid] = real_constants[1];
        rr_f_8 = real_mirror[wid] * arrhenius;
      }
      {
        if (tid == 19)
          real_mirror[wid] = real_constants[1];
        double arrhenius = real_mirror[wid] * vlntemp;
        if (tid == 20)
          real_mirror[wid] = real_constants[1];
        arrhenius = __fma_rn(real_mirror[wid],  ortc,  arrhenius);
        arrhenius = exp(arrhenius);
        if (tid == 21)
          real_mirror[wid] = real_constants[1];
        rr_r_8 = real_mirror[wid] * arrhenius;
      }
    }
    double rr_f_9 = rr_f_8,  rr_r_9 = rr_r_8;
    /* Chemistry for level 9 */
    {
      {
        if (tid == 22)
          real_mirror[wid] = real_constants[1];
        double arrhenius = real_mirror[wid] * vlntemp;
        if (tid == 23)
          real_mirror[wid] = real_constants[1];
        arrhenius = __fma_rn(real_mirror[wid],  ortc,  arrhenius);
        arrhenius = exp(arrhenius);
        if (tid == 24)
          real_mirror[wid] = real_constants[1];
        rr_f_9 = real_mirror[wid] * arrhenius;
      }
      {
        if (tid == 25)
          real_mirror[wid] = real_constants[1];
        double arrhenius = real_mirror[wid] * vlntemp;
        if (tid == 26)
          real_mirror[wid] = real_constants[1];
        arrhenius = __fma_rn(real_mirror[wid],  ortc,  arrhenius);
        arrhenius = exp(arrhenius);
        if (tid == 27)
          real_mirror[wid] = real_constants[1];
        rr_r_9 = real_mirror[wid] * arrhenius;
      }
    }
    if (wid == 0)
    {
      double mole_frac_NC_CO = scratch[6][tid];
      rr_f_8 *= mole_frac_NC_CO;
      double mole_frac_NC_HO2 = scratch[10][tid];
      rr_f_8 *= mole_frac_NC_HO2;
      double mole_frac_NC_OH = scratch[4][tid];
      rr_r_8 *= mole_frac_NC_OH;
      double mole_frac_NC_CO2 = scratch[7][tid];
      rr_r_8 *= mole_frac_NC_CO2;
      rr_f_9 *= mole_frac_NC_OH;
      double mole_frac_NC_CH2CO = scratch[19][tid];
      rr_f_9 *= mole_frac_NC_CH2CO;
      double mole_frac_NC_H2O = scratch[5][tid];
      rr_r_9 *= mole_frac_NC_H2O;
      double mole_frac_NC_HCCO = scratch[20][tid];
      rr_r_9 *= mole_frac_NC_HCCO;
    }
    else if (wid == 1)
    {
      double mole_frac_NC_H2O = scratch[5][tid];
      rr_f_8 *= mole_frac_NC_H2O;
      double thb_2 = scratch[54][tid];
      rr_f_8 *= thb_2;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_8 *= mole_frac_NC_H;
      double mole_frac_NC_OH = scratch[4][tid];
      rr_r_8 *= mole_frac_NC_OH;
      rr_r_8 *= thb_2;
      rr_f_9 *= mole_frac_NC_H;
      double mole_frac_NC_CH2CO = scratch[19][tid];
      rr_f_9 *= mole_frac_NC_CH2CO;
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_r_9 *= mole_frac_NC_H2;
      double mole_frac_NC_HCCO = scratch[20][tid];
      rr_r_9 *= mole_frac_NC_HCCO;
    }
    else if (wid == 2)
    {
      double mole_frac_NC_O2 = scratch[3][tid];
      rr_f_8 *= mole_frac_NC_O2;
      double mole_frac_NC_CO = scratch[6][tid];
      rr_f_8 *= mole_frac_NC_CO;
      double mole_frac_NC_O = scratch[2][tid];
      rr_r_8 *= mole_frac_NC_O;
      double mole_frac_NC_CO2 = scratch[7][tid];
      rr_r_8 *= mole_frac_NC_CO2;
      rr_f_9 *= mole_frac_NC_O;
      double mole_frac_NC_HCCO = scratch[20][tid];
      rr_f_9 *= mole_frac_NC_HCCO;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_9 *= mole_frac_NC_H;
      rr_r_9 *= mole_frac_NC_CO;
      rr_r_9 *= mole_frac_NC_CO;
    }
    else if (wid == 3)
    {
      double mole_frac_NC_OH = scratch[4][tid];
      rr_f_8 *= mole_frac_NC_OH;
      double mole_frac_NC_CH3 = scratch[8][tid];
      rr_f_8 *= mole_frac_NC_CH3;
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_r_8 *= mole_frac_NC_H2;
      double mole_frac_NC_CH2O = scratch[12][tid];
      rr_r_8 *= mole_frac_NC_CH2O;
      double mole_frac_NC_O2 = scratch[3][tid];
      rr_f_9 *= mole_frac_NC_O2;
      double mole_frac_NC_C2H6 = scratch[13][tid];
      rr_f_9 *= mole_frac_NC_C2H6;
      double mole_frac_NC_HO2 = scratch[10][tid];
      rr_r_9 *= mole_frac_NC_HO2;
      double mole_frac_NC_C2H5 = scratch[15][tid];
      rr_r_9 *= mole_frac_NC_C2H5;
    }
    else if (wid == 4)
    {
      double mole_frac_NC_O = scratch[2][tid];
      rr_f_8 *= mole_frac_NC_O;
      double mole_frac_NC_CH3 = scratch[8][tid];
      rr_f_8 *= mole_frac_NC_CH3;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_8 *= mole_frac_NC_H;
      double mole_frac_NC_CH2O = scratch[12][tid];
      rr_r_8 *= mole_frac_NC_CH2O;
      double mole_frac_NC_HO2 = scratch[10][tid];
      rr_f_9 *= mole_frac_NC_HO2;
      double mole_frac_NC_C2H6 = scratch[13][tid];
      rr_f_9 *= mole_frac_NC_C2H6;
      double mole_frac_NC_H2O2 = scratch[11][tid];
      rr_r_9 *= mole_frac_NC_H2O2;
      double mole_frac_NC_C2H5 = scratch[15][tid];
      rr_r_9 *= mole_frac_NC_C2H5;
    }
    else if (wid == 5)
    {
      double mole_frac_NC_O = scratch[2][tid];
      rr_f_8 *= mole_frac_NC_O;
      double mole_frac_NC_HO2 = scratch[10][tid];
      rr_f_8 *= mole_frac_NC_HO2;
      double mole_frac_NC_O2 = scratch[3][tid];
      rr_r_8 *= mole_frac_NC_O2;
      double mole_frac_NC_OH = scratch[4][tid];
      rr_r_8 *= mole_frac_NC_OH;
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_9 *= mole_frac_NC_H;
      double mole_frac_NC_C2H5 = scratch[15][tid];
      rr_f_9 *= mole_frac_NC_C2H5;
      double mole_frac_NC_CH3 = scratch[8][tid];
      rr_r_9 *= mole_frac_NC_CH3;
      rr_r_9 *= mole_frac_NC_CH3;
    }
    else if (wid == 6)
    {
      double mole_frac_NC_CH3 = scratch[8][tid];
      rr_f_8 *= mole_frac_NC_CH3;
      double mole_frac_NC_HO2 = scratch[10][tid];
      rr_f_8 *= mole_frac_NC_HO2;
      double mole_frac_NC_O2 = scratch[3][tid];
      rr_r_8 *= mole_frac_NC_O2;
      double mole_frac_NC_CH4 = scratch[9][tid];
      rr_r_8 *= mole_frac_NC_CH4;
      double mole_frac_NC_C2H6 = scratch[13][tid];
      rr_f_9 *= mole_frac_NC_C2H6;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_9 *= mole_frac_NC_H;
      double mole_frac_NC_C2H5 = scratch[15][tid];
      rr_r_9 *= mole_frac_NC_C2H5;
    }
    else if (wid == 7)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_8 *= mole_frac_NC_H;
      double mole_frac_NC_HO2 = scratch[10][tid];
      rr_f_8 *= mole_frac_NC_HO2;
      double mole_frac_NC_OH = scratch[4][tid];
      rr_r_8 *= mole_frac_NC_OH;
      rr_r_8 *= mole_frac_NC_OH;
      double mole_frac_NC_CH3 = scratch[8][tid];
      rr_f_9 *= mole_frac_NC_CH3;
      double mole_frac_NC_C2H2 = scratch[17][tid];
      rr_f_9 *= mole_frac_NC_C2H2;
      rr_r_9 *= mole_frac_NC_H;
      double mole_frac_NC_C3H4_P = scratch[23][tid];
      rr_r_9 *= mole_frac_NC_C3H4_P;
    }
    else if (wid == 8)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_8 *= mole_frac_NC_H;
      double mole_frac_NC_HO2 = scratch[10][tid];
      rr_f_8 *= mole_frac_NC_HO2;
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_r_8 *= mole_frac_NC_H2;
      double mole_frac_NC_O2 = scratch[3][tid];
      rr_r_8 *= mole_frac_NC_O2;
      double mole_frac_NC_C3H5_A = scratch[38][tid];
      rr_f_9 *= mole_frac_NC_C3H5_A;
      double mole_frac_NC_CH3 = scratch[8][tid];
      rr_r_9 *= mole_frac_NC_CH3;
      double mole_frac_NC_C2H2 = scratch[17][tid];
      rr_r_9 *= mole_frac_NC_C2H2;
    }
    else if (wid == 9)
    {
      double mole_frac_NC_OH = scratch[4][tid];
      rr_f_8 *= mole_frac_NC_OH;
      double mole_frac_NC_HO2 = scratch[10][tid];
      rr_f_8 *= mole_frac_NC_HO2;
      double mole_frac_NC_O2 = scratch[3][tid];
      rr_r_8 *= mole_frac_NC_O2;
      double mole_frac_NC_H2O = scratch[5][tid];
      rr_r_8 *= mole_frac_NC_H2O;
      double mole_frac_NC_C3H6 = scratch[24][tid];
      rr_f_9 *= mole_frac_NC_C3H6;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_9 *= mole_frac_NC_H;
      double mole_frac_NC_C3H5_A = scratch[38][tid];
      rr_r_9 *= mole_frac_NC_C3H5_A;
    }
    else if (wid == 10)
    {
      double mole_frac_NC_O2 = scratch[3][tid];
      rr_f_8 *= mole_frac_NC_O2;
      double mole_frac_NC_H2O2 = scratch[11][tid];
      rr_f_8 *= mole_frac_NC_H2O2;
      double mole_frac_NC_HO2 = scratch[10][tid];
      rr_r_8 *= mole_frac_NC_HO2;
      rr_r_8 *= mole_frac_NC_HO2;
      double mole_frac_NC_O = scratch[2][tid];
      rr_f_9 *= mole_frac_NC_O;
      double mole_frac_NC_C3H6 = scratch[24][tid];
      rr_f_9 *= mole_frac_NC_C3H6;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_9 *= mole_frac_NC_H;
      double mole_frac_NC_CH3 = scratch[8][tid];
      rr_r_9 *= mole_frac_NC_CH3;
      double mole_frac_NC_CH2CO = scratch[19][tid];
      rr_r_9 *= mole_frac_NC_CH2CO;
    }
    else if (wid == 11)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_8 *= mole_frac_NC_H;
      double mole_frac_NC_H2O2 = scratch[11][tid];
      rr_f_8 *= mole_frac_NC_H2O2;
      double mole_frac_NC_OH = scratch[4][tid];
      rr_r_8 *= mole_frac_NC_OH;
      double mole_frac_NC_H2O = scratch[5][tid];
      rr_r_8 *= mole_frac_NC_H2O;
      double mole_frac_NC_O = scratch[2][tid];
      rr_f_9 *= mole_frac_NC_O;
      double mole_frac_NC_C3H6 = scratch[24][tid];
      rr_f_9 *= mole_frac_NC_C3H6;
      rr_r_9 *= mole_frac_NC_H;
      rr_r_9 *= mole_frac_NC_H;
      double mole_frac_NC_CH3CHCO = scratch[42][tid];
      rr_r_9 *= mole_frac_NC_CH3CHCO;
    }
    else if (wid == 12)
    {
      double mole_frac_NC_CH4 = scratch[9][tid];
      rr_f_8 *= mole_frac_NC_CH4;
      double mole_frac_NC_HO2 = scratch[10][tid];
      rr_f_8 *= mole_frac_NC_HO2;
      double mole_frac_NC_CH3 = scratch[8][tid];
      rr_r_8 *= mole_frac_NC_CH3;
      double mole_frac_NC_H2O2 = scratch[11][tid];
      rr_r_8 *= mole_frac_NC_H2O2;
      double mole_frac_NC_OH = scratch[4][tid];
      rr_f_9 *= mole_frac_NC_OH;
      double mole_frac_NC_C3H6 = scratch[24][tid];
      rr_f_9 *= mole_frac_NC_C3H6;
      double mole_frac_NC_H2O = scratch[5][tid];
      rr_r_9 *= mole_frac_NC_H2O;
      double mole_frac_NC_C3H5_A = scratch[38][tid];
      rr_r_9 *= mole_frac_NC_C3H5_A;
    }
    else if (wid == 13)
    {
      double mole_frac_NC_C2H2 = scratch[17][tid];
      rr_f_8 *= mole_frac_NC_C2H2;
      double thb_0 = scratch[52][tid];
      rr_f_8 *= thb_0;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_8 *= mole_frac_NC_H;
      double mole_frac_NC_C2H = scratch[16][tid];
      rr_r_8 *= mole_frac_NC_C2H;
      rr_r_8 *= thb_0;
      double mole_frac_NC_OH = scratch[4][tid];
      rr_f_9 *= mole_frac_NC_OH;
      double mole_frac_NC_C4H6 = scratch[25][tid];
      rr_f_9 *= mole_frac_NC_C4H6;
      double mole_frac_NC_C2H5 = scratch[15][tid];
      rr_r_9 *= mole_frac_NC_C2H5;
      double mole_frac_NC_CH2CO = scratch[19][tid];
      rr_r_9 *= mole_frac_NC_CH2CO;
    }
    else if (wid == 14)
    {
      double mole_frac_NC_O2 = scratch[3][tid];
      rr_f_8 *= mole_frac_NC_O2;
      double mole_frac_NC_C2H2 = scratch[17][tid];
      rr_f_8 *= mole_frac_NC_C2H2;
      double mole_frac_NC_OH = scratch[4][tid];
      rr_r_8 *= mole_frac_NC_OH;
      double mole_frac_NC_HCCO = scratch[20][tid];
      rr_r_8 *= mole_frac_NC_HCCO;
      rr_f_9 *= mole_frac_NC_OH;
      double mole_frac_NC_C4H6 = scratch[25][tid];
      rr_f_9 *= mole_frac_NC_C4H6;
      double mole_frac_NC_CH2O = scratch[12][tid];
      rr_r_9 *= mole_frac_NC_CH2O;
      double mole_frac_NC_C3H5_A = scratch[38][tid];
      rr_r_9 *= mole_frac_NC_C3H5_A;
    }
    else if (wid == 15)
    {
      double mole_frac_NC_OH = scratch[4][tid];
      rr_f_8 *= mole_frac_NC_OH;
      double mole_frac_NC_C2H2 = scratch[17][tid];
      rr_f_8 *= mole_frac_NC_C2H2;
      double mole_frac_NC_H2O = scratch[5][tid];
      rr_r_8 *= mole_frac_NC_H2O;
      double mole_frac_NC_C2H = scratch[16][tid];
      rr_r_8 *= mole_frac_NC_C2H;
      double mole_frac_NC_O = scratch[2][tid];
      rr_f_9 *= mole_frac_NC_O;
      double mole_frac_NC_C4H6 = scratch[25][tid];
      rr_f_9 *= mole_frac_NC_C4H6;
      double mole_frac_NC_CH2O = scratch[12][tid];
      rr_r_9 *= mole_frac_NC_CH2O;
      double mole_frac_NC_C3H4_A = scratch[22][tid];
      rr_r_9 *= mole_frac_NC_C3H4_A;
    }
    else if (wid == 16)
    {
      double mole_frac_NC_O = scratch[2][tid];
      rr_f_8 *= mole_frac_NC_O;
      double mole_frac_NC_C2H2 = scratch[17][tid];
      rr_f_8 *= mole_frac_NC_C2H2;
      double mole_frac_NC_OH = scratch[4][tid];
      rr_r_8 *= mole_frac_NC_OH;
      double mole_frac_NC_C2H = scratch[16][tid];
      rr_r_8 *= mole_frac_NC_C2H;
      rr_f_9 *= mole_frac_NC_O;
      double mole_frac_NC_C3H6 = scratch[24][tid];
      rr_f_9 *= mole_frac_NC_C3H6;
      rr_r_9 *= mole_frac_NC_OH;
      double mole_frac_NC_C3H5_A = scratch[38][tid];
      rr_r_9 *= mole_frac_NC_C3H5_A;
    }
    else if (wid == 17)
    {
      double mole_frac_NC_O = scratch[2][tid];
      rr_f_8 *= mole_frac_NC_O;
      double mole_frac_NC_H2O2 = scratch[11][tid];
      rr_f_8 *= mole_frac_NC_H2O2;
      double mole_frac_NC_OH = scratch[4][tid];
      rr_r_8 *= mole_frac_NC_OH;
      double mole_frac_NC_HO2 = scratch[10][tid];
      rr_r_8 *= mole_frac_NC_HO2;
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_9 *= mole_frac_NC_H;
      double mole_frac_NC_C3H6 = scratch[24][tid];
      rr_f_9 *= mole_frac_NC_C3H6;
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_r_9 *= mole_frac_NC_H2;
      double mole_frac_NC_C3H5_A = scratch[38][tid];
      rr_r_9 *= mole_frac_NC_C3H5_A;
    }
    else if (wid == 18)
    {
      double mole_frac_NC_O = scratch[2][tid];
      rr_f_8 *= mole_frac_NC_O;
      double mole_frac_NC_C2H2 = scratch[17][tid];
      rr_f_8 *= mole_frac_NC_C2H2;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_8 *= mole_frac_NC_H;
      double mole_frac_NC_HCCO = scratch[20][tid];
      rr_r_8 *= mole_frac_NC_HCCO;
      rr_f_9 *= mole_frac_NC_H;
      double mole_frac_NC_C3H6 = scratch[24][tid];
      rr_f_9 *= mole_frac_NC_C3H6;
      double mole_frac_NC_CH3 = scratch[8][tid];
      rr_r_9 *= mole_frac_NC_CH3;
      double mole_frac_NC_C2H4 = scratch[14][tid];
      rr_r_9 *= mole_frac_NC_C2H4;
    }
    else if (wid == 19)
    {
      double mole_frac_NC_OH = scratch[4][tid];
      rr_f_8 *= mole_frac_NC_OH;
      double mole_frac_NC_C2H2 = scratch[17][tid];
      rr_f_8 *= mole_frac_NC_C2H2;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_8 *= mole_frac_NC_H;
      double mole_frac_NC_CH2CO = scratch[19][tid];
      rr_r_8 *= mole_frac_NC_CH2CO;
      double mole_frac_NC_C5H9 = scratch[31][tid];
      rr_f_9 *= mole_frac_NC_C5H9;
      double mole_frac_NC_C2H4 = scratch[14][tid];
      rr_r_9 *= mole_frac_NC_C2H4;
      double mole_frac_NC_C3H5_A = scratch[38][tid];
      rr_r_9 *= mole_frac_NC_C3H5_A;
    }
    double rr_f_10 = rr_f_9,  rr_r_10 = rr_r_9;
    /* Chemistry for level 10 */
    {
      {
        if (tid == 28)
          real_mirror[wid] = real_constants[1];
        double arrhenius = real_mirror[wid] * vlntemp;
        if (tid == 29)
          real_mirror[wid] = real_constants[1];
        arrhenius = __fma_rn(real_mirror[wid],  ortc,  arrhenius);
        arrhenius = exp(arrhenius);
        if (tid == 30)
          real_mirror[wid] = real_constants[1];
        rr_f_10 = real_mirror[wid] * arrhenius;
      }
      {
        if (tid == 31)
          real_mirror[wid] = real_constants[1];
        double arrhenius = real_mirror[wid] * vlntemp;
        if (tid == 0)
          real_mirror[wid] = real_constants[2];
        arrhenius = __fma_rn(real_mirror[wid],  ortc,  arrhenius);
        arrhenius = exp(arrhenius);
        if (tid == 1)
          real_mirror[wid] = real_constants[2];
        rr_r_10 = real_mirror[wid] * arrhenius;
      }
    }
    double rr_f_11 = rr_f_10,  rr_r_11 = rr_r_10;
    /* Chemistry for level 11 */
    {
      {
        if (tid == 2)
          real_mirror[wid] = real_constants[2];
        double arrhenius = real_mirror[wid] * vlntemp;
        if (tid == 3)
          real_mirror[wid] = real_constants[2];
        arrhenius = __fma_rn(real_mirror[wid],  ortc,  arrhenius);
        arrhenius = exp(arrhenius);
        if (tid == 4)
          real_mirror[wid] = real_constants[2];
        rr_f_11 = real_mirror[wid] * arrhenius;
      }
      {
        if (tid == 5)
          real_mirror[wid] = real_constants[2];
        double arrhenius = real_mirror[wid] * vlntemp;
        if (tid == 6)
          real_mirror[wid] = real_constants[2];
        arrhenius = __fma_rn(real_mirror[wid],  ortc,  arrhenius);
        arrhenius = exp(arrhenius);
        if (tid == 7)
          real_mirror[wid] = real_constants[2];
        rr_r_11 = real_mirror[wid] * arrhenius;
      }
    }
    if (wid == 0)
    {
      double mole_frac_NC_C5H9 = scratch[31][tid];
      rr_f_10 *= mole_frac_NC_C5H9;
      double mole_frac_NC_CH3 = scratch[8][tid];
      rr_r_10 *= mole_frac_NC_CH3;
      double mole_frac_NC_C4H6 = scratch[25][tid];
      rr_r_10 *= mole_frac_NC_C4H6;
      rr_f_11 *= mole_frac_NC_CH3;
      double mole_frac_NC_C5H10_1 = scratch[32][tid];
      rr_f_11 *= mole_frac_NC_C5H10_1;
      double mole_frac_NC_CH4 = scratch[9][tid];
      rr_r_11 *= mole_frac_NC_CH4;
      rr_r_11 *= mole_frac_NC_C5H9;
    }
    else if (wid == 1)
    {
      double mole_frac_NC_C4H7 = scratch[26][tid];
      rr_f_10 *= mole_frac_NC_C4H7;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_10 *= mole_frac_NC_H;
      double mole_frac_NC_C4H6 = scratch[25][tid];
      rr_r_10 *= mole_frac_NC_C4H6;
      rr_f_11 *= mole_frac_NC_H;
      double mole_frac_NC_H2O2 = scratch[11][tid];
      rr_f_11 *= mole_frac_NC_H2O2;
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_r_11 *= mole_frac_NC_H2;
      double mole_frac_NC_HO2 = scratch[10][tid];
      rr_r_11 *= mole_frac_NC_HO2;
    }
    else if (wid == 2)
    {
      double mole_frac_NC_CH3 = scratch[8][tid];
      rr_f_10 *= mole_frac_NC_CH3;
      double mole_frac_NC_C4H7 = scratch[26][tid];
      rr_f_10 *= mole_frac_NC_C4H7;
      double mole_frac_NC_CH4 = scratch[9][tid];
      rr_r_10 *= mole_frac_NC_CH4;
      double mole_frac_NC_C4H6 = scratch[25][tid];
      rr_r_10 *= mole_frac_NC_C4H6;
      double mole_frac_NC_O = scratch[2][tid];
      rr_f_11 *= mole_frac_NC_O;
      double mole_frac_NC_C2H5 = scratch[15][tid];
      rr_f_11 *= mole_frac_NC_C2H5;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_11 *= mole_frac_NC_H;
      double mole_frac_NC_CH3CHO = scratch[21][tid];
      rr_r_11 *= mole_frac_NC_CH3CHO;
    }
    else if (wid == 3)
    {
      double mole_frac_NC_C4H7 = scratch[26][tid];
      rr_f_10 *= mole_frac_NC_C4H7;
      double mole_frac_NC_C3H5_A = scratch[38][tid];
      rr_f_10 *= mole_frac_NC_C3H5_A;
      double mole_frac_NC_C3H6 = scratch[24][tid];
      rr_r_10 *= mole_frac_NC_C3H6;
      double mole_frac_NC_C4H6 = scratch[25][tid];
      rr_r_10 *= mole_frac_NC_C4H6;
      double mole_frac_NC_C5H11_1 = scratch[33][tid];
      rr_f_11 *= mole_frac_NC_C5H11_1;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_11 *= mole_frac_NC_H;
      double mole_frac_NC_C5H10_1 = scratch[32][tid];
      rr_r_11 *= mole_frac_NC_C5H10_1;
    }
    else if (wid == 4)
    {
      double mole_frac_NC_O2 = scratch[3][tid];
      rr_f_10 *= mole_frac_NC_O2;
      double mole_frac_NC_C4H7 = scratch[26][tid];
      rr_f_10 *= mole_frac_NC_C4H7;
      double mole_frac_NC_HO2 = scratch[10][tid];
      rr_r_10 *= mole_frac_NC_HO2;
      double mole_frac_NC_C4H6 = scratch[25][tid];
      rr_r_10 *= mole_frac_NC_C4H6;
      rr_f_11 *= mole_frac_NC_O2;
      double mole_frac_NC_H2O2 = scratch[11][tid];
      rr_f_11 *= mole_frac_NC_H2O2;
      rr_r_11 *= mole_frac_NC_HO2;
      rr_r_11 *= mole_frac_NC_HO2;
    }
    else if (wid == 5)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_10 *= mole_frac_NC_H;
      double mole_frac_NC_C4H7 = scratch[26][tid];
      rr_f_10 *= mole_frac_NC_C4H7;
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_r_10 *= mole_frac_NC_H2;
      double mole_frac_NC_C4H6 = scratch[25][tid];
      rr_r_10 *= mole_frac_NC_C4H6;
      double mole_frac_NC_CH3O2 = scratch[34][tid];
      rr_f_11 *= mole_frac_NC_CH3O2;
      double thb_0 = scratch[52][tid];
      rr_f_11 *= thb_0;
      double mole_frac_NC_O2 = scratch[3][tid];
      rr_r_11 *= mole_frac_NC_O2;
      double mole_frac_NC_CH3 = scratch[8][tid];
      rr_r_11 *= mole_frac_NC_CH3;
      rr_r_11 *= thb_0;
    }
    else if (wid == 6)
    {
      double mole_frac_NC_C2H5 = scratch[15][tid];
      rr_f_10 *= mole_frac_NC_C2H5;
      double mole_frac_NC_C4H7 = scratch[26][tid];
      rr_f_10 *= mole_frac_NC_C4H7;
      double mole_frac_NC_C2H6 = scratch[13][tid];
      rr_r_10 *= mole_frac_NC_C2H6;
      double mole_frac_NC_C4H6 = scratch[25][tid];
      rr_r_10 *= mole_frac_NC_C4H6;
      double mole_frac_NC_HO2 = scratch[10][tid];
      rr_f_11 *= mole_frac_NC_HO2;
      double mole_frac_NC_CH3O2 = scratch[34][tid];
      rr_f_11 *= mole_frac_NC_CH3O2;
      double mole_frac_NC_O2 = scratch[3][tid];
      rr_r_11 *= mole_frac_NC_O2;
      double mole_frac_NC_CH3O2H = scratch[35][tid];
      rr_r_11 *= mole_frac_NC_CH3O2H;
    }
    else if (wid == 7)
    {
      double mole_frac_NC_C4H8_1 = scratch[27][tid];
      rr_f_10 *= mole_frac_NC_C4H8_1;
      double mole_frac_NC_CH3 = scratch[8][tid];
      rr_r_10 *= mole_frac_NC_CH3;
      double mole_frac_NC_C3H5_A = scratch[38][tid];
      rr_r_10 *= mole_frac_NC_C3H5_A;
      double mole_frac_NC_OH = scratch[4][tid];
      rr_f_11 *= mole_frac_NC_OH;
      double mole_frac_NC_H2O2 = scratch[11][tid];
      rr_f_11 *= mole_frac_NC_H2O2;
      double mole_frac_NC_H2O = scratch[5][tid];
      rr_r_11 *= mole_frac_NC_H2O;
      double mole_frac_NC_HO2 = scratch[10][tid];
      rr_r_11 *= mole_frac_NC_HO2;
    }
    else if (wid == 8)
    {
      double mole_frac_NC_C4H8_1 = scratch[27][tid];
      rr_f_10 *= mole_frac_NC_C4H8_1;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_10 *= mole_frac_NC_H;
      double mole_frac_NC_C4H7 = scratch[26][tid];
      rr_r_10 *= mole_frac_NC_C4H7;
      double mole_frac_NC_CH3O2 = scratch[34][tid];
      rr_f_11 *= mole_frac_NC_CH3O2;
      rr_f_11 *= mole_frac_NC_CH3O2;
      double mole_frac_NC_O2 = scratch[3][tid];
      rr_r_11 *= mole_frac_NC_O2;
      double mole_frac_NC_CH2O = scratch[12][tid];
      rr_r_11 *= mole_frac_NC_CH2O;
      double mole_frac_NC_CH3OH = scratch[18][tid];
      rr_r_11 *= mole_frac_NC_CH3OH;
    }
    else if (wid == 9)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_10 *= mole_frac_NC_H;
      double mole_frac_NC_C4H8_1 = scratch[27][tid];
      rr_f_10 *= mole_frac_NC_C4H8_1;
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_r_10 *= mole_frac_NC_H2;
      double mole_frac_NC_C4H7 = scratch[26][tid];
      rr_r_10 *= mole_frac_NC_C4H7;
      double mole_frac_NC_C2H6 = scratch[13][tid];
      rr_f_11 *= mole_frac_NC_C2H6;
      double mole_frac_NC_CH3O2 = scratch[34][tid];
      rr_f_11 *= mole_frac_NC_CH3O2;
      double mole_frac_NC_C2H5 = scratch[15][tid];
      rr_r_11 *= mole_frac_NC_C2H5;
      double mole_frac_NC_CH3O2H = scratch[35][tid];
      rr_r_11 *= mole_frac_NC_CH3O2H;
    }
    else if (wid == 10)
    {
      double mole_frac_NC_OH = scratch[4][tid];
      rr_f_10 *= mole_frac_NC_OH;
      double mole_frac_NC_C4H8_1 = scratch[27][tid];
      rr_f_10 *= mole_frac_NC_C4H8_1;
      double mole_frac_NC_H2O = scratch[5][tid];
      rr_r_10 *= mole_frac_NC_H2O;
      double mole_frac_NC_C4H7 = scratch[26][tid];
      rr_r_10 *= mole_frac_NC_C4H7;
      rr_f_11 *= mole_frac_NC_OH;
      double mole_frac_NC_C2H3CHO = scratch[37][tid];
      rr_f_11 *= mole_frac_NC_C2H3CHO;
      rr_r_11 *= mole_frac_NC_H2O;
      double mole_frac_NC_C2H3CO = scratch[36][tid];
      rr_r_11 *= mole_frac_NC_C2H3CO;
    }
    else if (wid == 11)
    {
      double mole_frac_NC_O2 = scratch[3][tid];
      rr_f_10 *= mole_frac_NC_O2;
      double mole_frac_NC_C4H8_1 = scratch[27][tid];
      rr_f_10 *= mole_frac_NC_C4H8_1;
      double mole_frac_NC_HO2 = scratch[10][tid];
      rr_r_10 *= mole_frac_NC_HO2;
      double mole_frac_NC_C4H7 = scratch[26][tid];
      rr_r_10 *= mole_frac_NC_C4H7;
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_11 *= mole_frac_NC_H;
      double mole_frac_NC_C2H3CHO = scratch[37][tid];
      rr_f_11 *= mole_frac_NC_C2H3CHO;
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_r_11 *= mole_frac_NC_H2;
      double mole_frac_NC_C2H3CO = scratch[36][tid];
      rr_r_11 *= mole_frac_NC_C2H3CO;
    }
    else if (wid == 12)
    {
      double mole_frac_NC_PC4H9 = scratch[28][tid];
      rr_f_10 *= mole_frac_NC_PC4H9;
      double mole_frac_NC_C2H4 = scratch[14][tid];
      rr_r_10 *= mole_frac_NC_C2H4;
      double mole_frac_NC_C2H5 = scratch[15][tid];
      rr_r_10 *= mole_frac_NC_C2H5;
      double mole_frac_NC_O = scratch[2][tid];
      rr_f_11 *= mole_frac_NC_O;
      double mole_frac_NC_C2H3CHO = scratch[37][tid];
      rr_f_11 *= mole_frac_NC_C2H3CHO;
      double mole_frac_NC_OH = scratch[4][tid];
      rr_r_11 *= mole_frac_NC_OH;
      double mole_frac_NC_C2H3CO = scratch[36][tid];
      rr_r_11 *= mole_frac_NC_C2H3CO;
    }
    else if (wid == 13)
    {
      double mole_frac_NC_PC4H9 = scratch[28][tid];
      rr_f_10 *= mole_frac_NC_PC4H9;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_10 *= mole_frac_NC_H;
      double mole_frac_NC_C4H8_1 = scratch[27][tid];
      rr_r_10 *= mole_frac_NC_C4H8_1;
      double mole_frac_NC_HO2 = scratch[10][tid];
      rr_f_11 *= mole_frac_NC_HO2;
      double mole_frac_NC_C2H3CHO = scratch[37][tid];
      rr_f_11 *= mole_frac_NC_C2H3CHO;
      double mole_frac_NC_H2O2 = scratch[11][tid];
      rr_r_11 *= mole_frac_NC_H2O2;
      double mole_frac_NC_C2H3CO = scratch[36][tid];
      rr_r_11 *= mole_frac_NC_C2H3CO;
    }
    else if (wid == 14)
    {
      double mole_frac_NC_CH3COCH2 = scratch[29][tid];
      rr_f_10 *= mole_frac_NC_CH3COCH2;
      double mole_frac_NC_CH3 = scratch[8][tid];
      rr_r_10 *= mole_frac_NC_CH3;
      double mole_frac_NC_CH2CO = scratch[19][tid];
      rr_r_10 *= mole_frac_NC_CH2CO;
      rr_f_11 *= mole_frac_NC_CH3;
      double mole_frac_NC_C2H3CHO = scratch[37][tid];
      rr_f_11 *= mole_frac_NC_C2H3CHO;
      double mole_frac_NC_CH4 = scratch[9][tid];
      rr_r_11 *= mole_frac_NC_CH4;
      double mole_frac_NC_C2H3CO = scratch[36][tid];
      rr_r_11 *= mole_frac_NC_C2H3CO;
    }
    else if (wid == 15)
    {
      double mole_frac_NC_C5H10_1 = scratch[32][tid];
      rr_f_10 *= mole_frac_NC_C5H10_1;
      double mole_frac_NC_C2H5 = scratch[15][tid];
      rr_r_10 *= mole_frac_NC_C2H5;
      double mole_frac_NC_C3H5_A = scratch[38][tid];
      rr_r_10 *= mole_frac_NC_C3H5_A;
      double mole_frac_NC_CH3O2 = scratch[34][tid];
      rr_f_11 *= mole_frac_NC_CH3O2;
      double mole_frac_NC_C2H3CHO = scratch[37][tid];
      rr_f_11 *= mole_frac_NC_C2H3CHO;
      double mole_frac_NC_CH3O2H = scratch[35][tid];
      rr_r_11 *= mole_frac_NC_CH3O2H;
      double mole_frac_NC_C2H3CO = scratch[36][tid];
      rr_r_11 *= mole_frac_NC_C2H3CO;
    }
    else if (wid == 16)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_10 *= mole_frac_NC_H;
      double mole_frac_NC_C5H10_1 = scratch[32][tid];
      rr_f_10 *= mole_frac_NC_C5H10_1;
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_r_10 *= mole_frac_NC_H2;
      double mole_frac_NC_C5H9 = scratch[31][tid];
      rr_r_10 *= mole_frac_NC_C5H9;
      double mole_frac_NC_O = scratch[2][tid];
      rr_f_11 *= mole_frac_NC_O;
      double mole_frac_NC_C4H8_1 = scratch[27][tid];
      rr_f_11 *= mole_frac_NC_C4H8_1;
      double mole_frac_NC_CH2O = scratch[12][tid];
      rr_r_11 *= mole_frac_NC_CH2O;
      double mole_frac_NC_C3H6 = scratch[24][tid];
      rr_r_11 *= mole_frac_NC_C3H6;
    }
    else if (wid == 17)
    {
      double mole_frac_NC_O = scratch[2][tid];
      rr_f_10 *= mole_frac_NC_O;
      double mole_frac_NC_C5H10_1 = scratch[32][tid];
      rr_f_10 *= mole_frac_NC_C5H10_1;
      double mole_frac_NC_OH = scratch[4][tid];
      rr_r_10 *= mole_frac_NC_OH;
      double mole_frac_NC_C5H9 = scratch[31][tid];
      rr_r_10 *= mole_frac_NC_C5H9;
      rr_f_11 *= mole_frac_NC_O;
      double mole_frac_NC_C4H8_1 = scratch[27][tid];
      rr_f_11 *= mole_frac_NC_C4H8_1;
      double mole_frac_NC_C2H4 = scratch[14][tid];
      rr_r_11 *= mole_frac_NC_C2H4;
      double mole_frac_NC_CH3CHO = scratch[21][tid];
      rr_r_11 *= mole_frac_NC_CH3CHO;
    }
    else if (wid == 18)
    {
      double mole_frac_NC_OH = scratch[4][tid];
      rr_f_10 *= mole_frac_NC_OH;
      double mole_frac_NC_C5H10_1 = scratch[32][tid];
      rr_f_10 *= mole_frac_NC_C5H10_1;
      double mole_frac_NC_H2O = scratch[5][tid];
      rr_r_10 *= mole_frac_NC_H2O;
      double mole_frac_NC_C5H9 = scratch[31][tid];
      rr_r_10 *= mole_frac_NC_C5H9;
      rr_f_11 *= mole_frac_NC_OH;
      double mole_frac_NC_C4H8_1 = scratch[27][tid];
      rr_f_11 *= mole_frac_NC_C4H8_1;
      double mole_frac_NC_C2H5 = scratch[15][tid];
      rr_r_11 *= mole_frac_NC_C2H5;
      double mole_frac_NC_CH3CHO = scratch[21][tid];
      rr_r_11 *= mole_frac_NC_CH3CHO;
    }
    else if (wid == 19)
    {
      double mole_frac_NC_OH = scratch[4][tid];
      rr_f_10 *= mole_frac_NC_OH;
      double mole_frac_NC_C5H10_1 = scratch[32][tid];
      rr_f_10 *= mole_frac_NC_C5H10_1;
      double mole_frac_NC_CH2O = scratch[12][tid];
      rr_r_10 *= mole_frac_NC_CH2O;
      double mole_frac_NC_PC4H9 = scratch[28][tid];
      rr_r_10 *= mole_frac_NC_PC4H9;
      rr_f_11 *= mole_frac_NC_OH;
      double mole_frac_NC_C4H8_1 = scratch[27][tid];
      rr_f_11 *= mole_frac_NC_C4H8_1;
      double mole_frac_NC_CH3 = scratch[8][tid];
      rr_r_11 *= mole_frac_NC_CH3;
      double mole_frac_NC_C2H5CHO = scratch[30][tid];
      rr_r_11 *= mole_frac_NC_C2H5CHO;
    }
    double rr_f_12 = rr_f_11,  rr_r_12 = rr_r_11;
    /* Chemistry for level 12 */
    {
      {
        if (tid == 8)
          real_mirror[wid] = real_constants[2];
        double arrhenius = real_mirror[wid] * vlntemp;
        if (tid == 9)
          real_mirror[wid] = real_constants[2];
        arrhenius = __fma_rn(real_mirror[wid],  ortc,  arrhenius);
        arrhenius = exp(arrhenius);
        if (tid == 10)
          real_mirror[wid] = real_constants[2];
        rr_f_12 = real_mirror[wid] * arrhenius;
      }
      {
        if (tid == 11)
          real_mirror[wid] = real_constants[2];
        double arrhenius = real_mirror[wid] * vlntemp;
        if (tid == 12)
          real_mirror[wid] = real_constants[2];
        arrhenius = __fma_rn(real_mirror[wid],  ortc,  arrhenius);
        arrhenius = exp(arrhenius);
        if (tid == 13)
          real_mirror[wid] = real_constants[2];
        rr_r_12 = real_mirror[wid] * arrhenius;
      }
    }
    double rr_f_13 = rr_f_12,  rr_r_13 = rr_r_12;
    /* Chemistry for level 13 */
    {
      {
        if (tid == 14)
          real_mirror[wid] = real_constants[2];
        double arrhenius = real_mirror[wid] * vlntemp;
        if (tid == 15)
          real_mirror[wid] = real_constants[2];
        arrhenius = __fma_rn(real_mirror[wid],  ortc,  arrhenius);
        arrhenius = exp(arrhenius);
        if (tid == 16)
          real_mirror[wid] = real_constants[2];
        rr_f_13 = real_mirror[wid] * arrhenius;
      }
      {
        if (tid == 17)
          real_mirror[wid] = real_constants[2];
        double arrhenius = real_mirror[wid] * vlntemp;
        if (tid == 18)
          real_mirror[wid] = real_constants[2];
        arrhenius = __fma_rn(real_mirror[wid],  ortc,  arrhenius);
        arrhenius = exp(arrhenius);
        if (tid == 19)
          real_mirror[wid] = real_constants[2];
        rr_r_13 = real_mirror[wid] * arrhenius;
      }
    }
    if (wid == 0)
    {
      double mole_frac_NC_HO2 = scratch[10][tid];
      rr_f_12 *= mole_frac_NC_HO2;
      double mole_frac_NC_C3H4_A = scratch[22][tid];
      rr_f_12 *= mole_frac_NC_C3H4_A;
      double mole_frac_NC_H2O2 = scratch[11][tid];
      rr_r_12 *= mole_frac_NC_H2O2;
      double mole_frac_NC_C3H3 = scratch[39][tid];
      rr_r_12 *= mole_frac_NC_C3H3;
      double mole_frac_NC_O2 = scratch[3][tid];
      rr_f_13 *= mole_frac_NC_O2;
      double mole_frac_NC_C3H5_A = scratch[38][tid];
      rr_f_13 *= mole_frac_NC_C3H5_A;
      double mole_frac_NC_OH = scratch[4][tid];
      rr_r_13 *= mole_frac_NC_OH;
      double mole_frac_NC_CH2O = scratch[12][tid];
      rr_r_13 *= mole_frac_NC_CH2O;
      double mole_frac_NC_C2H2 = scratch[17][tid];
      rr_r_13 *= mole_frac_NC_C2H2;
    }
    else if (wid == 1)
    {
      double mole_frac_NC_O2 = scratch[3][tid];
      rr_f_12 *= mole_frac_NC_O2;
      double mole_frac_NC_C3H6 = scratch[24][tid];
      rr_f_12 *= mole_frac_NC_C3H6;
      double mole_frac_NC_HO2 = scratch[10][tid];
      rr_r_12 *= mole_frac_NC_HO2;
      double mole_frac_NC_C3H5_A = scratch[38][tid];
      rr_r_12 *= mole_frac_NC_C3H5_A;
      rr_f_13 *= mole_frac_NC_O2;
      double mole_frac_NC_CH3 = scratch[8][tid];
      rr_f_13 *= mole_frac_NC_CH3;
      double mole_frac_NC_OH = scratch[4][tid];
      rr_r_13 *= mole_frac_NC_OH;
      double mole_frac_NC_CH2O = scratch[12][tid];
      rr_r_13 *= mole_frac_NC_CH2O;
    }
    else if (wid == 2)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_12 *= mole_frac_NC_H;
      double mole_frac_NC_C3H5_A = scratch[38][tid];
      rr_f_12 *= mole_frac_NC_C3H5_A;
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_r_12 *= mole_frac_NC_H2;
      double mole_frac_NC_C3H4_A = scratch[22][tid];
      rr_r_12 *= mole_frac_NC_C3H4_A;
      double mole_frac_NC_OH = scratch[4][tid];
      rr_f_13 *= mole_frac_NC_OH;
      double mole_frac_NC_CH3CHCO = scratch[42][tid];
      rr_f_13 *= mole_frac_NC_CH3CHCO;
      double mole_frac_NC_CO2 = scratch[7][tid];
      rr_r_13 *= mole_frac_NC_CO2;
      double mole_frac_NC_C2H5 = scratch[15][tid];
      rr_r_13 *= mole_frac_NC_C2H5;
    }
    else if (wid == 3)
    {
      double mole_frac_NC_CH3 = scratch[8][tid];
      rr_f_12 *= mole_frac_NC_CH3;
      double mole_frac_NC_C3H5_A = scratch[38][tid];
      rr_f_12 *= mole_frac_NC_C3H5_A;
      double mole_frac_NC_CH4 = scratch[9][tid];
      rr_r_12 *= mole_frac_NC_CH4;
      double mole_frac_NC_C3H4_A = scratch[22][tid];
      rr_r_12 *= mole_frac_NC_C3H4_A;
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_13 *= mole_frac_NC_H;
      double mole_frac_NC_CH3CHCO = scratch[42][tid];
      rr_f_13 *= mole_frac_NC_CH3CHCO;
      double mole_frac_NC_CO = scratch[6][tid];
      rr_r_13 *= mole_frac_NC_CO;
      double mole_frac_NC_C2H5 = scratch[15][tid];
      rr_r_13 *= mole_frac_NC_C2H5;
    }
    else if (wid == 4)
    {
      double mole_frac_NC_C2H5 = scratch[15][tid];
      rr_f_12 *= mole_frac_NC_C2H5;
      double mole_frac_NC_C3H5_A = scratch[38][tid];
      rr_f_12 *= mole_frac_NC_C3H5_A;
      double mole_frac_NC_C2H6 = scratch[13][tid];
      rr_r_12 *= mole_frac_NC_C2H6;
      double mole_frac_NC_C3H4_A = scratch[22][tid];
      rr_r_12 *= mole_frac_NC_C3H4_A;
      double mole_frac_NC_O = scratch[2][tid];
      rr_f_13 *= mole_frac_NC_O;
      double mole_frac_NC_CH3CHCO = scratch[42][tid];
      rr_f_13 *= mole_frac_NC_CH3CHCO;
      double mole_frac_NC_CO = scratch[6][tid];
      rr_r_13 *= mole_frac_NC_CO;
      double mole_frac_NC_CH3CHO = scratch[21][tid];
      rr_r_13 *= mole_frac_NC_CH3CHO;
    }
    else if (wid == 5)
    {
      double mole_frac_NC_C3H4_A = scratch[22][tid];
      rr_f_12 *= mole_frac_NC_C3H4_A;
      double mole_frac_NC_C3H6 = scratch[24][tid];
      rr_f_12 *= mole_frac_NC_C3H6;
      double mole_frac_NC_C3H5_A = scratch[38][tid];
      rr_r_12 *= mole_frac_NC_C3H5_A;
      rr_r_12 *= mole_frac_NC_C3H5_A;
      double mole_frac_NC_C2H5COCH2 = scratch[41][tid];
      rr_f_13 *= mole_frac_NC_C2H5COCH2;
      double mole_frac_NC_C2H5 = scratch[15][tid];
      rr_r_13 *= mole_frac_NC_C2H5;
      double mole_frac_NC_CH2CO = scratch[19][tid];
      rr_r_13 *= mole_frac_NC_CH2CO;
    }
    else if (wid == 6)
    {
      double mole_frac_NC_O2 = scratch[3][tid];
      rr_f_12 *= mole_frac_NC_O2;
      double mole_frac_NC_C3H5_A = scratch[38][tid];
      rr_f_12 *= mole_frac_NC_C3H5_A;
      double mole_frac_NC_OH = scratch[4][tid];
      rr_r_12 *= mole_frac_NC_OH;
      double mole_frac_NC_C2H3CHO = scratch[37][tid];
      rr_r_12 *= mole_frac_NC_C2H3CHO;
      rr_f_13 *= mole_frac_NC_OH;
      double mole_frac_NC_NC3H7COCH3 = scratch[43][tid];
      rr_f_13 *= mole_frac_NC_NC3H7COCH3;
      double mole_frac_NC_H2O = scratch[5][tid];
      rr_r_13 *= mole_frac_NC_H2O;
      double mole_frac_NC_NC3H7COCH2 = scratch[44][tid];
      rr_r_13 *= mole_frac_NC_NC3H7COCH2;
    }
    else if (wid == 7)
    {
      double mole_frac_NC_C3H4_A = scratch[22][tid];
      rr_f_12 *= mole_frac_NC_C3H4_A;
      double thb_0 = scratch[52][tid];
      rr_f_12 *= thb_0;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_12 *= mole_frac_NC_H;
      double mole_frac_NC_C3H3 = scratch[39][tid];
      rr_r_12 *= mole_frac_NC_C3H3;
      rr_r_12 *= thb_0;
      double mole_frac_NC_HO2 = scratch[10][tid];
      rr_f_13 *= mole_frac_NC_HO2;
      double mole_frac_NC_NC3H7COCH3 = scratch[43][tid];
      rr_f_13 *= mole_frac_NC_NC3H7COCH3;
      double mole_frac_NC_H2O2 = scratch[11][tid];
      rr_r_13 *= mole_frac_NC_H2O2;
      double mole_frac_NC_NC3H7COCH2 = scratch[44][tid];
      rr_r_13 *= mole_frac_NC_NC3H7COCH2;
    }
    else if (wid == 8)
    {
      double mole_frac_NC_C3H4_A = scratch[22][tid];
      rr_f_12 *= mole_frac_NC_C3H4_A;
      double mole_frac_NC_C3H4_P = scratch[23][tid];
      rr_r_12 *= mole_frac_NC_C3H4_P;
      double mole_frac_NC_CH3O2 = scratch[34][tid];
      rr_f_13 *= mole_frac_NC_CH3O2;
      double mole_frac_NC_NC3H7COCH3 = scratch[43][tid];
      rr_f_13 *= mole_frac_NC_NC3H7COCH3;
      double mole_frac_NC_CH3O2H = scratch[35][tid];
      rr_r_13 *= mole_frac_NC_CH3O2H;
      double mole_frac_NC_NC3H7COCH2 = scratch[44][tid];
      rr_r_13 *= mole_frac_NC_NC3H7COCH2;
    }
    else if (wid == 9)
    {
      double mole_frac_NC_O2 = scratch[3][tid];
      rr_f_12 *= mole_frac_NC_O2;
      double mole_frac_NC_C3H4_A = scratch[22][tid];
      rr_f_12 *= mole_frac_NC_C3H4_A;
      double mole_frac_NC_HO2 = scratch[10][tid];
      rr_r_12 *= mole_frac_NC_HO2;
      double mole_frac_NC_C3H3 = scratch[39][tid];
      rr_r_12 *= mole_frac_NC_C3H3;
      double mole_frac_NC_NC7H16 = scratch[45][tid];
      rr_f_13 *= mole_frac_NC_NC7H16;
      double mole_frac_NC_C2H5 = scratch[15][tid];
      rr_r_13 *= mole_frac_NC_C2H5;
      double mole_frac_NC_C5H11_1 = scratch[33][tid];
      rr_r_13 *= mole_frac_NC_C5H11_1;
    }
    else if (wid == 10)
    {
      double mole_frac_NC_OH = scratch[4][tid];
      rr_f_12 *= mole_frac_NC_OH;
      double mole_frac_NC_C3H4_A = scratch[22][tid];
      rr_f_12 *= mole_frac_NC_C3H4_A;
      double mole_frac_NC_H2O = scratch[5][tid];
      rr_r_12 *= mole_frac_NC_H2O;
      double mole_frac_NC_C3H3 = scratch[39][tid];
      rr_r_12 *= mole_frac_NC_C3H3;
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_13 *= mole_frac_NC_H;
      double mole_frac_NC_NC7H16 = scratch[45][tid];
      rr_f_13 *= mole_frac_NC_NC7H16;
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_r_13 *= mole_frac_NC_H2;
      double mole_frac_NC_C7H15_1 = scratch[46][tid];
      rr_r_13 *= mole_frac_NC_C7H15_1;
    }
    else if (wid == 11)
    {
      double mole_frac_NC_C3H5_A = scratch[38][tid];
      rr_f_12 *= mole_frac_NC_C3H5_A;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_12 *= mole_frac_NC_H;
      double mole_frac_NC_C3H4_A = scratch[22][tid];
      rr_r_12 *= mole_frac_NC_C3H4_A;
      double mole_frac_NC_O = scratch[2][tid];
      rr_f_13 *= mole_frac_NC_O;
      double mole_frac_NC_NC7H16 = scratch[45][tid];
      rr_f_13 *= mole_frac_NC_NC7H16;
      double mole_frac_NC_OH = scratch[4][tid];
      rr_r_13 *= mole_frac_NC_OH;
      double mole_frac_NC_C7H15_1 = scratch[46][tid];
      rr_r_13 *= mole_frac_NC_C7H15_1;
    }
    else if (wid == 12)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_12 *= mole_frac_NC_H;
      double mole_frac_NC_C3H4_A = scratch[22][tid];
      rr_f_12 *= mole_frac_NC_C3H4_A;
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_r_12 *= mole_frac_NC_H2;
      double mole_frac_NC_C3H3 = scratch[39][tid];
      rr_r_12 *= mole_frac_NC_C3H3;
      double mole_frac_NC_OH = scratch[4][tid];
      rr_f_13 *= mole_frac_NC_OH;
      double mole_frac_NC_NC7H16 = scratch[45][tid];
      rr_f_13 *= mole_frac_NC_NC7H16;
      double mole_frac_NC_H2O = scratch[5][tid];
      rr_r_13 *= mole_frac_NC_H2O;
      double mole_frac_NC_C7H15_1 = scratch[46][tid];
      rr_r_13 *= mole_frac_NC_C7H15_1;
    }
    else if (wid == 13)
    {
      double mole_frac_NC_C3H4_P = scratch[23][tid];
      rr_f_12 *= mole_frac_NC_C3H4_P;
      double thb_0 = scratch[52][tid];
      rr_f_12 *= thb_0;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_12 *= mole_frac_NC_H;
      double mole_frac_NC_C3H3 = scratch[39][tid];
      rr_r_12 *= mole_frac_NC_C3H3;
      rr_r_12 *= thb_0;
      double mole_frac_NC_HO2 = scratch[10][tid];
      rr_f_13 *= mole_frac_NC_HO2;
      double mole_frac_NC_NC7H16 = scratch[45][tid];
      rr_f_13 *= mole_frac_NC_NC7H16;
      double mole_frac_NC_H2O2 = scratch[11][tid];
      rr_r_13 *= mole_frac_NC_H2O2;
      double mole_frac_NC_C7H15_1 = scratch[46][tid];
      rr_r_13 *= mole_frac_NC_C7H15_1;
    }
    else if (wid == 14)
    {
      double mole_frac_NC_C3H4_P = scratch[23][tid];
      rr_f_12 *= mole_frac_NC_C3H4_P;
      double mole_frac_NC_CH3 = scratch[8][tid];
      rr_r_12 *= mole_frac_NC_CH3;
      double mole_frac_NC_C2H = scratch[16][tid];
      rr_r_12 *= mole_frac_NC_C2H;
      rr_f_13 *= mole_frac_NC_CH3;
      double mole_frac_NC_NC7H16 = scratch[45][tid];
      rr_f_13 *= mole_frac_NC_NC7H16;
      double mole_frac_NC_CH4 = scratch[9][tid];
      rr_r_13 *= mole_frac_NC_CH4;
      double mole_frac_NC_C7H15_1 = scratch[46][tid];
      rr_r_13 *= mole_frac_NC_C7H15_1;
    }
    else if (wid == 15)
    {
      double mole_frac_NC_O2 = scratch[3][tid];
      rr_f_12 *= mole_frac_NC_O2;
      double mole_frac_NC_C3H4_P = scratch[23][tid];
      rr_f_12 *= mole_frac_NC_C3H4_P;
      double mole_frac_NC_HO2 = scratch[10][tid];
      rr_r_12 *= mole_frac_NC_HO2;
      double mole_frac_NC_C3H3 = scratch[39][tid];
      rr_r_12 *= mole_frac_NC_C3H3;
      rr_f_13 *= mole_frac_NC_O2;
      double mole_frac_NC_NC7H16 = scratch[45][tid];
      rr_f_13 *= mole_frac_NC_NC7H16;
      rr_r_13 *= mole_frac_NC_HO2;
      double mole_frac_NC_C7H15_1 = scratch[46][tid];
      rr_r_13 *= mole_frac_NC_C7H15_1;
    }
    else if (wid == 16)
    {
      double mole_frac_NC_OH = scratch[4][tid];
      rr_f_12 *= mole_frac_NC_OH;
      double mole_frac_NC_C3H4_P = scratch[23][tid];
      rr_f_12 *= mole_frac_NC_C3H4_P;
      double mole_frac_NC_H2O = scratch[5][tid];
      rr_r_12 *= mole_frac_NC_H2O;
      double mole_frac_NC_C3H3 = scratch[39][tid];
      rr_r_12 *= mole_frac_NC_C3H3;
      double mole_frac_NC_C2H5 = scratch[15][tid];
      rr_f_13 *= mole_frac_NC_C2H5;
      double mole_frac_NC_NC7H16 = scratch[45][tid];
      rr_f_13 *= mole_frac_NC_NC7H16;
      double mole_frac_NC_C2H6 = scratch[13][tid];
      rr_r_13 *= mole_frac_NC_C2H6;
      double mole_frac_NC_C7H15_1 = scratch[46][tid];
      rr_r_13 *= mole_frac_NC_C7H15_1;
    }
    else if (wid == 17)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_12 *= mole_frac_NC_H;
      double mole_frac_NC_C3H4_P = scratch[23][tid];
      rr_f_12 *= mole_frac_NC_C3H4_P;
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_r_12 *= mole_frac_NC_H2;
      double mole_frac_NC_C3H3 = scratch[39][tid];
      rr_r_12 *= mole_frac_NC_C3H3;
      double mole_frac_NC_CH3O2 = scratch[34][tid];
      rr_f_13 *= mole_frac_NC_CH3O2;
      double mole_frac_NC_NC7H16 = scratch[45][tid];
      rr_f_13 *= mole_frac_NC_NC7H16;
      double mole_frac_NC_CH3O2H = scratch[35][tid];
      rr_r_13 *= mole_frac_NC_CH3O2H;
      double mole_frac_NC_C7H15_1 = scratch[46][tid];
      rr_r_13 *= mole_frac_NC_C7H15_1;
    }
    else if (wid == 18)
    {
      double mole_frac_NC_O = scratch[2][tid];
      rr_f_12 *= mole_frac_NC_O;
      double mole_frac_NC_C3H3 = scratch[39][tid];
      rr_f_12 *= mole_frac_NC_C3H3;
      double mole_frac_NC_CH2O = scratch[12][tid];
      rr_r_12 *= mole_frac_NC_CH2O;
      double mole_frac_NC_C2H = scratch[16][tid];
      rr_r_12 *= mole_frac_NC_C2H;
      double mole_frac_NC_C7H15_1 = scratch[46][tid];
      rr_f_13 *= mole_frac_NC_C7H15_1;
      double mole_frac_NC_C2H4 = scratch[14][tid];
      rr_r_13 *= mole_frac_NC_C2H4;
      double mole_frac_NC_C5H11_1 = scratch[33][tid];
      rr_r_13 *= mole_frac_NC_C5H11_1;
    }
    else if (wid == 19)
    {
      double mole_frac_NC_O2 = scratch[3][tid];
      rr_f_12 *= mole_frac_NC_O2;
      double mole_frac_NC_C3H5_A = scratch[38][tid];
      rr_f_12 *= mole_frac_NC_C3H5_A;
      double mole_frac_NC_HO2 = scratch[10][tid];
      rr_r_12 *= mole_frac_NC_HO2;
      double mole_frac_NC_C3H4_A = scratch[22][tid];
      rr_r_12 *= mole_frac_NC_C3H4_A;
      double mole_frac_NC_C7H14OOHO2 = scratch[48][tid];
      rr_f_13 *= mole_frac_NC_C7H14OOHO2;
    }
    double rr_f_14 = rr_f_13,  rr_r_14 = rr_r_13;
    /* Chemistry for level 14 */
    if (wid < 3)
    {
      {
        if (tid == 20)
          real_mirror[wid] = real_constants[2];
        double arrhenius = real_mirror[wid] * vlntemp;
        if (tid == 21)
          real_mirror[wid] = real_constants[2];
        arrhenius = __fma_rn(real_mirror[wid],  ortc,  arrhenius);
        arrhenius = exp(arrhenius);
        if (tid == 22)
          real_mirror[wid] = real_constants[2];
        rr_f_14 = real_mirror[wid] * arrhenius;
      }
      {
        if (tid == 23)
          real_mirror[wid] = real_constants[2];
        double arrhenius = real_mirror[wid] * vlntemp;
        if (tid == 24)
          real_mirror[wid] = real_constants[2];
        arrhenius = __fma_rn(real_mirror[wid],  ortc,  arrhenius);
        arrhenius = exp(arrhenius);
        if (tid == 25)
          real_mirror[wid] = real_constants[2];
        rr_r_14 = real_mirror[wid] * arrhenius;
      }
    }
    if (wid == 0)
    {
      double mole_frac_NC_NC7KET = scratch[50][tid];
      rr_f_14 *= mole_frac_NC_NC7KET;
    }
    else if (wid == 1)
    {
      double mole_frac_NC_NC7KET = scratch[50][tid];
      rr_f_14 *= mole_frac_NC_NC7KET;
    }
    else if (wid == 2)
    {
      double mole_frac_NC_NC7KET = scratch[50][tid];
      rr_f_14 *= mole_frac_NC_NC7KET;
    }
    else if (wid == 3)
    {
    }
    else if (wid == 4)
    {
    }
    else if (wid == 5)
    {
    }
    else if (wid == 6)
    {
    }
    else if (wid == 7)
    {
    }
    else if (wid == 8)
    {
    }
    else if (wid == 9)
    {
    }
    else if (wid == 10)
    {
    }
    else if (wid == 11)
    {
    }
    else if (wid == 12)
    {
    }
    else if (wid == 13)
    {
    }
    else if (wid == 14)
    {
    }
    else if (wid == 15)
    {
    }
    else if (wid == 16)
    {
    }
    else if (wid == 17)
    {
    }
    else if (wid == 18)
    {
    }
    else if (wid == 19)
    {
    }
    /* QSSA scaling */
    asm volatile("bar.sync 0, 640;" : : : "memory");
    if (wid == 0)
    {
      double xq_0 = scratch[77][tid];
      rr_r_1 *= xq_0;
      double xq_2 = scratch[79][tid];
      rr_f_2 *= xq_2;
      double xq_6 = scratch[83][tid];
      rr_f_3 *= xq_6;
      double xq_7 = scratch[84][tid];
      rr_f_4 *= xq_7;
      double xq_8 = scratch[85][tid];
      rr_f_5 *= xq_8;
      double xq_4 = scratch[81][tid];
      rr_r_5 *= xq_4;
      double xq_12 = scratch[89][tid];
      rr_f_6 *= xq_12;
      double xq_15 = scratch[92][tid];
      rr_f_7 *= xq_15;
    }
    else if (wid == 1)
    {
      double xq_0 = scratch[77][tid];
      rr_r_1 *= xq_0;
      double xq_6 = scratch[83][tid];
      rr_f_3 *= xq_6;
      double xq_4 = scratch[81][tid];
      rr_r_4 *= xq_4;
      double xq_8 = scratch[85][tid];
      rr_f_5 *= xq_8;
      double xq_5 = scratch[82][tid];
      rr_r_5 *= xq_5;
      double xq_12 = scratch[89][tid];
      rr_f_6 *= xq_12;
      double xq_15 = scratch[92][tid];
      rr_f_7 *= xq_15;
    }
    else if (wid == 2)
    {
      double xq_1 = scratch[78][tid];
      rr_r_1 *= xq_1;
      rr_f_2 *= xq_1;
      double xq_0 = scratch[77][tid];
      rr_r_2 *= xq_0;
      double xq_2 = scratch[79][tid];
      rr_r_3 *= xq_2;
      rr_r_4 *= xq_2;
      double xq_5 = scratch[82][tid];
      rr_f_5 *= xq_5;
      double xq_14 = scratch[91][tid];
      rr_r_6 *= xq_14;
      double xq_15 = scratch[92][tid];
      rr_f_7 *= xq_15;
    }
    else if (wid == 3)
    {
      double xq_0 = scratch[77][tid];
      rr_r_1 *= xq_0;
      double xq_2 = scratch[79][tid];
      rr_f_2 *= xq_2;
      rr_r_3 *= xq_2;
      double xq_9 = scratch[86][tid];
      rr_f_4 *= xq_9;
      double xq_5 = scratch[82][tid];
      rr_f_5 *= xq_5;
      double xq_6 = scratch[83][tid];
      rr_r_6 *= xq_6;
      double xq_15 = scratch[92][tid];
      rr_f_7 *= xq_15;
    }
    else if (wid == 4)
    {
      double xq_0 = scratch[77][tid];
      rr_f_1 *= xq_0;
      double xq_1 = scratch[78][tid];
      rr_r_2 *= xq_1;
      rr_r_3 *= xq_0;
      double xq_9 = scratch[86][tid];
      rr_f_4 *= xq_9;
      double xq_2 = scratch[79][tid];
      rr_r_4 *= xq_2;
      double xq_5 = scratch[82][tid];
      rr_r_5 *= xq_5;
      double xq_14 = scratch[91][tid];
      rr_r_6 *= xq_14;
      double xq_15 = scratch[92][tid];
      rr_r_7 *= xq_15;
    }
    else if (wid == 5)
    {
      double xq_0 = scratch[77][tid];
      rr_f_1 *= xq_0;
      double xq_2 = scratch[79][tid];
      rr_f_2 *= xq_2;
      rr_r_2 *= xq_0;
      rr_r_3 *= xq_0;
      double xq_9 = scratch[86][tid];
      rr_f_4 *= xq_9;
      rr_r_5 *= xq_0;
      double xq_14 = scratch[91][tid];
      rr_r_6 *= xq_14;
      double xq_4 = scratch[81][tid];
      rr_r_7 *= xq_4;
    }
    else if (wid == 6)
    {
      double xq_1 = scratch[78][tid];
      rr_f_0 *= xq_1;
      rr_f_1 *= xq_1;
      double xq_2 = scratch[79][tid];
      rr_r_2 *= xq_2;
      double xq_0 = scratch[77][tid];
      rr_f_3 *= xq_0;
      double xq_9 = scratch[86][tid];
      rr_r_4 *= xq_9;
      double xq_3 = scratch[80][tid];
      rr_r_5 *= xq_3;
      double xq_14 = scratch[91][tid];
      rr_r_6 *= xq_14;
      double xq_13 = scratch[90][tid];
      rr_r_7 *= xq_13;
    }
    else if (wid == 7)
    {
      double xq_0 = scratch[77][tid];
      rr_f_1 *= xq_0;
      rr_r_2 *= xq_0;
      double xq_5 = scratch[82][tid];
      rr_r_3 *= xq_5;
      double xq_13 = scratch[90][tid];
      rr_r_5 *= xq_13;
      double xq_14 = scratch[91][tid];
      rr_r_6 *= xq_14;
    }
    else if (wid == 8)
    {
      double xq_0 = scratch[77][tid];
      rr_r_1 *= xq_0;
      double xq_4 = scratch[81][tid];
      rr_r_2 *= xq_4;
      double xq_2 = scratch[79][tid];
      rr_f_3 *= xq_2;
      double xq_12 = scratch[89][tid];
      rr_r_4 *= xq_12;
      double xq_13 = scratch[90][tid];
      rr_r_5 *= xq_13;
      double xq_14 = scratch[91][tid];
      rr_r_6 *= xq_14;
    }
    else if (wid == 9)
    {
      double xq_2 = scratch[79][tid];
      rr_r_0 *= xq_2;
      rr_r_1 *= xq_2;
      double xq_4 = scratch[81][tid];
      rr_r_2 *= xq_4;
      double xq_6 = scratch[83][tid];
      rr_r_3 *= xq_6;
      double xq_3 = scratch[80][tid];
      rr_r_4 *= xq_3;
      double xq_13 = scratch[90][tid];
      rr_r_5 *= xq_13;
      double xq_14 = scratch[91][tid];
      rr_r_6 *= xq_14;
    }
    else if (wid == 10)
    {
      double xq_3 = scratch[80][tid];
      rr_f_0 *= xq_3;
      double xq_2 = scratch[79][tid];
      rr_r_1 *= xq_2;
      double xq_4 = scratch[81][tid];
      rr_r_2 *= xq_4;
      double xq_7 = scratch[84][tid];
      rr_f_3 *= xq_7;
      double xq_10 = scratch[87][tid];
      rr_f_4 *= xq_10;
      rr_r_4 *= xq_2;
      double xq_13 = scratch[90][tid];
      rr_r_5 *= xq_13;
      double xq_14 = scratch[91][tid];
      rr_r_6 *= xq_14;
    }
    else if (wid == 11)
    {
      double xq_4 = scratch[81][tid];
      rr_f_0 *= xq_4;
      double xq_0 = scratch[77][tid];
      rr_r_1 *= xq_0;
      rr_r_2 *= xq_4;
      double xq_2 = scratch[79][tid];
      rr_f_3 *= xq_2;
      double xq_5 = scratch[82][tid];
      rr_r_3 *= xq_5;
      double xq_10 = scratch[87][tid];
      rr_f_4 *= xq_10;
      double xq_13 = scratch[90][tid];
      rr_r_5 *= xq_13;
      double xq_1 = scratch[78][tid];
      rr_f_6 *= xq_1;
    }
    else if (wid == 12)
    {
      double xq_0 = scratch[77][tid];
      rr_f_0 *= xq_0;
      double xq_3 = scratch[80][tid];
      rr_r_1 *= xq_3;
      double xq_4 = scratch[81][tid];
      rr_r_2 *= xq_4;
      double xq_1 = scratch[78][tid];
      rr_r_3 *= xq_1;
      double xq_10 = scratch[87][tid];
      rr_r_4 *= xq_10;
      double xq_13 = scratch[90][tid];
      rr_r_5 *= xq_13;
      rr_f_6 *= xq_1;
      double xq_14 = scratch[91][tid];
      rr_r_6 *= xq_14;
    }
    else if (wid == 13)
    {
      double xq_0 = scratch[77][tid];
      rr_f_0 *= xq_0;
      double xq_1 = scratch[78][tid];
      rr_r_1 *= xq_1;
      double xq_4 = scratch[81][tid];
      rr_r_2 *= xq_4;
      double xq_11 = scratch[88][tid];
      rr_f_3 *= xq_11;
      rr_f_5 *= xq_1;
      double xq_13 = scratch[90][tid];
      rr_r_5 *= xq_13;
      double xq_14 = scratch[91][tid];
      rr_r_6 *= xq_14;
    }
    else if (wid == 14)
    {
      double xq_0 = scratch[77][tid];
      rr_r_0 *= xq_0;
      double xq_3 = scratch[80][tid];
      rr_r_1 *= xq_3;
      double xq_2 = scratch[79][tid];
      rr_r_2 *= xq_2;
      rr_r_3 *= xq_0;
      double xq_6 = scratch[83][tid];
      rr_r_4 *= xq_6;
      double xq_13 = scratch[90][tid];
      rr_r_5 *= xq_13;
      double xq_14 = scratch[91][tid];
      rr_f_6 *= xq_14;
    }
    else if (wid == 15)
    {
      double xq_3 = scratch[80][tid];
      rr_r_0 *= xq_3;
      rr_r_1 *= xq_3;
      double xq_0 = scratch[77][tid];
      rr_r_2 *= xq_0;
      double xq_2 = scratch[79][tid];
      rr_r_3 *= xq_2;
      double xq_4 = scratch[81][tid];
      rr_r_4 *= xq_4;
      double xq_13 = scratch[90][tid];
      rr_f_5 *= xq_13;
      double xq_6 = scratch[83][tid];
      rr_r_5 *= xq_6;
      double xq_14 = scratch[91][tid];
      rr_f_6 *= xq_14;
      rr_r_6 *= xq_6;
    }
    else if (wid == 16)
    {
      double xq_1 = scratch[78][tid];
      rr_r_0 *= xq_1;
      double xq_3 = scratch[80][tid];
      rr_f_1 *= xq_3;
      double xq_7 = scratch[84][tid];
      rr_r_3 *= xq_7;
      double xq_4 = scratch[81][tid];
      rr_r_4 *= xq_4;
      double xq_6 = scratch[83][tid];
      rr_r_5 *= xq_6;
      double xq_14 = scratch[91][tid];
      rr_f_6 *= xq_14;
    }
    else if (wid == 17)
    {
      double xq_0 = scratch[77][tid];
      rr_f_0 *= xq_0;
      double xq_2 = scratch[79][tid];
      rr_f_1 *= xq_2;
      rr_r_2 *= xq_2;
      double xq_11 = scratch[88][tid];
      rr_r_4 *= xq_11;
      double xq_12 = scratch[89][tid];
      rr_f_5 *= xq_12;
      double xq_14 = scratch[91][tid];
      rr_r_6 *= xq_14;
    }
    else if (wid == 18)
    {
      double xq_0 = scratch[77][tid];
      rr_r_0 *= xq_0;
      double xq_2 = scratch[79][tid];
      rr_r_2 *= xq_2;
      double xq_11 = scratch[88][tid];
      rr_r_4 *= xq_11;
      double xq_12 = scratch[89][tid];
      rr_f_5 *= xq_12;
      double xq_14 = scratch[91][tid];
      rr_r_6 *= xq_14;
    }
    else if (wid == 19)
    {
      double xq_0 = scratch[77][tid];
      rr_r_0 *= xq_0;
      double xq_12 = scratch[89][tid];
      rr_r_1 *= xq_12;
      double xq_6 = scratch[83][tid];
      rr_f_2 *= xq_6;
      rr_r_4 *= xq_0;
      rr_f_5 *= xq_12;
      double xq_15 = scratch[92][tid];
      rr_r_6 *= xq_15;
    }
    /* Stiffness */
    double stif_diffusion_0;
    double stif_mole_frac_0;
    {
      if (tid == 0)
        int_mirror[wid] = index_constants[0];
      int index = int_mirror[wid];
      asm volatile("ld.global.cg.f64 %0,  [%1];" : "=d"(stif_diffusion_0) : 
        "l"(diffusion_array+index*spec_stride) : "memory"); 
      stif_mole_frac_0 = scratch[index][tid];
    }
    double stif_diffusion_1;
    double stif_mole_frac_1;
    {
      if (tid == 1)
        int_mirror[wid] = index_constants[0];
      int index = int_mirror[wid];
      asm volatile("ld.global.cg.f64 %0,  [%1];" : "=d"(stif_diffusion_1) : 
        "l"(diffusion_array+index*spec_stride) : "memory"); 
      stif_mole_frac_1 = scratch[index][tid];
    }
    double ddot_0 = 0.0;
    double cdot_0 = 0.0;
    double ddot_1 = 0.0;
    double cdot_1 = 0.0;
    asm volatile("bar.sync 0, 640;" : : : "memory");
    scratch[wid+0][tid] = rr_f_0;
    scratch[wid+20][tid] = rr_r_0;
    scratch[wid+40][tid] = rr_f_1;
    scratch[wid+60][tid] = rr_r_1;
    scratch[wid+80][tid] = rr_f_2;
    scratch[wid+100][tid] = rr_r_2;
    scratch[wid+120][tid] = rr_f_3;
    scratch[wid+140][tid] = rr_r_3;
    asm volatile("bar.sync 0, 640;" : : : "memory");
    if (wid == 0)
    {
      double forward_145 = scratch[129][tid];
      ddot_1 += forward_145;
      double backward_145 = scratch[149][tid];
      cdot_1 += backward_145;
    }
    else if (wid == 1)
    {
      double backward_136 = scratch[145][tid];
      ddot_0 += backward_136;
      double forward_132 = scratch[124][tid];
      ddot_1 += forward_132;
      double backward_132 = scratch[144][tid];
      cdot_1 += backward_132;
    }
    else if (wid == 2)
    {
    }
    else if (wid == 3)
    {
      double forward_59 = scratch[51][tid];
      ddot_0 += forward_59;
      double backward_59 = scratch[71][tid];
      cdot_0 += backward_59;
    }
    else if (wid == 4)
    {
    }
    else if (wid == 5)
    {
      double forward_136 = scratch[125][tid];
      ddot_0 += forward_136;
    }
    else if (wid == 6)
    {
    }
    else if (wid == 7)
    {
      double forward_151 = scratch[132][tid];
      ddot_0 += forward_151;
      double backward_153 = scratch[154][tid];
      ddot_0 += backward_153;
      double backward_154 = scratch[155][tid];
      ddot_0 += backward_154;
      double forward_153 = scratch[134][tid];
      cdot_0 += forward_153;
      double forward_154 = scratch[135][tid];
      cdot_0 += forward_154;
      double backward_151 = scratch[152][tid];
      cdot_0 += backward_151;
    }
    else if (wid == 8)
    {
      double forward_117 = scratch[122][tid];
      ddot_0 += forward_117;
      double backward_117 = scratch[142][tid];
      cdot_0 += backward_117;
    }
    else if (wid == 9)
    {
      double forward_124 = scratch[123][tid];
      ddot_0 += forward_124;
      double backward_124 = scratch[143][tid];
      cdot_0 += backward_124;
    }
    else if (wid == 10)
    {
      double forward_87 = scratch[87][tid];
      ddot_0 += forward_87;
      double forward_88 = scratch[88][tid];
      ddot_0 += forward_88;
      double forward_89 = scratch[89][tid];
      ddot_0 += forward_89;
      double forward_90 = scratch[90][tid];
      ddot_0 += forward_90;
      double forward_91 = scratch[91][tid];
      ddot_0 += forward_91;
      double forward_92 = scratch[92][tid];
      ddot_0 += forward_92;
      double forward_93 = scratch[93][tid];
      ddot_0 += forward_93;
      double backward_105 = scratch[117][tid];
      ddot_0 += backward_105;
      double forward_105 = scratch[97][tid];
      cdot_0 += forward_105;
      double backward_87 = scratch[107][tid];
      cdot_0 += backward_87;
      double backward_88 = scratch[108][tid];
      cdot_0 += backward_88;
      double backward_89 = scratch[109][tid];
      cdot_0 += backward_89;
      double backward_90 = scratch[110][tid];
      cdot_0 += backward_90;
      double backward_91 = scratch[111][tid];
      cdot_0 += backward_91;
      double backward_92 = scratch[112][tid];
      cdot_0 += backward_92;
      double backward_93 = scratch[113][tid];
      cdot_0 += backward_93;
    }
    else if (wid == 11)
    {
      double forward_153 = scratch[134][tid];
      ddot_0 += forward_153;
      double forward_154 = scratch[135][tid];
      ddot_0 += forward_154;
      double forward_156 = scratch[137][tid];
      ddot_0 += forward_156;
      double forward_157 = scratch[138][tid];
      ddot_0 += forward_157;
      double forward_161 = scratch[139][tid];
      ddot_0 = __fma_rn(2.0, forward_161, ddot_0);
      double backward_153 = scratch[154][tid];
      cdot_0 += backward_153;
      double backward_154 = scratch[155][tid];
      cdot_0 += backward_154;
      double backward_156 = scratch[157][tid];
      cdot_0 += backward_156;
      double backward_157 = scratch[158][tid];
      cdot_0 += backward_157;
    }
    else if (wid == 12)
    {
    }
    else if (wid == 13)
    {
      double backward_16 = scratch[35][tid];
      ddot_0 += backward_16;
      double backward_48 = scratch[28][tid];
      ddot_0 += backward_48;
      double backward_51 = scratch[68][tid];
      ddot_0 += backward_51;
      double backward_92 = scratch[112][tid];
      ddot_0 += backward_92;
      double forward_16 = scratch[15][tid];
      cdot_0 += forward_16;
      double forward_48 = scratch[8][tid];
      cdot_0 += forward_48;
      double forward_51 = scratch[48][tid];
      cdot_0 += forward_51;
      double forward_92 = scratch[92][tid];
      cdot_0 += forward_92;
    }
    else if (wid == 14)
    {
    }
    else if (wid == 15)
    {
      double forward_155 = scratch[136][tid];
      ddot_0 += forward_155;
      double forward_157 = scratch[138][tid];
      ddot_0 += forward_157;
      double backward_13 = scratch[21][tid];
      ddot_0 += backward_13;
      double backward_99 = scratch[115][tid];
      ddot_0 += backward_99;
      double backward_124 = scratch[143][tid];
      ddot_0 += backward_124;
      double backward_132 = scratch[144][tid];
      ddot_0 += backward_132;
      double forward_13 = scratch[1][tid];
      cdot_0 += forward_13;
      double forward_99 = scratch[95][tid];
      cdot_0 += forward_99;
      double forward_124 = scratch[123][tid];
      cdot_0 += forward_124;
      double forward_132 = scratch[124][tid];
      cdot_0 += forward_132;
      double backward_155 = scratch[156][tid];
      cdot_0 += backward_155;
      double backward_157 = scratch[158][tid];
      cdot_0 += backward_157;
    }
    else if (wid == 16)
    {
      double forward_12 = scratch[14][tid];
      ddot_0 += forward_12;
      double forward_25 = scratch[5][tid];
      ddot_0 += forward_25;
      double forward_31 = scratch[41][tid];
      ddot_0 += forward_31;
      double forward_63 = scratch[55][tid];
      ddot_0 += forward_63;
      double forward_91 = scratch[91][tid];
      ddot_0 += forward_91;
      double forward_99 = scratch[95][tid];
      ddot_0 += forward_99;
      double forward_136 = scratch[125][tid];
      ddot_0 += forward_136;
      double forward_141 = scratch[126][tid];
      ddot_0 += forward_141;
      double forward_142 = scratch[127][tid];
      ddot_0 += forward_142;
      double backward_34 = scratch[62][tid];
      ddot_0 += backward_34;
      double backward_149 = scratch[151][tid];
      ddot_0 += backward_149;
      double forward_34 = scratch[42][tid];
      cdot_0 += forward_34;
      double forward_149 = scratch[131][tid];
      cdot_0 += forward_149;
      double backward_12 = scratch[34][tid];
      cdot_0 += backward_12;
      double backward_25 = scratch[25][tid];
      cdot_0 += backward_25;
      double backward_31 = scratch[61][tid];
      cdot_0 += backward_31;
      double backward_63 = scratch[75][tid];
      cdot_0 += backward_63;
      double backward_91 = scratch[111][tid];
      cdot_0 += backward_91;
      double backward_99 = scratch[115][tid];
      cdot_0 += backward_99;
      double backward_141 = scratch[146][tid];
      cdot_0 += backward_141;
      double backward_142 = scratch[147][tid];
      cdot_0 += backward_142;
    }
    else if (wid == 17)
    {
      double forward_0 = scratch[0][tid];
      ddot_0 += forward_0;
      double forward_20 = scratch[16][tid];
      ddot_0 += forward_20;
      double forward_22 = scratch[3][tid];
      ddot_0 = __fma_rn(2.0, forward_22, ddot_0);
      double forward_34 = scratch[42][tid];
      ddot_0 += forward_34;
      double forward_35 = scratch[43][tid];
      ddot_0 += forward_35;
      double forward_36 = scratch[44][tid];
      ddot_0 += forward_36;
      double forward_77 = scratch[80][tid];
      ddot_0 += forward_77;
      double forward_85 = scratch[86][tid];
      ddot_0 += forward_85;
      double forward_93 = scratch[93][tid];
      ddot_0 += forward_93;
      double forward_156 = scratch[137][tid];
      ddot_0 += forward_156;
      double backward_12 = scratch[34][tid];
      ddot_0 += backward_12;
      double backward_14 = scratch[22][tid];
      ddot_0 += backward_14;
      double backward_86 = scratch[31][tid];
      ddot_0 += backward_86;
      double backward_87 = scratch[107][tid];
      ddot_0 += backward_87;
      double backward_96 = scratch[114][tid];
      ddot_0 += backward_96;
      double backward_108 = scratch[119][tid];
      ddot_0 += backward_108;
      double backward_147 = scratch[150][tid];
      ddot_0 += backward_147;
      double forward_12 = scratch[14][tid];
      cdot_0 += forward_12;
      double forward_14 = scratch[2][tid];
      cdot_0 += forward_14;
      double forward_86 = scratch[11][tid];
      cdot_0 += forward_86;
      double forward_87 = scratch[87][tid];
      cdot_0 += forward_87;
      double forward_96 = scratch[94][tid];
      cdot_0 += forward_96;
      double forward_108 = scratch[99][tid];
      cdot_0 += forward_108;
      double forward_147 = scratch[130][tid];
      cdot_0 += forward_147;
      double backward_0 = scratch[20][tid];
      cdot_0 += backward_0;
      double backward_20 = scratch[36][tid];
      cdot_0 += backward_20;
      double backward_22 = scratch[23][tid];
      cdot_0 = __fma_rn(2.0, backward_22, cdot_0);
      double backward_34 = scratch[62][tid];
      cdot_0 += backward_34;
      double backward_35 = scratch[63][tid];
      cdot_0 += backward_35;
      double backward_36 = scratch[64][tid];
      cdot_0 += backward_36;
      double backward_77 = scratch[100][tid];
      cdot_0 += backward_77;
      double backward_85 = scratch[106][tid];
      cdot_0 += backward_85;
      double backward_93 = scratch[113][tid];
      cdot_0 += backward_93;
      double backward_156 = scratch[157][tid];
      cdot_0 += backward_156;
    }
    else if (wid == 18)
    {
      double forward_0 = scratch[0][tid];
      ddot_0 += forward_0;
      double forward_13 = scratch[1][tid];
      ddot_0 += forward_13;
      double forward_24 = scratch[4][tid];
      ddot_0 += forward_24;
      double forward_27 = scratch[17][tid];
      ddot_0 += forward_27;
      double forward_30 = scratch[40][tid];
      ddot_0 += forward_30;
      double forward_52 = scratch[9][tid];
      ddot_0 += forward_52;
      double forward_53 = scratch[49][tid];
      ddot_0 += forward_53;
      double forward_61 = scratch[53][tid];
      ddot_0 += forward_61;
      double forward_62 = scratch[54][tid];
      ddot_0 += forward_62;
      double forward_73 = scratch[59][tid];
      ddot_0 += forward_73;
      double forward_80 = scratch[83][tid];
      ddot_0 += forward_80;
      double forward_90 = scratch[90][tid];
      ddot_0 += forward_90;
      double backward_10 = scratch[33][tid];
      ddot_0 += backward_10;
      double backward_28 = scratch[38][tid];
      ddot_0 += backward_28;
      double backward_37 = scratch[26][tid];
      ddot_0 += backward_37;
      double backward_65 = scratch[30][tid];
      ddot_0 += backward_65;
      double backward_109 = scratch[140][tid];
      ddot_0 += backward_109;
      double backward_141 = scratch[146][tid];
      ddot_0 += backward_141;
      double backward_142 = scratch[147][tid];
      ddot_0 += backward_142;
      double backward_144 = scratch[148][tid];
      ddot_0 += backward_144;
      double backward_152 = scratch[153][tid];
      ddot_0 += backward_152;
      double forward_10 = scratch[13][tid];
      cdot_0 += forward_10;
      double forward_28 = scratch[18][tid];
      cdot_0 += forward_28;
      double forward_37 = scratch[6][tid];
      cdot_0 += forward_37;
      double forward_65 = scratch[10][tid];
      cdot_0 += forward_65;
      double forward_109 = scratch[120][tid];
      cdot_0 += forward_109;
      double forward_141 = scratch[126][tid];
      cdot_0 += forward_141;
      double forward_142 = scratch[127][tid];
      cdot_0 += forward_142;
      double forward_144 = scratch[128][tid];
      cdot_0 += forward_144;
      double backward_0 = scratch[20][tid];
      cdot_0 += backward_0;
      double backward_13 = scratch[21][tid];
      cdot_0 += backward_13;
      double backward_24 = scratch[24][tid];
      cdot_0 += backward_24;
      double backward_27 = scratch[37][tid];
      cdot_0 += backward_27;
      double backward_30 = scratch[60][tid];
      cdot_0 += backward_30;
      double backward_52 = scratch[29][tid];
      cdot_0 += backward_52;
      double backward_53 = scratch[69][tid];
      cdot_0 += backward_53;
      double backward_61 = scratch[73][tid];
      cdot_0 += backward_61;
      double backward_62 = scratch[74][tid];
      cdot_0 += backward_62;
      double backward_73 = scratch[79][tid];
      cdot_0 += backward_73;
      double backward_80 = scratch[103][tid];
      cdot_0 += backward_80;
      double backward_90 = scratch[110][tid];
      cdot_0 += backward_90;
    }
    else if (wid == 19)
    {
      double forward_4 = scratch[12][tid];
      ddot_0 += forward_4;
      double forward_29 = scratch[19][tid];
      ddot_0 += forward_29;
      double forward_48 = scratch[8][tid];
      ddot_0 = __fma_rn(2.0, forward_48, ddot_0);
      double forward_54 = scratch[50][tid];
      ddot_0 += forward_54;
      double forward_60 = scratch[52][tid];
      ddot_0 += forward_60;
      double forward_72 = scratch[58][tid];
      ddot_0 += forward_72;
      double forward_81 = scratch[84][tid];
      ddot_0 += forward_81;
      double forward_89 = scratch[89][tid];
      ddot_0 += forward_89;
      double forward_105 = scratch[97][tid];
      ddot_0 += forward_105;
      double backward_14 = scratch[22][tid];
      ddot_0 += backward_14;
      double backward_20 = scratch[36][tid];
      ddot_0 += backward_20;
      double backward_31 = scratch[61][tid];
      ddot_0 += backward_31;
      double backward_63 = scratch[75][tid];
      ddot_0 += backward_63;
      double backward_91 = scratch[111][tid];
      ddot_0 += backward_91;
      double backward_151 = scratch[152][tid];
      ddot_0 += backward_151;
      double backward_155 = scratch[156][tid];
      ddot_0 += backward_155;
      double forward_14 = scratch[2][tid];
      cdot_0 += forward_14;
      double forward_20 = scratch[16][tid];
      cdot_0 += forward_20;
      double forward_31 = scratch[41][tid];
      cdot_0 += forward_31;
      double forward_63 = scratch[55][tid];
      cdot_0 += forward_63;
      double forward_91 = scratch[91][tid];
      cdot_0 += forward_91;
      double forward_151 = scratch[132][tid];
      cdot_0 += forward_151;
      double forward_155 = scratch[136][tid];
      cdot_0 += forward_155;
      double backward_4 = scratch[32][tid];
      cdot_0 += backward_4;
      double backward_29 = scratch[39][tid];
      cdot_0 += backward_29;
      double backward_48 = scratch[28][tid];
      cdot_0 = __fma_rn(2.0, backward_48, cdot_0);
      double backward_54 = scratch[70][tid];
      cdot_0 += backward_54;
      double backward_60 = scratch[72][tid];
      cdot_0 += backward_60;
      double backward_72 = scratch[78][tid];
      cdot_0 += backward_72;
      double backward_81 = scratch[104][tid];
      cdot_0 += backward_81;
      double backward_89 = scratch[109][tid];
      cdot_0 += backward_89;
      double backward_105 = scratch[117][tid];
      cdot_0 += backward_105;
    }
    asm volatile("bar.sync 0, 640;" : : : "memory");
    scratch[wid+0][tid] = rr_f_4;
    scratch[wid+20][tid] = rr_r_4;
    scratch[wid+40][tid] = rr_f_5;
    scratch[wid+60][tid] = rr_r_5;
    scratch[wid+80][tid] = rr_f_6;
    scratch[wid+100][tid] = rr_r_6;
    scratch[wid+120][tid] = rr_f_7;
    scratch[wid+140][tid] = rr_r_7;
    asm volatile("bar.sync 0, 640;" : : : "memory");
    if (wid == 0)
    {
      double forward_238 = scratch[56][tid];
      ddot_0 += forward_238;
      double backward_238 = scratch[76][tid];
      cdot_0 += backward_238;
    }
    else if (wid == 1)
    {
      double backward_246 = scratch[103][tid];
      ddot_0 += backward_246;
      double backward_266 = scratch[114][tid];
      ddot_0 += backward_266;
      double forward_246 = scratch[83][tid];
      cdot_0 += forward_246;
      double forward_266 = scratch[94][tid];
      cdot_0 += forward_266;
      double backward_274 = scratch[142][tid];
      ddot_1 += backward_274;
    }
    else if (wid == 2)
    {
      double forward_270 = scratch[98][tid];
      ddot_1 += forward_270;
      double forward_271 = scratch[99][tid];
      ddot_1 += forward_271;
      double backward_270 = scratch[118][tid];
      cdot_1 += backward_270;
      double backward_271 = scratch[119][tid];
      cdot_1 += backward_271;
    }
    else if (wid == 3)
    {
    }
    else if (wid == 4)
    {
      double forward_165 = scratch[2][tid];
      ddot_0 += forward_165;
      double backward_165 = scratch[22][tid];
      cdot_0 += backward_165;
    }
    else if (wid == 5)
    {
      double backward_268 = scratch[116][tid];
      ddot_0 += backward_268;
      double backward_273 = scratch[141][tid];
      ddot_0 += backward_273;
      double backward_281 = scratch[145][tid];
      ddot_0 += backward_281;
      double forward_268 = scratch[96][tid];
      cdot_0 += forward_268;
    }
    else if (wid == 6)
    {
      double forward_269 = scratch[97][tid];
      ddot_0 += forward_269;
      double backward_261 = scratch[111][tid];
      ddot_0 += backward_261;
      double forward_261 = scratch[91][tid];
      cdot_0 += forward_261;
      double backward_269 = scratch[117][tid];
      cdot_0 += backward_269;
      double forward_276 = scratch[124][tid];
      ddot_1 += forward_276;
      double backward_276 = scratch[144][tid];
      cdot_1 += backward_276;
    }
    else if (wid == 7)
    {
      double backward_164 = scratch[21][tid];
      ddot_0 += backward_164;
      double backward_229 = scratch[74][tid];
      ddot_0 += backward_229;
      double backward_264 = scratch[113][tid];
      ddot_0 += backward_264;
      double forward_164 = scratch[1][tid];
      cdot_0 += forward_164;
      double forward_229 = scratch[54][tid];
      cdot_0 += forward_229;
      double forward_264 = scratch[93][tid];
      cdot_0 += forward_264;
    }
    else if (wid == 8)
    {
      double forward_181 = scratch[12][tid];
      ddot_0 += forward_181;
      double forward_182 = scratch[13][tid];
      ddot_0 += forward_182;
      double backward_181 = scratch[32][tid];
      cdot_0 += backward_181;
      double backward_182 = scratch[33][tid];
      cdot_0 += backward_182;
    }
    else if (wid == 9)
    {
      double forward_183 = scratch[14][tid];
      ddot_0 += forward_183;
      double forward_186 = scratch[15][tid];
      ddot_0 += forward_186;
      double forward_188 = scratch[16][tid];
      ddot_0 += forward_188;
      double backward_267 = scratch[115][tid];
      ddot_0 += backward_267;
      double backward_274 = scratch[142][tid];
      ddot_0 += backward_274;
      double forward_267 = scratch[95][tid];
      cdot_0 += forward_267;
      double backward_183 = scratch[34][tid];
      cdot_0 += backward_183;
      double backward_186 = scratch[35][tid];
      cdot_0 += backward_186;
      double backward_188 = scratch[36][tid];
      cdot_0 += backward_188;
    }
    else if (wid == 10)
    {
      double forward_164 = scratch[1][tid];
      ddot_0 += forward_164;
      double backward_163 = scratch[20][tid];
      ddot_0 += backward_163;
      double backward_179 = scratch[30][tid];
      ddot_0 += backward_179;
      double backward_273 = scratch[141][tid];
      ddot_0 += backward_273;
      double forward_163 = scratch[0][tid];
      cdot_0 += forward_163;
      double forward_179 = scratch[10][tid];
      cdot_0 += forward_179;
      double backward_164 = scratch[21][tid];
      cdot_0 += backward_164;
    }
    else if (wid == 11)
    {
      double forward_164 = scratch[1][tid];
      ddot_0 += forward_164;
      double forward_176 = scratch[7][tid];
      ddot_0 += forward_176;
      double forward_182 = scratch[13][tid];
      ddot_0 += forward_182;
      double forward_229 = scratch[54][tid];
      ddot_0 += forward_229;
      double forward_264 = scratch[93][tid];
      ddot_0 += forward_264;
      double backward_164 = scratch[21][tid];
      cdot_0 += backward_164;
      double backward_176 = scratch[27][tid];
      cdot_0 += backward_176;
      double backward_182 = scratch[33][tid];
      cdot_0 += backward_182;
      double backward_229 = scratch[74][tid];
      cdot_0 += backward_229;
      double backward_264 = scratch[113][tid];
      cdot_0 += backward_264;
    }
    else if (wid == 12)
    {
      double forward_244 = scratch[82][tid];
      ddot_0 += forward_244;
      double forward_246 = scratch[83][tid];
      ddot_0 += forward_246;
      double forward_248 = scratch[84][tid];
      ddot_0 += forward_248;
      double forward_250 = scratch[85][tid];
      ddot_0 += forward_250;
      double forward_252 = scratch[86][tid];
      ddot_0 += forward_252;
      double forward_254 = scratch[87][tid];
      ddot_0 += forward_254;
      double forward_256 = scratch[88][tid];
      ddot_0 += forward_256;
      double forward_258 = scratch[89][tid];
      ddot_0 += forward_258;
      double forward_260 = scratch[90][tid];
      ddot_0 += forward_260;
      double forward_261 = scratch[91][tid];
      ddot_0 += forward_261;
      double forward_262 = scratch[92][tid];
      ddot_0 += forward_262;
      double forward_264 = scratch[93][tid];
      ddot_0 += forward_264;
      double backward_244 = scratch[102][tid];
      cdot_0 += backward_244;
      double backward_246 = scratch[103][tid];
      cdot_0 += backward_246;
      double backward_254 = scratch[107][tid];
      cdot_0 += backward_254;
      double backward_258 = scratch[109][tid];
      cdot_0 += backward_258;
      double backward_260 = scratch[110][tid];
      cdot_0 += backward_260;
      double backward_261 = scratch[111][tid];
      cdot_0 += backward_261;
      double backward_262 = scratch[112][tid];
      cdot_0 += backward_262;
      double backward_264 = scratch[113][tid];
      cdot_0 += backward_264;
    }
    else if (wid == 13)
    {
      double forward_11 = scratch[135][tid];
      ddot_0 += forward_11;
      double backward_226 = scratch[71][tid];
      ddot_0 += backward_226;
      double backward_254 = scratch[107][tid];
      ddot_0 += backward_254;
      double forward_226 = scratch[51][tid];
      cdot_0 += forward_226;
      double forward_254 = scratch[87][tid];
      cdot_0 += forward_254;
      double backward_11 = scratch[155][tid];
      cdot_0 += backward_11;
    }
    else if (wid == 14)
    {
      double forward_175 = scratch[6][tid];
      ddot_0 += forward_175;
      double forward_176 = scratch[7][tid];
      ddot_0 += forward_176;
      double forward_217 = scratch[44][tid];
      ddot_0 += forward_217;
      double backward_175 = scratch[26][tid];
      cdot_0 += backward_175;
      double backward_176 = scratch[27][tid];
      cdot_0 += backward_176;
      double backward_217 = scratch[64][tid];
      cdot_0 += backward_217;
    }
    else if (wid == 15)
    {
      double forward_17 = scratch[137][tid];
      ddot_0 += forward_17;
      double forward_260 = scratch[90][tid];
      ddot_0 += forward_260;
      double backward_15 = scratch[156][tid];
      ddot_0 += backward_15;
      double backward_18 = scratch[158][tid];
      ddot_0 += backward_18;
      double backward_19 = scratch[159][tid];
      ddot_0 += backward_19;
      double backward_186 = scratch[35][tid];
      ddot_0 += backward_186;
      double backward_240 = scratch[78][tid];
      ddot_0 += backward_240;
      double backward_268 = scratch[116][tid];
      ddot_0 += backward_268;
      double forward_15 = scratch[136][tid];
      cdot_0 += forward_15;
      double forward_18 = scratch[138][tid];
      cdot_0 += forward_18;
      double forward_19 = scratch[139][tid];
      cdot_0 += forward_19;
      double forward_186 = scratch[15][tid];
      cdot_0 += forward_186;
      double forward_240 = scratch[58][tid];
      cdot_0 += forward_240;
      double forward_268 = scratch[96][tid];
      cdot_0 += forward_268;
      double backward_17 = scratch[157][tid];
      cdot_0 += backward_17;
      double backward_260 = scratch[110][tid];
      cdot_0 += backward_260;
    }
    else if (wid == 16)
    {
      double forward_3 = scratch[129][tid];
      ddot_0 += forward_3;
      double forward_7 = scratch[132][tid];
      ddot_0 += forward_7;
      double forward_8 = scratch[133][tid];
      ddot_0 += forward_8;
      double forward_19 = scratch[139][tid];
      ddot_0 += forward_19;
      double forward_186 = scratch[15][tid];
      ddot_0 += forward_186;
      double forward_225 = scratch[50][tid];
      ddot_0 += forward_225;
      double forward_250 = scratch[85][tid];
      ddot_0 += forward_250;
      double backward_6 = scratch[151][tid];
      ddot_0 += backward_6;
      double forward_6 = scratch[131][tid];
      cdot_0 += forward_6;
      double backward_3 = scratch[149][tid];
      cdot_0 += backward_3;
      double backward_7 = scratch[152][tid];
      cdot_0 += backward_7;
      double backward_8 = scratch[153][tid];
      cdot_0 += backward_8;
      double backward_19 = scratch[159][tid];
      cdot_0 += backward_19;
      double backward_186 = scratch[35][tid];
      cdot_0 += backward_186;
      double backward_225 = scratch[70][tid];
      cdot_0 += backward_225;
    }
    else if (wid == 17)
    {
      double forward_177 = scratch[8][tid];
      ddot_0 += forward_177;
      double forward_227 = scratch[52][tid];
      ddot_0 += forward_227;
      double forward_256 = scratch[88][tid];
      ddot_0 += forward_256;
      double backward_1 = scratch[147][tid];
      ddot_0 += backward_1;
      double backward_2 = scratch[148][tid];
      ddot_0 += backward_2;
      double backward_3 = scratch[149][tid];
      ddot_0 += backward_3;
      double backward_180 = scratch[31][tid];
      ddot_0 += backward_180;
      double backward_239 = scratch[77][tid];
      ddot_0 = __fma_rn(2.0, backward_239, ddot_0);
      double backward_240 = scratch[78][tid];
      ddot_0 += backward_240;
      double backward_242 = scratch[100][tid];
      ddot_0 += backward_242;
      double forward_1 = scratch[127][tid];
      cdot_0 += forward_1;
      double forward_2 = scratch[128][tid];
      cdot_0 += forward_2;
      double forward_3 = scratch[129][tid];
      cdot_0 += forward_3;
      double forward_180 = scratch[11][tid];
      cdot_0 += forward_180;
      double forward_239 = scratch[57][tid];
      cdot_0 = __fma_rn(2.0, forward_239, cdot_0);
      double forward_240 = scratch[58][tid];
      cdot_0 += forward_240;
      double forward_242 = scratch[80][tid];
      cdot_0 += forward_242;
      double backward_177 = scratch[28][tid];
      cdot_0 += backward_177;
      double backward_227 = scratch[72][tid];
      cdot_0 += backward_227;
    }
    else if (wid == 18)
    {
      double forward_1 = scratch[127][tid];
      ddot_0 += forward_1;
      double forward_6 = scratch[131][tid];
      ddot_0 += forward_6;
      double forward_15 = scratch[136][tid];
      ddot_0 += forward_15;
      double forward_200 = scratch[17][tid];
      ddot_0 += forward_200;
      double forward_224 = scratch[49][tid];
      ddot_0 += forward_224;
      double forward_248 = scratch[84][tid];
      ddot_0 += forward_248;
      double backward_5 = scratch[150][tid];
      ddot_0 += backward_5;
      double backward_7 = scratch[152][tid];
      ddot_0 += backward_7;
      double backward_9 = scratch[154][tid];
      ddot_0 += backward_9;
      double backward_163 = scratch[20][tid];
      ddot_0 += backward_163;
      double backward_172 = scratch[23][tid];
      ddot_0 += backward_172;
      double backward_214 = scratch[62][tid];
      ddot_0 += backward_214;
      double backward_241 = scratch[79][tid];
      ddot_0 += backward_241;
      double backward_242 = scratch[100][tid];
      ddot_0 += backward_242;
      double backward_244 = scratch[102][tid];
      ddot_0 += backward_244;
      double forward_5 = scratch[130][tid];
      cdot_0 += forward_5;
      double forward_7 = scratch[132][tid];
      cdot_0 += forward_7;
      double forward_9 = scratch[134][tid];
      cdot_0 += forward_9;
      double forward_163 = scratch[0][tid];
      cdot_0 += forward_163;
      double forward_172 = scratch[3][tid];
      cdot_0 += forward_172;
      double forward_214 = scratch[42][tid];
      cdot_0 += forward_214;
      double forward_242 = scratch[80][tid];
      cdot_0 += forward_242;
      double forward_244 = scratch[82][tid];
      cdot_0 += forward_244;
      double backward_1 = scratch[147][tid];
      cdot_0 += backward_1;
      double backward_6 = scratch[151][tid];
      cdot_0 += backward_6;
      double backward_15 = scratch[156][tid];
      cdot_0 += backward_15;
      double backward_200 = scratch[37][tid];
      cdot_0 += backward_200;
      double backward_224 = scratch[69][tid];
      cdot_0 += backward_224;
    }
    else if (wid == 19)
    {
      double forward_2 = scratch[128][tid];
      ddot_0 += forward_2;
      double forward_5 = scratch[130][tid];
      ddot_0 += forward_5;
      double forward_9 = scratch[134][tid];
      ddot_0 += forward_9;
      double forward_11 = scratch[135][tid];
      ddot_0 += forward_11;
      double forward_18 = scratch[138][tid];
      ddot_0 += forward_18;
      double forward_177 = scratch[8][tid];
      ddot_0 += forward_177;
      double forward_183 = scratch[14][tid];
      ddot_0 += forward_183;
      double forward_188 = scratch[16][tid];
      ddot_0 += forward_188;
      double forward_210 = scratch[18][tid];
      ddot_0 += forward_210;
      double forward_220 = scratch[46][tid];
      ddot_0 += forward_220;
      double forward_223 = scratch[48][tid];
      ddot_0 += forward_223;
      double forward_252 = scratch[86][tid];
      ddot_0 += forward_252;
      double forward_281 = scratch[125][tid];
      ddot_0 += forward_281;
      double forward_282 = scratch[126][tid];
      ddot_0 += forward_282;
      double backward_3 = scratch[149][tid];
      ddot_0 += backward_3;
      double backward_6 = scratch[151][tid];
      ddot_0 += backward_6;
      double backward_7 = scratch[152][tid];
      ddot_0 += backward_7;
      double backward_8 = scratch[153][tid];
      ddot_0 = __fma_rn(2.0, backward_8, ddot_0);
      double backward_19 = scratch[159][tid];
      ddot_0 += backward_19;
      double backward_175 = scratch[26][tid];
      ddot_0 += backward_175;
      double backward_181 = scratch[32][tid];
      ddot_0 += backward_181;
      double backward_215 = scratch[63][tid];
      ddot_0 += backward_215;
      double backward_225 = scratch[70][tid];
      ddot_0 += backward_225;
      double backward_241 = scratch[79][tid];
      ddot_0 += backward_241;
      double backward_250 = scratch[105][tid];
      ddot_0 += backward_250;
      double backward_272 = scratch[140][tid];
      ddot_0 += backward_272;
      double backward_273 = scratch[141][tid];
      ddot_0 += backward_273;
      double backward_274 = scratch[142][tid];
      ddot_0 += backward_274;
      double backward_275 = scratch[143][tid];
      ddot_0 += backward_275;
      double forward_3 = scratch[129][tid];
      cdot_0 += forward_3;
      double forward_6 = scratch[131][tid];
      cdot_0 += forward_6;
      double forward_7 = scratch[132][tid];
      cdot_0 += forward_7;
      double forward_8 = scratch[133][tid];
      cdot_0 = __fma_rn(2.0, forward_8, cdot_0);
      double forward_19 = scratch[139][tid];
      cdot_0 += forward_19;
      double forward_175 = scratch[6][tid];
      cdot_0 += forward_175;
      double forward_181 = scratch[12][tid];
      cdot_0 += forward_181;
      double forward_225 = scratch[50][tid];
      cdot_0 += forward_225;
      double backward_2 = scratch[148][tid];
      cdot_0 += backward_2;
      double backward_5 = scratch[150][tid];
      cdot_0 += backward_5;
      double backward_9 = scratch[154][tid];
      cdot_0 += backward_9;
      double backward_11 = scratch[155][tid];
      cdot_0 += backward_11;
      double backward_18 = scratch[158][tid];
      cdot_0 += backward_18;
      double backward_177 = scratch[28][tid];
      cdot_0 += backward_177;
      double backward_183 = scratch[34][tid];
      cdot_0 += backward_183;
      double backward_188 = scratch[36][tid];
      cdot_0 += backward_188;
      double backward_210 = scratch[38][tid];
      cdot_0 += backward_210;
      double backward_220 = scratch[66][tid];
      cdot_0 += backward_220;
      double backward_223 = scratch[68][tid];
      cdot_0 += backward_223;
    }
    asm volatile("bar.sync 0, 640;" : : : "memory");
    scratch[wid+0][tid] = rr_f_8;
    scratch[wid+20][tid] = rr_r_8;
    scratch[wid+40][tid] = rr_f_9;
    scratch[wid+60][tid] = rr_r_9;
    scratch[wid+80][tid] = rr_f_10;
    scratch[wid+100][tid] = rr_r_10;
    scratch[wid+120][tid] = rr_f_11;
    scratch[wid+140][tid] = rr_r_11;
    asm volatile("bar.sync 0, 640;" : : : "memory");
    if (wid == 0)
    {
      double forward_146 = scratch[123][tid];
      ddot_1 += forward_146;
      double backward_146 = scratch[143][tid];
      cdot_1 += backward_146;
    }
    else if (wid == 1)
    {
      double forward_129 = scratch[92][tid];
      ddot_0 += forward_129;
      double forward_130 = scratch[93][tid];
      ddot_0 += forward_130;
      double backward_138 = scratch[119][tid];
      ddot_0 += backward_138;
      double backward_129 = scratch[112][tid];
      cdot_0 += backward_129;
      double backward_130 = scratch[113][tid];
      cdot_0 += backward_130;
      double backward_189 = scratch[159][tid];
      ddot_1 += backward_189;
      double forward_189 = scratch[139][tid];
      cdot_1 += forward_189;
    }
    else if (wid == 2)
    {
      double forward_114 = scratch[59][tid];
      ddot_0 += forward_114;
      double forward_115 = scratch[80][tid];
      ddot_0 += forward_115;
      double backward_134 = scratch[116][tid];
      ddot_0 += backward_134;
      double backward_135 = scratch[117][tid];
      ddot_0 += backward_135;
      double backward_137 = scratch[118][tid];
      ddot_0 += backward_137;
      double backward_139 = scratch[140][tid];
      ddot_0 += backward_139;
      double forward_134 = scratch[96][tid];
      cdot_0 += forward_134;
      double forward_135 = scratch[97][tid];
      cdot_0 += forward_135;
      double forward_137 = scratch[98][tid];
      cdot_0 += forward_137;
      double forward_139 = scratch[120][tid];
      cdot_0 += forward_139;
      double backward_115 = scratch[100][tid];
      cdot_0 += backward_115;
    }
    else if (wid == 3)
    {
      double backward_55 = scratch[33][tid];
      ddot_0 += backward_55;
      double backward_57 = scratch[35][tid];
      ddot_0 += backward_57;
      double backward_58 = scratch[36][tid];
      ddot_0 += backward_58;
      double forward_55 = scratch[13][tid];
      cdot_0 += forward_55;
      double forward_57 = scratch[15][tid];
      cdot_0 += forward_57;
      double forward_58 = scratch[16][tid];
      cdot_0 += forward_58;
    }
    else if (wid == 4)
    {
      double backward_166 = scratch[150][tid];
      ddot_0 += backward_166;
      double backward_167 = scratch[151][tid];
      ddot_0 += backward_167;
      double backward_168 = scratch[152][tid];
      ddot_0 += backward_168;
      double backward_169 = scratch[153][tid];
      ddot_0 += backward_169;
      double backward_170 = scratch[154][tid];
      ddot_0 += backward_170;
      double backward_171 = scratch[155][tid];
      ddot_0 += backward_171;
      double forward_166 = scratch[130][tid];
      cdot_0 += forward_166;
      double forward_167 = scratch[131][tid];
      cdot_0 += forward_167;
      double forward_168 = scratch[132][tid];
      cdot_0 += forward_168;
      double forward_169 = scratch[133][tid];
      cdot_0 += forward_169;
      double forward_170 = scratch[134][tid];
      cdot_0 += forward_170;
      double forward_171 = scratch[135][tid];
      cdot_0 += forward_171;
      double forward_131 = scratch[94][tid];
      ddot_1 += forward_131;
      double backward_131 = scratch[114][tid];
      cdot_1 += backward_131;
    }
    else if (wid == 5)
    {
      double forward_133 = scratch[95][tid];
      ddot_0 += forward_133;
      double forward_134 = scratch[96][tid];
      ddot_0 += forward_134;
      double forward_135 = scratch[97][tid];
      ddot_0 += forward_135;
      double forward_137 = scratch[98][tid];
      ddot_0 += forward_137;
      double forward_138 = scratch[99][tid];
      ddot_0 += forward_138;
      double forward_139 = scratch[120][tid];
      ddot_0 += forward_139;
      double backward_146 = scratch[143][tid];
      ddot_0 += backward_146;
      double forward_146 = scratch[123][tid];
      cdot_0 += forward_146;
      double backward_133 = scratch[115][tid];
      cdot_0 += backward_133;
      double backward_134 = scratch[116][tid];
      cdot_0 += backward_134;
      double backward_135 = scratch[117][tid];
      cdot_0 += backward_135;
      double backward_137 = scratch[118][tid];
      cdot_0 += backward_137;
      double backward_139 = scratch[140][tid];
      cdot_0 += backward_139;
    }
    else if (wid == 6)
    {
    }
    else if (wid == 7)
    {
      double backward_158 = scratch[146][tid];
      ddot_0 += backward_158;
      double backward_162 = scratch[149][tid];
      ddot_0 += backward_162;
      double backward_171 = scratch[155][tid];
      ddot_0 += backward_171;
      double forward_158 = scratch[126][tid];
      cdot_0 += forward_158;
      double forward_162 = scratch[129][tid];
      cdot_0 += forward_162;
      double forward_171 = scratch[135][tid];
      cdot_0 += forward_171;
    }
    else if (wid == 8)
    {
      double forward_116 = scratch[81][tid];
      ddot_0 += forward_116;
      double forward_118 = scratch[82][tid];
      ddot_0 += forward_118;
      double forward_119 = scratch[83][tid];
      ddot_0 += forward_119;
      double forward_120 = scratch[84][tid];
      ddot_0 += forward_120;
      double forward_121 = scratch[85][tid];
      ddot_0 += forward_121;
      double forward_122 = scratch[86][tid];
      ddot_0 += forward_122;
      double backward_125 = scratch[108][tid];
      ddot_0 += backward_125;
      double backward_126 = scratch[109][tid];
      ddot_0 += backward_126;
      double backward_127 = scratch[110][tid];
      ddot_0 += backward_127;
      double backward_128 = scratch[111][tid];
      ddot_0 += backward_128;
      double forward_125 = scratch[88][tid];
      cdot_0 += forward_125;
      double forward_126 = scratch[89][tid];
      cdot_0 += forward_126;
      double forward_127 = scratch[90][tid];
      cdot_0 += forward_127;
      double forward_128 = scratch[91][tid];
      cdot_0 += forward_128;
      double backward_116 = scratch[101][tid];
      cdot_0 += backward_116;
      double backward_118 = scratch[102][tid];
      cdot_0 += backward_118;
      double backward_119 = scratch[103][tid];
      cdot_0 += backward_119;
      double backward_120 = scratch[104][tid];
      cdot_0 += backward_120;
      double backward_121 = scratch[105][tid];
      cdot_0 += backward_121;
      double backward_122 = scratch[106][tid];
      cdot_0 += backward_122;
    }
    else if (wid == 9)
    {
      double forward_123 = scratch[87][tid];
      ddot_0 += forward_123;
      double forward_125 = scratch[88][tid];
      ddot_0 += forward_125;
      double forward_126 = scratch[89][tid];
      ddot_0 += forward_126;
      double forward_127 = scratch[90][tid];
      ddot_0 += forward_127;
      double forward_128 = scratch[91][tid];
      ddot_0 += forward_128;
      double forward_184 = scratch[136][tid];
      ddot_0 += forward_184;
      double forward_185 = scratch[137][tid];
      ddot_0 += forward_185;
      double forward_187 = scratch[138][tid];
      ddot_0 += forward_187;
      double forward_189 = scratch[139][tid];
      ddot_0 += forward_189;
      double backward_130 = scratch[113][tid];
      ddot_0 += backward_130;
      double forward_130 = scratch[93][tid];
      cdot_0 += forward_130;
      double backward_123 = scratch[107][tid];
      cdot_0 += backward_123;
      double backward_125 = scratch[108][tid];
      cdot_0 += backward_125;
      double backward_126 = scratch[109][tid];
      cdot_0 += backward_126;
      double backward_127 = scratch[110][tid];
      cdot_0 += backward_127;
      double backward_128 = scratch[111][tid];
      cdot_0 += backward_128;
      double backward_184 = scratch[156][tid];
      cdot_0 += backward_184;
      double backward_185 = scratch[157][tid];
      cdot_0 += backward_185;
      double backward_187 = scratch[158][tid];
      cdot_0 += backward_187;
      double backward_189 = scratch[159][tid];
      cdot_0 += backward_189;
    }
    else if (wid == 10)
    {
      double backward_143 = scratch[142][tid];
      ddot_0 += backward_143;
      double backward_185 = scratch[157][tid];
      ddot_0 += backward_185;
      double backward_187 = scratch[158][tid];
      ddot_0 += backward_187;
      double forward_143 = scratch[122][tid];
      cdot_0 += forward_143;
      double forward_185 = scratch[137][tid];
      cdot_0 += forward_185;
      double forward_187 = scratch[138][tid];
      cdot_0 += forward_187;
    }
    else if (wid == 11)
    {
      double forward_150 = scratch[125][tid];
      ddot_0 += forward_150;
      double forward_158 = scratch[126][tid];
      ddot_0 += forward_158;
      double forward_160 = scratch[128][tid];
      ddot_0 = __fma_rn(2.0, forward_160, ddot_0);
      double forward_162 = scratch[129][tid];
      ddot_0 += forward_162;
      double forward_171 = scratch[135][tid];
      ddot_0 += forward_171;
      double backward_150 = scratch[145][tid];
      cdot_0 += backward_150;
      double backward_158 = scratch[146][tid];
      cdot_0 += backward_158;
      double backward_162 = scratch[149][tid];
      cdot_0 += backward_162;
      double backward_171 = scratch[155][tid];
      cdot_0 += backward_171;
    }
    else if (wid == 12)
    {
    }
    else if (wid == 13)
    {
      double forward_47 = scratch[10][tid];
      ddot_0 += forward_47;
      double forward_49 = scratch[11][tid];
      ddot_0 += forward_49;
      double forward_67 = scratch[17][tid];
      ddot_0 += forward_67;
      double forward_140 = scratch[121][tid];
      ddot_0 += forward_140;
      double forward_148 = scratch[124][tid];
      ddot_0 += forward_148;
      double forward_159 = scratch[127][tid];
      ddot_0 += forward_159;
      double backward_50 = scratch[32][tid];
      ddot_0 += backward_50;
      double backward_76 = scratch[64][tid];
      ddot_0 += backward_76;
      double backward_169 = scratch[153][tid];
      ddot_0 += backward_169;
      double forward_50 = scratch[12][tid];
      cdot_0 += forward_50;
      double forward_76 = scratch[44][tid];
      cdot_0 += forward_76;
      double forward_169 = scratch[133][tid];
      cdot_0 += forward_169;
      double backward_47 = scratch[30][tid];
      cdot_0 += backward_47;
      double backward_49 = scratch[31][tid];
      cdot_0 += backward_49;
      double backward_67 = scratch[37][tid];
      cdot_0 += backward_67;
      double backward_140 = scratch[141][tid];
      cdot_0 += backward_140;
      double backward_148 = scratch[144][tid];
      cdot_0 += backward_148;
      double backward_159 = scratch[147][tid];
      cdot_0 += backward_159;
    }
    else if (wid == 14)
    {
      double forward_95 = scratch[48][tid];
      ddot_0 += forward_95;
      double forward_119 = scratch[83][tid];
      ddot_0 += forward_119;
      double backward_97 = scratch[69][tid];
      ddot_0 += backward_97;
      double backward_101 = scratch[72][tid];
      ddot_0 += backward_101;
      double backward_104 = scratch[74][tid];
      ddot_0 += backward_104;
      double backward_111 = scratch[76][tid];
      ddot_0 += backward_111;
      double backward_112 = scratch[77][tid];
      ddot_0 += backward_112;
      double backward_114 = scratch[79][tid];
      ddot_0 += backward_114;
      double backward_123 = scratch[107][tid];
      ddot_0 += backward_123;
      double backward_133 = scratch[115][tid];
      ddot_0 += backward_133;
      double forward_97 = scratch[49][tid];
      cdot_0 += forward_97;
      double forward_101 = scratch[52][tid];
      cdot_0 += forward_101;
      double forward_104 = scratch[54][tid];
      cdot_0 += forward_104;
      double forward_111 = scratch[56][tid];
      cdot_0 += forward_111;
      double forward_112 = scratch[57][tid];
      cdot_0 += forward_112;
      double forward_123 = scratch[87][tid];
      cdot_0 += forward_123;
      double forward_133 = scratch[95][tid];
      cdot_0 += forward_133;
      double backward_95 = scratch[68][tid];
      cdot_0 += backward_95;
      double backward_119 = scratch[103][tid];
      cdot_0 += backward_119;
    }
    else if (wid == 15)
    {
      double forward_82 = scratch[45][tid];
      ddot_0 += forward_82;
      double forward_122 = scratch[86][tid];
      ddot_0 += forward_122;
      double forward_143 = scratch[122][tid];
      ddot_0 += forward_143;
      double backward_75 = scratch[63][tid];
      ddot_0 += backward_75;
      double backward_76 = scratch[64][tid];
      ddot_0 += backward_76;
      double backward_84 = scratch[66][tid];
      ddot_0 += backward_84;
      double backward_103 = scratch[73][tid];
      ddot_0 += backward_103;
      double backward_129 = scratch[112][tid];
      ddot_0 += backward_129;
      double backward_133 = scratch[115][tid];
      ddot_0 += backward_133;
      double backward_162 = scratch[149][tid];
      ddot_0 += backward_162;
      double backward_187 = scratch[158][tid];
      ddot_0 += backward_187;
      double forward_75 = scratch[43][tid];
      cdot_0 += forward_75;
      double forward_76 = scratch[44][tid];
      cdot_0 += forward_76;
      double forward_84 = scratch[46][tid];
      cdot_0 += forward_84;
      double forward_103 = scratch[53][tid];
      cdot_0 += forward_103;
      double forward_129 = scratch[92][tid];
      cdot_0 += forward_129;
      double forward_133 = scratch[95][tid];
      cdot_0 += forward_133;
      double forward_162 = scratch[129][tid];
      cdot_0 += forward_162;
      double forward_187 = scratch[138][tid];
      cdot_0 += forward_187;
      double backward_82 = scratch[65][tid];
      cdot_0 += backward_82;
      double backward_122 = scratch[106][tid];
      cdot_0 += backward_122;
      double backward_143 = scratch[142][tid];
      cdot_0 += backward_143;
    }
    else if (wid == 16)
    {
      double forward_33 = scratch[4][tid];
      ddot_0 += forward_33;
      double forward_39 = scratch[5][tid];
      ddot_0 += forward_39;
      double forward_58 = scratch[16][tid];
      ddot_0 += forward_58;
      double forward_67 = scratch[17][tid];
      ddot_0 += forward_67;
      double forward_68 = scratch[18][tid];
      ddot_0 += forward_68;
      double forward_74 = scratch[42][tid];
      ddot_0 += forward_74;
      double forward_98 = scratch[50][tid];
      ddot_0 += forward_98;
      double forward_100 = scratch[51][tid];
      ddot_0 += forward_100;
      double forward_106 = scratch[55][tid];
      ddot_0 += forward_106;
      double forward_111 = scratch[56][tid];
      ddot_0 += forward_111;
      double forward_135 = scratch[97][tid];
      ddot_0 += forward_135;
      double forward_143 = scratch[122][tid];
      ddot_0 += forward_143;
      double forward_168 = scratch[132][tid];
      ddot_0 += forward_168;
      double forward_184 = scratch[136][tid];
      ddot_0 += forward_184;
      double forward_185 = scratch[137][tid];
      ddot_0 += forward_185;
      double backward_26 = scratch[22][tid];
      ddot_0 += backward_26;
      double forward_26 = scratch[2][tid];
      cdot_0 += forward_26;
      double backward_33 = scratch[24][tid];
      cdot_0 += backward_33;
      double backward_39 = scratch[25][tid];
      cdot_0 += backward_39;
      double backward_58 = scratch[36][tid];
      cdot_0 += backward_58;
      double backward_67 = scratch[37][tid];
      cdot_0 += backward_67;
      double backward_68 = scratch[38][tid];
      cdot_0 += backward_68;
      double backward_98 = scratch[70][tid];
      cdot_0 += backward_98;
      double backward_106 = scratch[75][tid];
      cdot_0 += backward_106;
      double backward_111 = scratch[76][tid];
      cdot_0 += backward_111;
      double backward_135 = scratch[117][tid];
      cdot_0 += backward_135;
      double backward_143 = scratch[142][tid];
      cdot_0 += backward_143;
      double backward_168 = scratch[152][tid];
      cdot_0 += backward_168;
      double backward_184 = scratch[156][tid];
      cdot_0 += backward_184;
      double backward_185 = scratch[157][tid];
      cdot_0 += backward_185;
    }
    else if (wid == 17)
    {
      double forward_32 = scratch[3][tid];
      ddot_0 += forward_32;
      double forward_33 = scratch[4][tid];
      ddot_0 += forward_33;
      double forward_42 = scratch[6][tid];
      ddot_0 += forward_42;
      double forward_94 = scratch[47][tid];
      ddot_0 += forward_94;
      double forward_118 = scratch[82][tid];
      ddot_0 += forward_118;
      double forward_139 = scratch[120][tid];
      ddot_0 += forward_139;
      double forward_170 = scratch[134][tid];
      ddot_0 += forward_170;
      double backward_50 = scratch[32][tid];
      ddot_0 += backward_50;
      double backward_82 = scratch[65][tid];
      ddot_0 = __fma_rn(2.0, backward_82, ddot_0);
      double backward_95 = scratch[68][tid];
      ddot_0 += backward_95;
      double backward_98 = scratch[70][tid];
      ddot_0 += backward_98;
      double backward_113 = scratch[78][tid];
      ddot_0 += backward_113;
      double backward_115 = scratch[100][tid];
      ddot_0 += backward_115;
      double backward_123 = scratch[107][tid];
      ddot_0 += backward_123;
      double backward_131 = scratch[114][tid];
      ddot_0 += backward_131;
      double backward_150 = scratch[145][tid];
      ddot_0 += backward_150;
      double backward_189 = scratch[159][tid];
      ddot_0 += backward_189;
      double forward_50 = scratch[12][tid];
      cdot_0 += forward_50;
      double forward_82 = scratch[45][tid];
      cdot_0 = __fma_rn(2.0, forward_82, cdot_0);
      double forward_95 = scratch[48][tid];
      cdot_0 += forward_95;
      double forward_98 = scratch[50][tid];
      cdot_0 += forward_98;
      double forward_113 = scratch[58][tid];
      cdot_0 += forward_113;
      double forward_115 = scratch[80][tid];
      cdot_0 += forward_115;
      double forward_123 = scratch[87][tid];
      cdot_0 += forward_123;
      double forward_131 = scratch[94][tid];
      cdot_0 += forward_131;
      double forward_150 = scratch[125][tid];
      cdot_0 += forward_150;
      double forward_189 = scratch[139][tid];
      cdot_0 += forward_189;
      double backward_32 = scratch[23][tid];
      cdot_0 += backward_32;
      double backward_33 = scratch[24][tid];
      cdot_0 += backward_33;
      double backward_42 = scratch[26][tid];
      cdot_0 += backward_42;
      double backward_94 = scratch[67][tid];
      cdot_0 += backward_94;
      double backward_118 = scratch[102][tid];
      cdot_0 += backward_118;
      double backward_139 = scratch[140][tid];
      cdot_0 += backward_139;
      double backward_170 = scratch[154][tid];
      cdot_0 += backward_170;
    }
    else if (wid == 18)
    {
      double forward_44 = scratch[7][tid];
      ddot_0 += forward_44;
      double forward_45 = scratch[8][tid];
      ddot_0 += forward_45;
      double forward_49 = scratch[11][tid];
      ddot_0 += forward_49;
      double forward_71 = scratch[41][tid];
      ddot_0 += forward_71;
      double forward_82 = scratch[45][tid];
      ddot_0 += forward_82;
      double forward_112 = scratch[57][tid];
      ddot_0 += forward_112;
      double forward_113 = scratch[58][tid];
      ddot_0 += forward_113;
      double forward_121 = scratch[85][tid];
      ddot_0 += forward_121;
      double forward_126 = scratch[89][tid];
      ddot_0 += forward_126;
      double forward_134 = scratch[96][tid];
      ddot_0 += forward_134;
      double forward_140 = scratch[121][tid];
      ddot_0 += forward_140;
      double forward_167 = scratch[131][tid];
      ddot_0 += forward_167;
      double backward_23 = scratch[21][tid];
      ddot_0 += backward_23;
      double backward_33 = scratch[24][tid];
      ddot_0 += backward_33;
      double backward_55 = scratch[33][tid];
      ddot_0 += backward_55;
      double backward_68 = scratch[38][tid];
      ddot_0 += backward_68;
      double backward_69 = scratch[39][tid];
      ddot_0 += backward_69;
      double backward_74 = scratch[62][tid];
      ddot_0 += backward_74;
      double backward_84 = scratch[66][tid];
      ddot_0 += backward_84;
      double backward_94 = scratch[67][tid];
      ddot_0 += backward_94;
      double backward_97 = scratch[69][tid];
      ddot_0 += backward_97;
      double backward_98 = scratch[70][tid];
      ddot_0 += backward_98;
      double backward_100 = scratch[71][tid];
      ddot_0 = __fma_rn(2.0, backward_100, ddot_0);
      double backward_116 = scratch[101][tid];
      ddot_0 += backward_116;
      double backward_125 = scratch[108][tid];
      ddot_0 += backward_125;
      double backward_130 = scratch[113][tid];
      ddot_0 += backward_130;
      double backward_143 = scratch[142][tid];
      ddot_0 += backward_143;
      double backward_146 = scratch[143][tid];
      ddot_0 += backward_146;
      double forward_23 = scratch[1][tid];
      cdot_0 += forward_23;
      double forward_33 = scratch[4][tid];
      cdot_0 += forward_33;
      double forward_55 = scratch[13][tid];
      cdot_0 += forward_55;
      double forward_68 = scratch[18][tid];
      cdot_0 += forward_68;
      double forward_69 = scratch[19][tid];
      cdot_0 += forward_69;
      double forward_84 = scratch[46][tid];
      cdot_0 += forward_84;
      double forward_94 = scratch[47][tid];
      cdot_0 += forward_94;
      double forward_97 = scratch[49][tid];
      cdot_0 += forward_97;
      double forward_98 = scratch[50][tid];
      cdot_0 += forward_98;
      double forward_116 = scratch[81][tid];
      cdot_0 += forward_116;
      double forward_125 = scratch[88][tid];
      cdot_0 += forward_125;
      double forward_130 = scratch[93][tid];
      cdot_0 += forward_130;
      double forward_143 = scratch[122][tid];
      cdot_0 += forward_143;
      double forward_146 = scratch[123][tid];
      cdot_0 += forward_146;
      double backward_44 = scratch[27][tid];
      cdot_0 += backward_44;
      double backward_45 = scratch[28][tid];
      cdot_0 += backward_45;
      double backward_49 = scratch[31][tid];
      cdot_0 += backward_49;
      double backward_71 = scratch[61][tid];
      cdot_0 += backward_71;
      double backward_82 = scratch[65][tid];
      cdot_0 += backward_82;
      double backward_112 = scratch[77][tid];
      cdot_0 += backward_112;
      double backward_113 = scratch[78][tid];
      cdot_0 += backward_113;
      double backward_121 = scratch[105][tid];
      cdot_0 += backward_121;
      double backward_126 = scratch[109][tid];
      cdot_0 += backward_126;
      double backward_134 = scratch[116][tid];
      cdot_0 += backward_134;
      double backward_140 = scratch[141][tid];
      cdot_0 += backward_140;
      double backward_167 = scratch[151][tid];
      cdot_0 += backward_167;
    }
    else if (wid == 19)
    {
      double forward_32 = scratch[3][tid];
      ddot_0 += forward_32;
      double forward_46 = scratch[9][tid];
      ddot_0 += forward_46;
      double forward_57 = scratch[15][tid];
      ddot_0 += forward_57;
      double forward_69 = scratch[19][tid];
      ddot_0 += forward_69;
      double forward_70 = scratch[40][tid];
      ddot_0 += forward_70;
      double forward_101 = scratch[52][tid];
      ddot_0 += forward_101;
      double forward_103 = scratch[53][tid];
      ddot_0 += forward_103;
      double forward_104 = scratch[54][tid];
      ddot_0 += forward_104;
      double forward_127 = scratch[90][tid];
      ddot_0 += forward_127;
      double forward_137 = scratch[98][tid];
      ddot_0 += forward_137;
      double forward_138 = scratch[99][tid];
      ddot_0 += forward_138;
      double forward_159 = scratch[127][tid];
      ddot_0 += forward_159;
      double forward_166 = scratch[130][tid];
      ddot_0 += forward_166;
      double forward_187 = scratch[138][tid];
      ddot_0 += forward_187;
      double forward_189 = scratch[139][tid];
      ddot_0 += forward_189;
      double backward_21 = scratch[20][tid];
      ddot_0 += backward_21;
      double backward_23 = scratch[21][tid];
      ddot_0 += backward_23;
      double backward_39 = scratch[25][tid];
      ddot_0 += backward_39;
      double backward_44 = scratch[27][tid];
      ddot_0 = __fma_rn(2.0, backward_44, ddot_0);
      double backward_49 = scratch[31][tid];
      ddot_0 += backward_49;
      double backward_56 = scratch[34][tid];
      ddot_0 += backward_56;
      double backward_58 = scratch[36][tid];
      ddot_0 += backward_58;
      double backward_67 = scratch[37][tid];
      ddot_0 += backward_67;
      double backward_111 = scratch[76][tid];
      ddot_0 += backward_111;
      double backward_135 = scratch[117][tid];
      ddot_0 += backward_135;
      double backward_168 = scratch[152][tid];
      ddot_0 += backward_168;
      double forward_21 = scratch[0][tid];
      cdot_0 += forward_21;
      double forward_23 = scratch[1][tid];
      cdot_0 += forward_23;
      double forward_39 = scratch[5][tid];
      cdot_0 += forward_39;
      double forward_44 = scratch[7][tid];
      cdot_0 = __fma_rn(2.0, forward_44, cdot_0);
      double forward_49 = scratch[11][tid];
      cdot_0 += forward_49;
      double forward_56 = scratch[14][tid];
      cdot_0 += forward_56;
      double forward_58 = scratch[16][tid];
      cdot_0 += forward_58;
      double forward_67 = scratch[17][tid];
      cdot_0 += forward_67;
      double forward_111 = scratch[56][tid];
      cdot_0 += forward_111;
      double forward_135 = scratch[97][tid];
      cdot_0 += forward_135;
      double forward_168 = scratch[132][tid];
      cdot_0 += forward_168;
      double backward_32 = scratch[23][tid];
      cdot_0 += backward_32;
      double backward_46 = scratch[29][tid];
      cdot_0 += backward_46;
      double backward_57 = scratch[35][tid];
      cdot_0 += backward_57;
      double backward_69 = scratch[39][tid];
      cdot_0 += backward_69;
      double backward_70 = scratch[60][tid];
      cdot_0 += backward_70;
      double backward_101 = scratch[72][tid];
      cdot_0 += backward_101;
      double backward_103 = scratch[73][tid];
      cdot_0 += backward_103;
      double backward_104 = scratch[74][tid];
      cdot_0 += backward_104;
      double backward_127 = scratch[110][tid];
      cdot_0 += backward_127;
      double backward_137 = scratch[118][tid];
      cdot_0 += backward_137;
      double backward_159 = scratch[147][tid];
      cdot_0 += backward_159;
      double backward_166 = scratch[150][tid];
      cdot_0 += backward_166;
      double backward_187 = scratch[158][tid];
      cdot_0 += backward_187;
      double backward_189 = scratch[159][tid];
      cdot_0 += backward_189;
    }
    asm volatile("bar.sync 0, 640;" : : : "memory");
    scratch[wid+0][tid] = rr_f_12;
    scratch[wid+20][tid] = rr_r_12;
    scratch[wid+40][tid] = rr_f_13;
    scratch[wid+60][tid] = rr_r_13;
    scratch[wid+80][tid] = rr_f_14;
    scratch[wid+100][tid] = rr_r_14;
    asm volatile("bar.sync 0, 640;" : : : "memory");
    if (wid == 0)
    {
      double backward_235 = scratch[66][tid];
      ddot_0 += backward_235;
      double backward_236 = scratch[67][tid];
      ddot_0 += backward_236;
      double backward_237 = scratch[68][tid];
      ddot_0 += backward_237;
      double backward_280 = scratch[102][tid];
      ddot_0 += backward_280;
      double forward_235 = scratch[46][tid];
      cdot_0 += forward_235;
      double forward_236 = scratch[47][tid];
      cdot_0 += forward_236;
      double forward_237 = scratch[48][tid];
      cdot_0 += forward_237;
      double backward_245 = scratch[69][tid];
      ddot_1 += backward_245;
      double backward_265 = scratch[78][tid];
      ddot_1 += backward_265;
      double forward_245 = scratch[49][tid];
      cdot_1 += forward_245;
      double forward_265 = scratch[58][tid];
      cdot_1 += forward_265;
    }
    else if (wid == 1)
    {
      double backward_279 = scratch[101][tid];
      ddot_1 += backward_279;
    }
    else if (wid == 2)
    {
    }
    else if (wid == 3)
    {
      double backward_205 = scratch[34][tid];
      ddot_0 += backward_205;
      double backward_209 = scratch[38][tid];
      ddot_0 += backward_209;
      double forward_205 = scratch[14][tid];
      cdot_0 += forward_205;
      double forward_209 = scratch[18][tid];
      cdot_0 += forward_209;
      double forward_278 = scratch[80][tid];
      ddot_1 += forward_278;
      double forward_279 = scratch[81][tid];
      ddot_1 += forward_279;
      double forward_280 = scratch[82][tid];
      ddot_1 += forward_280;
      double backward_277 = scratch[79][tid];
      ddot_1 += backward_277;
    }
    else if (wid == 4)
    {
      double backward_278 = scratch[100][tid];
      ddot_1 += backward_278;
    }
    else if (wid == 5)
    {
      double forward_234 = scratch[45][tid];
      ddot_1 += forward_234;
      double backward_279 = scratch[101][tid];
      ddot_1 += backward_279;
      double backward_234 = scratch[65][tid];
      cdot_1 += backward_234;
    }
    else if (wid == 6)
    {
      double forward_265 = scratch[58][tid];
      ddot_0 += forward_265;
      double backward_247 = scratch[70][tid];
      ddot_0 += backward_247;
      double backward_249 = scratch[71][tid];
      ddot_0 += backward_249;
      double backward_251 = scratch[72][tid];
      ddot_0 += backward_251;
      double backward_253 = scratch[73][tid];
      ddot_0 += backward_253;
      double backward_255 = scratch[74][tid];
      ddot_0 += backward_255;
      double backward_257 = scratch[75][tid];
      ddot_0 += backward_257;
      double backward_259 = scratch[76][tid];
      ddot_0 += backward_259;
      double backward_263 = scratch[77][tid];
      ddot_0 += backward_263;
      double forward_247 = scratch[50][tid];
      cdot_0 += forward_247;
      double forward_249 = scratch[51][tid];
      cdot_0 += forward_249;
      double forward_251 = scratch[52][tid];
      cdot_0 += forward_251;
      double forward_253 = scratch[53][tid];
      cdot_0 += forward_253;
      double forward_255 = scratch[54][tid];
      cdot_0 += forward_255;
      double forward_257 = scratch[55][tid];
      cdot_0 += forward_257;
      double forward_259 = scratch[56][tid];
      cdot_0 += forward_259;
      double forward_263 = scratch[57][tid];
      cdot_0 += forward_263;
      double backward_265 = scratch[78][tid];
      cdot_0 += backward_265;
      double forward_277 = scratch[59][tid];
      ddot_1 += forward_277;
    }
    else if (wid == 7)
    {
      double backward_237 = scratch[68][tid];
      ddot_0 += backward_237;
      double backward_263 = scratch[77][tid];
      ddot_0 += backward_263;
      double forward_237 = scratch[48][tid];
      cdot_0 += forward_237;
      double forward_263 = scratch[57][tid];
      cdot_0 += forward_263;
    }
    else if (wid == 8)
    {
    }
    else if (wid == 9)
    {
    }
    else if (wid == 10)
    {
      double backward_233 = scratch[64][tid];
      ddot_0 += backward_233;
      double backward_280 = scratch[102][tid];
      ddot_0 += backward_280;
    }
    else if (wid == 11)
    {
      double forward_237 = scratch[48][tid];
      ddot_0 += forward_237;
      double forward_263 = scratch[57][tid];
      ddot_0 += forward_263;
      double backward_237 = scratch[68][tid];
      cdot_0 += backward_237;
      double backward_263 = scratch[77][tid];
      cdot_0 += backward_263;
    }
    else if (wid == 12)
    {
      double forward_245 = scratch[49][tid];
      ddot_0 += forward_245;
      double forward_247 = scratch[50][tid];
      ddot_0 += forward_247;
      double forward_249 = scratch[51][tid];
      ddot_0 += forward_249;
      double forward_251 = scratch[52][tid];
      ddot_0 += forward_251;
      double forward_253 = scratch[53][tid];
      ddot_0 += forward_253;
      double forward_255 = scratch[54][tid];
      ddot_0 += forward_255;
      double forward_257 = scratch[55][tid];
      ddot_0 += forward_257;
      double forward_259 = scratch[56][tid];
      ddot_0 += forward_259;
      double forward_263 = scratch[57][tid];
      ddot_0 += forward_263;
      double backward_245 = scratch[69][tid];
      cdot_0 += backward_245;
      double backward_247 = scratch[70][tid];
      cdot_0 += backward_247;
      double backward_249 = scratch[71][tid];
      cdot_0 += backward_249;
      double backward_251 = scratch[72][tid];
      cdot_0 += backward_251;
      double backward_253 = scratch[73][tid];
      cdot_0 += backward_253;
      double backward_255 = scratch[74][tid];
      cdot_0 += backward_255;
      double backward_257 = scratch[75][tid];
      cdot_0 += backward_257;
      double backward_259 = scratch[76][tid];
      cdot_0 += backward_259;
      double backward_263 = scratch[77][tid];
      cdot_0 += backward_263;
    }
    else if (wid == 13)
    {
      double backward_190 = scratch[20][tid];
      ddot_0 += backward_190;
      double backward_236 = scratch[67][tid];
      ddot_0 += backward_236;
      double backward_253 = scratch[73][tid];
      ddot_0 += backward_253;
      double forward_190 = scratch[0][tid];
      cdot_0 += forward_190;
      double forward_236 = scratch[47][tid];
      cdot_0 += forward_236;
      double forward_253 = scratch[53][tid];
      cdot_0 += forward_253;
    }
    else if (wid == 14)
    {
      double forward_192 = scratch[2][tid];
      ddot_0 += forward_192;
      double forward_193 = scratch[3][tid];
      ddot_0 += forward_193;
      double forward_194 = scratch[4][tid];
      ddot_0 += forward_194;
      double forward_196 = scratch[6][tid];
      ddot_0 += forward_196;
      double forward_202 = scratch[11][tid];
      ddot_0 += forward_202;
      double forward_216 = scratch[19][tid];
      ddot_0 += forward_216;
      double forward_218 = scratch[40][tid];
      ddot_0 += forward_218;
      double backward_191 = scratch[21][tid];
      ddot_0 += backward_191;
      double backward_195 = scratch[25][tid];
      ddot_0 = __fma_rn(2.0, backward_195, ddot_0);
      double forward_191 = scratch[1][tid];
      cdot_0 += forward_191;
      double forward_195 = scratch[5][tid];
      cdot_0 = __fma_rn(2.0, forward_195, cdot_0);
      double backward_192 = scratch[22][tid];
      cdot_0 += backward_192;
      double backward_193 = scratch[23][tid];
      cdot_0 += backward_193;
      double backward_194 = scratch[24][tid];
      cdot_0 += backward_194;
      double backward_196 = scratch[26][tid];
      cdot_0 += backward_196;
      double backward_202 = scratch[31][tid];
      cdot_0 += backward_202;
      double backward_216 = scratch[39][tid];
      cdot_0 += backward_216;
    }
    else if (wid == 15)
    {
      double forward_194 = scratch[4][tid];
      ddot_0 += forward_194;
      double forward_259 = scratch[56][tid];
      ddot_0 += forward_259;
      double backward_231 = scratch[62][tid];
      ddot_0 += backward_231;
      double backward_232 = scratch[63][tid];
      ddot_0 += backward_232;
      double backward_234 = scratch[65][tid];
      ddot_0 += backward_234;
      double backward_245 = scratch[69][tid];
      ddot_0 += backward_245;
      double forward_234 = scratch[45][tid];
      cdot_0 += forward_234;
      double forward_245 = scratch[49][tid];
      cdot_0 += forward_245;
      double backward_194 = scratch[24][tid];
      cdot_0 += backward_194;
      double backward_259 = scratch[76][tid];
      cdot_0 += backward_259;
    }
    else if (wid == 16)
    {
      double forward_209 = scratch[18][tid];
      ddot_0 += forward_209;
      double forward_233 = scratch[44][tid];
      ddot_0 += forward_233;
      double forward_249 = scratch[51][tid];
      ddot_0 += forward_249;
      double backward_209 = scratch[38][tid];
      cdot_0 += backward_209;
      double backward_249 = scratch[71][tid];
      cdot_0 += backward_249;
    }
    else if (wid == 17)
    {
      double forward_193 = scratch[3][tid];
      ddot_0 += forward_193;
      double forward_221 = scratch[41][tid];
      ddot_0 += forward_221;
      double forward_255 = scratch[54][tid];
      ddot_0 += forward_255;
      double backward_205 = scratch[34][tid];
      ddot_0 += backward_205;
      double forward_205 = scratch[14][tid];
      cdot_0 += forward_205;
      double backward_193 = scratch[23][tid];
      cdot_0 += backward_193;
      double backward_221 = scratch[61][tid];
      cdot_0 += backward_221;
      double backward_255 = scratch[74][tid];
      cdot_0 += backward_255;
    }
    else if (wid == 18)
    {
      double forward_192 = scratch[2][tid];
      ddot_0 += forward_192;
      double forward_203 = scratch[12][tid];
      ddot_0 += forward_203;
      double forward_208 = scratch[17][tid];
      ddot_0 += forward_208;
      double forward_232 = scratch[43][tid];
      ddot_0 += forward_232;
      double forward_247 = scratch[50][tid];
      ddot_0 += forward_247;
      double backward_197 = scratch[27][tid];
      ddot_0 += backward_197;
      double backward_202 = scratch[31][tid];
      ddot_0 += backward_202;
      double backward_204 = scratch[33][tid];
      ddot_0 += backward_204;
      double forward_197 = scratch[7][tid];
      cdot_0 += forward_197;
      double forward_202 = scratch[11][tid];
      cdot_0 += forward_202;
      double forward_204 = scratch[13][tid];
      cdot_0 += forward_204;
      double backward_192 = scratch[22][tid];
      cdot_0 += backward_192;
      double backward_203 = scratch[32][tid];
      cdot_0 += backward_203;
      double backward_208 = scratch[37][tid];
      cdot_0 += backward_208;
      double backward_247 = scratch[70][tid];
      cdot_0 += backward_247;
    }
    else if (wid == 19)
    {
      double forward_201 = scratch[10][tid];
      ddot_0 += forward_201;
      double forward_207 = scratch[16][tid];
      ddot_0 += forward_207;
      double forward_231 = scratch[42][tid];
      ddot_0 += forward_231;
      double forward_235 = scratch[46][tid];
      ddot_0 += forward_235;
      double forward_251 = scratch[52][tid];
      ddot_0 += forward_251;
      double backward_196 = scratch[26][tid];
      ddot_0 += backward_196;
      double backward_218 = scratch[60][tid];
      ddot_0 += backward_218;
      double backward_221 = scratch[61][tid];
      ddot_0 += backward_221;
      double backward_249 = scratch[71][tid];
      ddot_0 += backward_249;
      double backward_277 = scratch[79][tid];
      ddot_0 += backward_277;
      double backward_278 = scratch[100][tid];
      ddot_0 += backward_278;
      double backward_279 = scratch[101][tid];
      ddot_0 += backward_279;
      double backward_280 = scratch[102][tid];
      ddot_0 += backward_280;
      double forward_196 = scratch[6][tid];
      cdot_0 += forward_196;
      double forward_221 = scratch[41][tid];
      cdot_0 += forward_221;
      double forward_249 = scratch[51][tid];
      cdot_0 += forward_249;
      double backward_201 = scratch[30][tid];
      cdot_0 += backward_201;
      double backward_207 = scratch[36][tid];
      cdot_0 += backward_207;
      double backward_235 = scratch[66][tid];
      cdot_0 += backward_235;
      double backward_251 = scratch[72][tid];
      cdot_0 += backward_251;
    }
    asm volatile("bar.sync 0, 640;" : : : "memory");
    {
      double scale = 1.0;
      const bool need_scale = ((ddot_0 * dt * 0.09058503722621332) > 
        stif_mole_frac_0); 
      if (__any(need_scale))
      {
        double recip_ddot = 1.0/ddot_0;
        if (tid == 0)
          int_mirror[wid] = index_constants[0];
        int index = int_mirror[wid];
        double recip_mass = recip_molecular_masses[index];
        double part_sum = cdot_0 + stif_diffusion_0 * recip_mass;
        double c0 = stif_mole_frac_0 * part_sum * recip_ddot;
  c0 = stif_mole_frac_0 * (part_sum + (stif_mole_frac_0 - c0) * recip_dt) * 
          recip_ddot; 
        if (need_scale)
          scale = c0/stif_mole_frac_0;
      }
      {
        scratch[(threadIdx.x >> 5)+0][tid] = scale;
      }
    }
    {
      double scale = 1.0;
      const bool need_scale = ((ddot_1 * dt * 0.09058503722621332) > 
        stif_mole_frac_1); 
      if (__any(need_scale))
      {
        double recip_ddot = 1.0/ddot_1;
        if (tid == 1)
          int_mirror[wid] = index_constants[0];
        int index = int_mirror[wid];
        double recip_mass = recip_molecular_masses[index];
        double part_sum = cdot_1 + stif_diffusion_1 * recip_mass;
        double c0 = stif_mole_frac_1 * part_sum * recip_ddot;
  c0 = stif_mole_frac_1 * (part_sum + (stif_mole_frac_1 - c0) * recip_dt) * 
          recip_ddot; 
        if (need_scale)
          scale = c0/stif_mole_frac_1;
      }
      if (((threadIdx.x >> 5)+20) < 27)
      {
        scratch[(threadIdx.x >> 5)+20][tid] = scale;
      }
    }
    asm volatile("bar.sync 0, 640;" : : : "memory");
    if (wid == 0)
    {
      double scale_NC_CH3 = scratch[17][tid];
      rr_f_0 *= scale_NC_CH3;
      double scale_NC_H = scratch[18][tid];
      rr_f_0 *= scale_NC_H;
      rr_f_1 *= scale_NC_H;
      rr_f_2 *= scale_NC_CH3;
      rr_r_3 *= scale_NC_H;
      double scale_NC_CH3CHO = scratch[10][tid];
      rr_r_4 *= scale_NC_CH3CHO;
      rr_r_4 *= scale_NC_H;
      rr_r_6 *= scale_NC_CH3;
      rr_r_6 *= scale_NC_H;
      double scale_NC_OH = scratch[19][tid];
      rr_r_7 *= scale_NC_OH;
      rr_r_8 *= scale_NC_OH;
      rr_f_9 *= scale_NC_OH;
      double scale_NC_C5H9 = scratch[2][tid];
      rr_f_10 *= scale_NC_C5H9;
      rr_r_10 *= scale_NC_CH3;
      rr_r_11 *= scale_NC_C5H9;
      double scale_NC_C5H10_1 = scratch[5][tid];
      rr_f_11 *= scale_NC_C5H10_1;
      rr_f_11 *= scale_NC_CH3;
      double scale_NC_H2O2 = scratch[13][tid];
      rr_r_12 *= scale_NC_H2O2;
      double scale_NC_C3H5_A = scratch[14][tid];
      rr_f_13 *= scale_NC_C3H5_A;
      rr_r_13 *= scale_NC_OH;
      double scale_NC_NC7KET = scratch[23][tid];
      rr_f_14 *= scale_NC_NC7KET;
      double scale_NC_CH3COCH2 = scratch[24][tid];
      rr_r_14 *= scale_NC_CH3COCH2;
      rr_r_14 *= scale_NC_OH;
    }
    else if (wid == 1)
    {
      double scale_NC_C2H5 = scratch[15][tid];
      rr_r_0 *= scale_NC_C2H5;
      double scale_NC_H = scratch[18][tid];
      rr_f_0 *= scale_NC_H;
      double scale_NC_O = scratch[16][tid];
      rr_f_1 *= scale_NC_O;
      double scale_NC_OH = scratch[19][tid];
      rr_r_1 *= scale_NC_OH;
      double scale_NC_CH3O2H = scratch[7][tid];
      rr_r_4 *= scale_NC_CH3O2H;
      double scale_NC_CH3CHO = scratch[10][tid];
      rr_f_4 *= scale_NC_CH3CHO;
      double scale_NC_CH3O2 = scratch[11][tid];
      rr_f_4 *= scale_NC_CH3O2;
      double scale_NC_C5H10_1 = scratch[5][tid];
      rr_r_7 *= scale_NC_C5H10_1;
      rr_r_7 *= scale_NC_CH3CHO;
      rr_r_7 *= scale_NC_OH;
      rr_r_8 *= scale_NC_H;
      rr_r_8 *= scale_NC_OH;
      rr_f_9 *= scale_NC_H;
      double scale_NC_C4H7 = scratch[8][tid];
      rr_f_10 *= scale_NC_C4H7;
      rr_r_10 *= scale_NC_H;
      double scale_NC_H2O2 = scratch[13][tid];
      rr_f_11 *= scale_NC_H2O2;
      rr_f_11 *= scale_NC_H;
      double scale_NC_C3H5_A = scratch[14][tid];
      rr_r_12 *= scale_NC_C3H5_A;
      double scale_NC_CH3 = scratch[17][tid];
      rr_f_13 *= scale_NC_CH3;
      rr_r_13 *= scale_NC_OH;
      double scale_NC_C2H5CHO = scratch[21][tid];
      rr_r_14 *= scale_NC_C2H5CHO;
      double scale_NC_NC7KET = scratch[23][tid];
      rr_f_14 *= scale_NC_NC7KET;
      double scale_NC_C2H5COCH2 = scratch[25][tid];
      rr_r_14 *= scale_NC_C2H5COCH2;
      rr_r_14 *= scale_NC_OH;
    }
    else if (wid == 2)
    {
      double scale_NC_CH3 = scratch[17][tid];
      rr_r_0 *= scale_NC_CH3;
      double scale_NC_OH = scratch[19][tid];
      rr_r_0 *= scale_NC_OH;
      double scale_NC_O = scratch[16][tid];
      rr_r_1 *= scale_NC_O;
      rr_f_1 *= scale_NC_CH3;
      double scale_NC_C4H7 = scratch[8][tid];
      rr_f_3 *= scale_NC_C4H7;
      double scale_NC_C2H3CO = scratch[4][tid];
      rr_f_4 *= scale_NC_C2H3CO;
      double scale_NC_H = scratch[18][tid];
      rr_r_5 *= scale_NC_H;
      double scale_NC_NC7H16 = scratch[12][tid];
      rr_f_6 *= scale_NC_NC7H16;
      rr_r_6 *= scale_NC_H;
      double scale_NC_C2H5CHO = scratch[21][tid];
      rr_r_7 *= scale_NC_C2H5CHO;
      double scale_NC_C4H8_1 = scratch[9][tid];
      rr_r_7 *= scale_NC_C4H8_1;
      rr_r_7 *= scale_NC_OH;
      rr_r_8 *= scale_NC_O;
      rr_f_9 *= scale_NC_O;
      rr_r_9 *= scale_NC_H;
      rr_f_10 *= scale_NC_C4H7;
      rr_f_10 *= scale_NC_CH3;
      double scale_NC_CH3CHO = scratch[10][tid];
      rr_r_11 *= scale_NC_CH3CHO;
      double scale_NC_C2H5 = scratch[15][tid];
      rr_f_11 *= scale_NC_C2H5;
      rr_f_11 *= scale_NC_O;
      rr_r_11 *= scale_NC_H;
      double scale_NC_C3H5_A = scratch[14][tid];
      rr_f_12 *= scale_NC_C3H5_A;
      rr_f_12 *= scale_NC_H;
      rr_r_13 *= scale_NC_C2H5;
      rr_f_13 *= scale_NC_OH;
      double scale_NC_NC3H7COCH2 = scratch[0][tid];
      rr_r_14 *= scale_NC_NC3H7COCH2;
      double scale_NC_NC7KET = scratch[23][tid];
      rr_f_14 *= scale_NC_NC7KET;
      rr_r_14 *= scale_NC_CH3CHO;
      rr_r_14 *= scale_NC_OH;
    }
    else if (wid == 3)
    {
      double scale_NC_CH3 = scratch[17][tid];
      rr_f_0 *= scale_NC_CH3;
      rr_f_1 *= scale_NC_CH3;
      double scale_NC_H = scratch[18][tid];
      rr_f_2 *= scale_NC_H;
      double scale_NC_C4H8_1 = scratch[9][tid];
      rr_f_3 *= scale_NC_C4H8_1;
      double scale_NC_C2H5 = scratch[15][tid];
      rr_r_3 *= scale_NC_C2H5;
      rr_r_4 *= scale_NC_H;
      double scale_NC_OH = scratch[19][tid];
      rr_r_5 *= scale_NC_OH;
      double scale_NC_PC4H9 = scratch[1][tid];
      rr_r_6 *= scale_NC_PC4H9;
      double scale_NC_NC7H16 = scratch[12][tid];
      rr_f_6 *= scale_NC_NC7H16;
      rr_r_7 *= scale_NC_OH;
      rr_f_8 *= scale_NC_CH3;
      rr_f_8 *= scale_NC_OH;
      rr_r_9 *= scale_NC_C2H5;
      double scale_NC_C4H7 = scratch[8][tid];
      rr_f_10 *= scale_NC_C4H7;
      double scale_NC_C3H5_A = scratch[14][tid];
      rr_f_10 *= scale_NC_C3H5_A;
      double scale_NC_C5H11_1 = scratch[20][tid];
      rr_f_11 *= scale_NC_C5H11_1;
      double scale_NC_C5H10_1 = scratch[5][tid];
      rr_r_11 *= scale_NC_C5H10_1;
      rr_r_11 *= scale_NC_H;
      rr_f_12 *= scale_NC_C3H5_A;
      rr_f_12 *= scale_NC_CH3;
      rr_r_13 *= scale_NC_C2H5;
      rr_f_13 *= scale_NC_H;
    }
    else if (wid == 4)
    {
      double scale_NC_H = scratch[18][tid];
      rr_f_0 *= scale_NC_H;
      double scale_NC_CH3 = scratch[17][tid];
      rr_f_1 *= scale_NC_CH3;
      double scale_NC_OH = scratch[19][tid];
      rr_f_2 *= scale_NC_OH;
      double scale_NC_C2H5CHO = scratch[21][tid];
      rr_f_3 *= scale_NC_C2H5CHO;
      double scale_NC_C2H5 = scratch[15][tid];
      rr_r_3 *= scale_NC_C2H5;
      double scale_NC_C3H5_A = scratch[14][tid];
      rr_f_5 *= scale_NC_C3H5_A;
      double scale_NC_NC7H16 = scratch[12][tid];
      rr_f_6 *= scale_NC_NC7H16;
      rr_f_6 *= scale_NC_H;
      double scale_NC_C7H14OOHO2 = scratch[26][tid];
      rr_f_7 *= scale_NC_C7H14OOHO2;
      double scale_NC_O = scratch[16][tid];
      rr_f_8 *= scale_NC_O;
      rr_f_8 *= scale_NC_CH3;
      rr_r_8 *= scale_NC_H;
      double scale_NC_H2O2 = scratch[13][tid];
      rr_r_9 *= scale_NC_H2O2;
      rr_r_9 *= scale_NC_C2H5;
      double scale_NC_C4H7 = scratch[8][tid];
      rr_f_10 *= scale_NC_C4H7;
      rr_f_11 *= scale_NC_H2O2;
      rr_f_12 *= scale_NC_C3H5_A;
      rr_f_12 *= scale_NC_C2H5;
      double scale_NC_CH3CHO = scratch[10][tid];
      rr_r_13 *= scale_NC_CH3CHO;
      rr_f_13 *= scale_NC_O;
    }
    else if (wid == 5)
    {
      double scale_NC_O = scratch[16][tid];
      rr_f_0 *= scale_NC_O;
      double scale_NC_PC4H9 = scratch[1][tid];
      rr_r_3 *= scale_NC_PC4H9;
      double scale_NC_C5H10_1 = scratch[5][tid];
      rr_f_3 *= scale_NC_C5H10_1;
      rr_f_3 *= scale_NC_O;
      double scale_NC_NC7H16 = scratch[12][tid];
      rr_f_6 *= scale_NC_NC7H16;
      rr_f_6 *= scale_NC_O;
      double scale_NC_OH = scratch[19][tid];
      rr_r_6 *= scale_NC_OH;
      rr_r_7 *= scale_NC_C5H10_1;
      rr_f_7 *= scale_NC_OH;
      rr_f_8 *= scale_NC_O;
      rr_r_8 *= scale_NC_OH;
      double scale_NC_C2H5 = scratch[15][tid];
      rr_f_9 *= scale_NC_C2H5;
      double scale_NC_CH3 = scratch[17][tid];
      rr_r_9 *= scale_NC_CH3;
      double scale_NC_H = scratch[18][tid];
      rr_f_9 *= scale_NC_H;
      double scale_NC_C4H7 = scratch[8][tid];
      rr_f_10 *= scale_NC_C4H7;
      rr_f_10 *= scale_NC_H;
      double scale_NC_CH3O2 = scratch[11][tid];
      rr_f_11 *= scale_NC_CH3O2;
      rr_r_11 *= scale_NC_CH3;
      double scale_NC_C3H5_A = scratch[14][tid];
      rr_r_12 *= scale_NC_C3H5_A;
      double scale_NC_C2H5COCH2 = scratch[25][tid];
      rr_f_13 *= scale_NC_C2H5COCH2;
      rr_r_13 *= scale_NC_C2H5;
    }
    else if (wid == 6)
    {
      double scale_NC_H = scratch[18][tid];
      rr_r_0 *= scale_NC_H;
      double scale_NC_CH3 = scratch[17][tid];
      rr_f_2 *= scale_NC_CH3;
      double scale_NC_O = scratch[16][tid];
      rr_f_3 *= scale_NC_O;
      rr_r_3 *= scale_NC_H;
      double scale_NC_C3H5_A = scratch[14][tid];
      rr_f_4 *= scale_NC_C3H5_A;
      double scale_NC_OH = scratch[19][tid];
      rr_r_4 *= scale_NC_OH;
      rr_f_5 *= scale_NC_OH;
      double scale_NC_NC7H16 = scratch[12][tid];
      rr_f_6 *= scale_NC_NC7H16;
      rr_f_6 *= scale_NC_OH;
      rr_f_7 *= scale_NC_OH;
      rr_f_8 *= scale_NC_CH3;
      double scale_NC_C2H5 = scratch[15][tid];
      rr_r_9 *= scale_NC_C2H5;
      rr_r_9 *= scale_NC_H;
      double scale_NC_C4H7 = scratch[8][tid];
      rr_f_10 *= scale_NC_C4H7;
      rr_f_10 *= scale_NC_C2H5;
      double scale_NC_CH3O2H = scratch[7][tid];
      rr_r_11 *= scale_NC_CH3O2H;
      double scale_NC_CH3O2 = scratch[11][tid];
      rr_f_11 *= scale_NC_CH3O2;
      rr_f_12 *= scale_NC_C3H5_A;
      rr_r_12 *= scale_NC_OH;
      double scale_NC_NC3H7COCH2 = scratch[0][tid];
      rr_r_13 *= scale_NC_NC3H7COCH2;
      rr_f_13 *= scale_NC_OH;
    }
    else if (wid == 7)
    {
      double scale_NC_CH3CHO = scratch[10][tid];
      rr_f_2 *= scale_NC_CH3CHO;
      double scale_NC_CH3 = scratch[17][tid];
      rr_r_2 *= scale_NC_CH3;
      double scale_NC_O = scratch[16][tid];
      rr_f_3 *= scale_NC_O;
      double scale_NC_H = scratch[18][tid];
      rr_r_3 *= scale_NC_H;
      double scale_NC_CH3O2 = scratch[11][tid];
      rr_f_4 *= scale_NC_CH3O2;
      double scale_NC_C3H5_A = scratch[14][tid];
      rr_f_4 *= scale_NC_C3H5_A;
      double scale_NC_NC7H16 = scratch[12][tid];
      rr_f_6 *= scale_NC_NC7H16;
      double scale_NC_H2O2 = scratch[13][tid];
      rr_r_6 *= scale_NC_H2O2;
      rr_r_7 *= scale_NC_CH3;
      rr_f_7 *= scale_NC_H;
      rr_f_8 *= scale_NC_H;
      double scale_NC_OH = scratch[19][tid];
      rr_r_8 *= scale_NC_OH;
      rr_f_9 *= scale_NC_CH3;
      rr_r_9 *= scale_NC_H;
      double scale_NC_C4H8_1 = scratch[9][tid];
      rr_f_10 *= scale_NC_C4H8_1;
      rr_r_10 *= scale_NC_C3H5_A;
      rr_r_10 *= scale_NC_CH3;
      rr_f_11 *= scale_NC_H2O2;
      rr_f_11 *= scale_NC_OH;
      rr_r_12 *= scale_NC_H;
      double scale_NC_NC3H7COCH2 = scratch[0][tid];
      rr_r_13 *= scale_NC_NC3H7COCH2;
      rr_r_13 *= scale_NC_H2O2;
    }
    else if (wid == 8)
    {
      double scale_NC_H2O2 = scratch[13][tid];
      rr_r_0 *= scale_NC_H2O2;
      double scale_NC_OH = scratch[19][tid];
      rr_f_0 *= scale_NC_OH;
      rr_r_1 *= scale_NC_H2O2;
      double scale_NC_CH3CHO = scratch[10][tid];
      rr_f_2 *= scale_NC_CH3CHO;
      double scale_NC_H = scratch[18][tid];
      rr_r_3 *= scale_NC_H;
      double scale_NC_CH3 = scratch[17][tid];
      rr_f_4 *= scale_NC_CH3;
      rr_f_4 *= scale_NC_OH;
      rr_f_5 *= scale_NC_OH;
      double scale_NC_NC7H16 = scratch[12][tid];
      rr_f_6 *= scale_NC_NC7H16;
      rr_f_6 *= scale_NC_CH3;
      rr_r_7 *= scale_NC_CH3;
      rr_f_7 *= scale_NC_OH;
      rr_f_8 *= scale_NC_H;
      double scale_NC_C3H5_A = scratch[14][tid];
      rr_f_9 *= scale_NC_C3H5_A;
      rr_r_9 *= scale_NC_CH3;
      double scale_NC_C4H7 = scratch[8][tid];
      rr_r_10 *= scale_NC_C4H7;
      double scale_NC_C4H8_1 = scratch[9][tid];
      rr_f_10 *= scale_NC_C4H8_1;
      rr_r_10 *= scale_NC_H;
      double scale_NC_CH3O2 = scratch[11][tid];
      rr_f_11 *= scale_NC_CH3O2;
      double scale_NC_NC3H7COCH2 = scratch[0][tid];
      rr_r_13 *= scale_NC_NC3H7COCH2;
      double scale_NC_CH3O2H = scratch[7][tid];
      rr_r_13 *= scale_NC_CH3O2H;
      rr_f_13 *= scale_NC_CH3O2;
    }
    else if (wid == 9)
    {
      double scale_NC_H = scratch[18][tid];
      rr_f_0 *= scale_NC_H;
      rr_f_1 *= scale_NC_H;
      double scale_NC_CH3CHO = scratch[10][tid];
      rr_f_2 *= scale_NC_CH3CHO;
      double scale_NC_OH = scratch[19][tid];
      rr_f_2 *= scale_NC_OH;
      double scale_NC_C5H11_1 = scratch[20][tid];
      rr_f_3 *= scale_NC_C5H11_1;
      rr_f_5 *= scale_NC_H;
      double scale_NC_NC7H16 = scratch[12][tid];
      rr_f_6 *= scale_NC_NC7H16;
      double scale_NC_O = scratch[16][tid];
      rr_f_7 *= scale_NC_O;
      double scale_NC_CH3 = scratch[17][tid];
      rr_r_7 *= scale_NC_CH3;
      rr_r_7 *= scale_NC_OH;
      rr_f_8 *= scale_NC_OH;
      double scale_NC_C3H5_A = scratch[14][tid];
      rr_r_9 *= scale_NC_C3H5_A;
      rr_r_9 *= scale_NC_H;
      double scale_NC_C4H7 = scratch[8][tid];
      rr_r_10 *= scale_NC_C4H7;
      double scale_NC_C4H8_1 = scratch[9][tid];
      rr_f_10 *= scale_NC_C4H8_1;
      rr_f_10 *= scale_NC_H;
      double scale_NC_CH3O2H = scratch[7][tid];
      rr_r_11 *= scale_NC_CH3O2H;
      double scale_NC_CH3O2 = scratch[11][tid];
      rr_f_11 *= scale_NC_CH3O2;
      double scale_NC_C2H5 = scratch[15][tid];
      rr_r_11 *= scale_NC_C2H5;
      rr_r_13 *= scale_NC_C5H11_1;
      rr_f_13 *= scale_NC_NC7H16;
      rr_r_13 *= scale_NC_C2H5;
    }
    else if (wid == 10)
    {
      double scale_NC_H = scratch[18][tid];
      rr_r_0 *= scale_NC_H;
      double scale_NC_OH = scratch[19][tid];
      rr_f_1 *= scale_NC_OH;
      double scale_NC_CH3CHO = scratch[10][tid];
      rr_f_2 *= scale_NC_CH3CHO;
      rr_f_2 *= scale_NC_H;
      double scale_NC_CH3 = scratch[17][tid];
      rr_r_3 *= scale_NC_CH3;
      rr_r_4 *= scale_NC_CH3CHO;
      double scale_NC_O = scratch[16][tid];
      rr_f_5 *= scale_NC_O;
      rr_r_5 *= scale_NC_OH;
      double scale_NC_NC7H16 = scratch[12][tid];
      rr_f_6 *= scale_NC_NC7H16;
      double scale_NC_C2H5 = scratch[15][tid];
      rr_f_6 *= scale_NC_C2H5;
      rr_r_7 *= scale_NC_H;
      rr_f_7 *= scale_NC_OH;
      double scale_NC_H2O2 = scratch[13][tid];
      rr_f_8 *= scale_NC_H2O2;
      rr_f_9 *= scale_NC_O;
      rr_r_9 *= scale_NC_CH3;
      rr_r_9 *= scale_NC_H;
      double scale_NC_C4H7 = scratch[8][tid];
      rr_r_10 *= scale_NC_C4H7;
      double scale_NC_C4H8_1 = scratch[9][tid];
      rr_f_10 *= scale_NC_C4H8_1;
      rr_f_10 *= scale_NC_OH;
      double scale_NC_C2H3CO = scratch[4][tid];
      rr_r_11 *= scale_NC_C2H3CO;
      rr_f_11 *= scale_NC_OH;
      rr_f_12 *= scale_NC_OH;
      double scale_NC_C7H15_1 = scratch[6][tid];
      rr_r_13 *= scale_NC_C7H15_1;
      rr_f_13 *= scale_NC_NC7H16;
      rr_f_13 *= scale_NC_H;
    }
    else if (wid == 11)
    {
      double scale_NC_CH3 = scratch[17][tid];
      rr_r_0 *= scale_NC_CH3;
      double scale_NC_C2H = scratch[3][tid];
      rr_f_1 *= scale_NC_C2H;
      double scale_NC_CH3CHO = scratch[10][tid];
      rr_f_2 *= scale_NC_CH3CHO;
      double scale_NC_O = scratch[16][tid];
      rr_f_2 *= scale_NC_O;
      double scale_NC_OH = scratch[19][tid];
      rr_r_2 *= scale_NC_OH;
      rr_r_3 *= scale_NC_O;
      rr_r_4 *= scale_NC_CH3;
      double scale_NC_H2O2 = scratch[13][tid];
      rr_r_5 *= scale_NC_H2O2;
      double scale_NC_C7H15_1 = scratch[6][tid];
      rr_r_6 *= scale_NC_C7H15_1;
      double scale_NC_NC7H16 = scratch[12][tid];
      rr_f_6 *= scale_NC_NC7H16;
      rr_r_7 *= scale_NC_O;
      double scale_NC_H = scratch[18][tid];
      rr_f_7 *= scale_NC_H;
      rr_r_7 *= scale_NC_OH;
      rr_f_8 *= scale_NC_H2O2;
      rr_f_8 *= scale_NC_H;
      rr_r_8 *= scale_NC_OH;
      rr_f_9 *= scale_NC_O;
      rr_r_9 *= scale_NC_H;
      double scale_NC_C4H7 = scratch[8][tid];
      rr_r_10 *= scale_NC_C4H7;
      double scale_NC_C4H8_1 = scratch[9][tid];
      rr_f_10 *= scale_NC_C4H8_1;
      double scale_NC_C2H3CO = scratch[4][tid];
      rr_r_11 *= scale_NC_C2H3CO;
      rr_f_11 *= scale_NC_H;
      double scale_NC_C3H5_A = scratch[14][tid];
      rr_f_12 *= scale_NC_C3H5_A;
      rr_r_12 *= scale_NC_H;
      rr_r_13 *= scale_NC_C7H15_1;
      rr_f_13 *= scale_NC_NC7H16;
      rr_f_13 *= scale_NC_O;
      rr_r_13 *= scale_NC_OH;
    }
    else if (wid == 12)
    {
      double scale_NC_OH = scratch[19][tid];
      rr_f_0 *= scale_NC_OH;
      rr_f_1 *= scale_NC_OH;
      double scale_NC_CH3CHO = scratch[10][tid];
      rr_f_2 *= scale_NC_CH3CHO;
      double scale_NC_H2O2 = scratch[13][tid];
      rr_r_2 *= scale_NC_H2O2;
      double scale_NC_CH3O2H = scratch[7][tid];
      rr_f_3 *= scale_NC_CH3O2H;
      rr_r_3 *= scale_NC_OH;
      double scale_NC_C4H7 = scratch[8][tid];
      rr_f_4 *= scale_NC_C4H7;
      rr_r_4 *= scale_NC_OH;
      double scale_NC_CH3 = scratch[17][tid];
      rr_f_5 *= scale_NC_CH3;
      double scale_NC_NC7H16 = scratch[12][tid];
      rr_f_6 *= scale_NC_NC7H16;
      double scale_NC_O = scratch[16][tid];
      rr_f_7 *= scale_NC_O;
      double scale_NC_H = scratch[18][tid];
      rr_r_7 *= scale_NC_H;
      rr_r_7 *= scale_NC_OH;
      rr_r_8 *= scale_NC_H2O2;
      rr_r_8 *= scale_NC_CH3;
      double scale_NC_C3H5_A = scratch[14][tid];
      rr_r_9 *= scale_NC_C3H5_A;
      rr_f_9 *= scale_NC_OH;
      double scale_NC_PC4H9 = scratch[1][tid];
      rr_f_10 *= scale_NC_PC4H9;
      double scale_NC_C2H5 = scratch[15][tid];
      rr_r_10 *= scale_NC_C2H5;
      double scale_NC_C2H3CO = scratch[4][tid];
      rr_r_11 *= scale_NC_C2H3CO;
      rr_f_11 *= scale_NC_O;
      rr_r_11 *= scale_NC_OH;
      rr_f_12 *= scale_NC_H;
      double scale_NC_C7H15_1 = scratch[6][tid];
      rr_r_13 *= scale_NC_C7H15_1;
      rr_f_13 *= scale_NC_NC7H16;
      rr_f_13 *= scale_NC_OH;
    }
    else if (wid == 13)
    {
      double scale_NC_H = scratch[18][tid];
      rr_r_0 *= scale_NC_H;
      rr_f_1 *= scale_NC_H;
      double scale_NC_CH3CHO = scratch[10][tid];
      rr_f_2 *= scale_NC_CH3CHO;
      double scale_NC_CH3 = scratch[17][tid];
      rr_f_2 *= scale_NC_CH3;
      rr_r_3 *= scale_NC_H;
      double scale_NC_C4H7 = scratch[8][tid];
      rr_f_4 *= scale_NC_C4H7;
      double scale_NC_CH3O2 = scratch[11][tid];
      rr_f_4 *= scale_NC_CH3O2;
      double scale_NC_CH3O2H = scratch[7][tid];
      rr_r_6 *= scale_NC_CH3O2H;
      rr_f_6 *= scale_NC_CH3O2;
      double scale_NC_NC7H16 = scratch[12][tid];
      rr_f_6 *= scale_NC_NC7H16;
      double scale_NC_O = scratch[16][tid];
      rr_f_7 *= scale_NC_O;
      double scale_NC_OH = scratch[19][tid];
      rr_r_7 *= scale_NC_OH;
      double scale_NC_C2H = scratch[3][tid];
      rr_r_8 *= scale_NC_C2H;
      rr_r_8 *= scale_NC_H;
      double scale_NC_C2H5 = scratch[15][tid];
      rr_r_9 *= scale_NC_C2H5;
      rr_f_9 *= scale_NC_OH;
      double scale_NC_PC4H9 = scratch[1][tid];
      rr_f_10 *= scale_NC_PC4H9;
      double scale_NC_C4H8_1 = scratch[9][tid];
      rr_r_10 *= scale_NC_C4H8_1;
      rr_r_10 *= scale_NC_H;
      double scale_NC_C2H3CO = scratch[4][tid];
      rr_r_11 *= scale_NC_C2H3CO;
      double scale_NC_H2O2 = scratch[13][tid];
      rr_r_11 *= scale_NC_H2O2;
      rr_r_12 *= scale_NC_H;
      double scale_NC_C7H15_1 = scratch[6][tid];
      rr_r_13 *= scale_NC_C7H15_1;
      rr_f_13 *= scale_NC_NC7H16;
      rr_r_13 *= scale_NC_H2O2;
    }
    else if (wid == 14)
    {
      double scale_NC_O = scratch[16][tid];
      rr_f_0 *= scale_NC_O;
      double scale_NC_CH3 = scratch[17][tid];
      rr_r_0 *= scale_NC_CH3;
      double scale_NC_H = scratch[18][tid];
      rr_f_1 *= scale_NC_H;
      rr_r_2 *= scale_NC_CH3;
      double scale_NC_CH3O2H = scratch[7][tid];
      rr_r_3 *= scale_NC_CH3O2H;
      double scale_NC_CH3O2 = scratch[11][tid];
      rr_f_3 *= scale_NC_CH3O2;
      double scale_NC_C4H8_1 = scratch[9][tid];
      rr_f_4 *= scale_NC_C4H8_1;
      double scale_NC_OH = scratch[19][tid];
      rr_f_4 *= scale_NC_OH;
      rr_r_5 *= scale_NC_CH3O2H;
      rr_f_5 *= scale_NC_CH3O2;
      double scale_NC_PC4H9 = scratch[1][tid];
      rr_r_6 *= scale_NC_PC4H9;
      rr_r_7 *= scale_NC_H;
      rr_f_7 *= scale_NC_OH;
      rr_r_8 *= scale_NC_OH;
      double scale_NC_C3H5_A = scratch[14][tid];
      rr_r_9 *= scale_NC_C3H5_A;
      rr_f_9 *= scale_NC_OH;
      double scale_NC_CH3COCH2 = scratch[24][tid];
      rr_f_10 *= scale_NC_CH3COCH2;
      rr_r_10 *= scale_NC_CH3;
      double scale_NC_C2H3CO = scratch[4][tid];
      rr_r_11 *= scale_NC_C2H3CO;
      rr_f_11 *= scale_NC_CH3;
      double scale_NC_C2H = scratch[3][tid];
      rr_r_12 *= scale_NC_C2H;
      rr_r_12 *= scale_NC_CH3;
      double scale_NC_C7H15_1 = scratch[6][tid];
      rr_r_13 *= scale_NC_C7H15_1;
      double scale_NC_NC7H16 = scratch[12][tid];
      rr_f_13 *= scale_NC_NC7H16;
      rr_f_13 *= scale_NC_CH3;
    }
    else if (wid == 15)
    {
      double scale_NC_H2O2 = scratch[13][tid];
      rr_r_0 *= scale_NC_H2O2;
      double scale_NC_O = scratch[16][tid];
      rr_f_1 *= scale_NC_O;
      double scale_NC_OH = scratch[19][tid];
      rr_r_1 *= scale_NC_OH;
      double scale_NC_C2H5 = scratch[15][tid];
      rr_r_2 *= scale_NC_C2H5;
      rr_f_2 *= scale_NC_O;
      double scale_NC_CH3O2H = scratch[7][tid];
      rr_r_3 *= scale_NC_CH3O2H;
      double scale_NC_CH3O2 = scratch[11][tid];
      rr_f_3 *= scale_NC_CH3O2;
      double scale_NC_C4H8_1 = scratch[9][tid];
      rr_f_4 *= scale_NC_C4H8_1;
      rr_r_4 *= scale_NC_C2H5;
      rr_f_4 *= scale_NC_O;
      rr_r_6 *= scale_NC_C4H8_1;
      rr_f_7 *= scale_NC_H2O2;
      rr_f_7 *= scale_NC_OH;
      double scale_NC_C2H = scratch[3][tid];
      rr_r_8 *= scale_NC_C2H;
      rr_f_8 *= scale_NC_OH;
      rr_f_9 *= scale_NC_O;
      double scale_NC_C5H10_1 = scratch[5][tid];
      rr_f_10 *= scale_NC_C5H10_1;
      double scale_NC_C3H5_A = scratch[14][tid];
      rr_r_10 *= scale_NC_C3H5_A;
      rr_r_10 *= scale_NC_C2H5;
      double scale_NC_C2H3CO = scratch[4][tid];
      rr_r_11 *= scale_NC_C2H3CO;
      rr_r_11 *= scale_NC_CH3O2H;
      rr_f_11 *= scale_NC_CH3O2;
      double scale_NC_C7H15_1 = scratch[6][tid];
      rr_r_13 *= scale_NC_C7H15_1;
      double scale_NC_NC7H16 = scratch[12][tid];
      rr_f_13 *= scale_NC_NC7H16;
    }
    else if (wid == 16)
    {
      double scale_NC_CH3 = scratch[17][tid];
      rr_f_0 *= scale_NC_CH3;
      double scale_NC_OH = scratch[19][tid];
      rr_r_0 *= scale_NC_OH;
      double scale_NC_C2H5 = scratch[15][tid];
      rr_f_3 *= scale_NC_C2H5;
      rr_r_3 *= scale_NC_OH;
      double scale_NC_C4H8_1 = scratch[9][tid];
      rr_f_4 *= scale_NC_C4H8_1;
      rr_f_4 *= scale_NC_OH;
      double scale_NC_NC3H7COCH2 = scratch[0][tid];
      rr_f_5 *= scale_NC_NC3H7COCH2;
      double scale_NC_C5H10_1 = scratch[5][tid];
      rr_r_6 *= scale_NC_C5H10_1;
      rr_r_6 *= scale_NC_C2H5;
      rr_r_7 *= scale_NC_C2H5;
      double scale_NC_H = scratch[18][tid];
      rr_f_7 *= scale_NC_H;
      double scale_NC_C2H = scratch[3][tid];
      rr_r_8 *= scale_NC_C2H;
      double scale_NC_O = scratch[16][tid];
      rr_f_8 *= scale_NC_O;
      rr_r_8 *= scale_NC_OH;
      double scale_NC_C3H5_A = scratch[14][tid];
      rr_r_9 *= scale_NC_C3H5_A;
      rr_f_9 *= scale_NC_O;
      rr_r_9 *= scale_NC_OH;
      double scale_NC_C5H9 = scratch[2][tid];
      rr_r_10 *= scale_NC_C5H9;
      rr_f_10 *= scale_NC_C5H10_1;
      rr_f_10 *= scale_NC_H;
      rr_f_11 *= scale_NC_C4H8_1;
      rr_f_11 *= scale_NC_O;
      rr_f_12 *= scale_NC_OH;
      double scale_NC_C7H15_1 = scratch[6][tid];
      rr_r_13 *= scale_NC_C7H15_1;
      double scale_NC_NC7H16 = scratch[12][tid];
      rr_f_13 *= scale_NC_NC7H16;
      rr_f_13 *= scale_NC_C2H5;
    }
    else if (wid == 17)
    {
      double scale_NC_H = scratch[18][tid];
      rr_f_0 *= scale_NC_H;
      double scale_NC_CH3CHO = scratch[10][tid];
      rr_r_2 *= scale_NC_CH3CHO;
      double scale_NC_OH = scratch[19][tid];
      rr_f_2 *= scale_NC_OH;
      double scale_NC_CH3O2 = scratch[11][tid];
      rr_f_3 *= scale_NC_CH3O2;
      double scale_NC_CH3 = scratch[17][tid];
      rr_f_3 *= scale_NC_CH3;
      rr_f_4 *= scale_NC_H;
      rr_r_5 *= scale_NC_CH3;
      double scale_NC_C7H15_1 = scratch[6][tid];
      rr_f_6 *= scale_NC_C7H15_1;
      double scale_NC_C2H5 = scratch[15][tid];
      rr_f_7 *= scale_NC_C2H5;
      double scale_NC_H2O2 = scratch[13][tid];
      rr_f_8 *= scale_NC_H2O2;
      double scale_NC_O = scratch[16][tid];
      rr_f_8 *= scale_NC_O;
      rr_r_8 *= scale_NC_OH;
      double scale_NC_C3H5_A = scratch[14][tid];
      rr_r_9 *= scale_NC_C3H5_A;
      rr_f_9 *= scale_NC_H;
      double scale_NC_C5H9 = scratch[2][tid];
      rr_r_10 *= scale_NC_C5H9;
      double scale_NC_C5H10_1 = scratch[5][tid];
      rr_f_10 *= scale_NC_C5H10_1;
      rr_f_10 *= scale_NC_O;
      rr_r_10 *= scale_NC_OH;
      double scale_NC_C4H8_1 = scratch[9][tid];
      rr_f_11 *= scale_NC_C4H8_1;
      rr_r_11 *= scale_NC_CH3CHO;
      rr_f_11 *= scale_NC_O;
      rr_f_12 *= scale_NC_H;
      rr_r_13 *= scale_NC_C7H15_1;
      double scale_NC_CH3O2H = scratch[7][tid];
      rr_r_13 *= scale_NC_CH3O2H;
      rr_f_13 *= scale_NC_CH3O2;
      double scale_NC_NC7H16 = scratch[12][tid];
      rr_f_13 *= scale_NC_NC7H16;
    }
    else if (wid == 18)
    {
      double scale_NC_H = scratch[18][tid];
      rr_r_0 *= scale_NC_H;
      double scale_NC_OH = scratch[19][tid];
      rr_f_1 *= scale_NC_OH;
      double scale_NC_CH3O2 = scratch[11][tid];
      rr_f_3 *= scale_NC_CH3O2;
      double scale_NC_C2H5 = scratch[15][tid];
      rr_f_3 *= scale_NC_C2H5;
      rr_f_4 *= scale_NC_OH;
      rr_r_5 *= scale_NC_C2H5;
      double scale_NC_CH3 = scratch[17][tid];
      rr_r_5 *= scale_NC_CH3;
      double scale_NC_C7H15O2 = scratch[22][tid];
      rr_f_6 *= scale_NC_C7H15O2;
      rr_r_7 *= scale_NC_C2H5;
      rr_f_7 *= scale_NC_OH;
      double scale_NC_O = scratch[16][tid];
      rr_f_8 *= scale_NC_O;
      rr_r_8 *= scale_NC_H;
      rr_r_9 *= scale_NC_CH3;
      rr_f_9 *= scale_NC_H;
      double scale_NC_C5H9 = scratch[2][tid];
      rr_r_10 *= scale_NC_C5H9;
      double scale_NC_C5H10_1 = scratch[5][tid];
      rr_f_10 *= scale_NC_C5H10_1;
      rr_f_10 *= scale_NC_OH;
      double scale_NC_C4H8_1 = scratch[9][tid];
      rr_f_11 *= scale_NC_C4H8_1;
      double scale_NC_CH3CHO = scratch[10][tid];
      rr_r_11 *= scale_NC_CH3CHO;
      rr_r_11 *= scale_NC_C2H5;
      rr_f_11 *= scale_NC_OH;
      double scale_NC_C2H = scratch[3][tid];
      rr_r_12 *= scale_NC_C2H;
      rr_f_12 *= scale_NC_O;
      double scale_NC_C5H11_1 = scratch[20][tid];
      rr_r_13 *= scale_NC_C5H11_1;
      double scale_NC_C7H15_1 = scratch[6][tid];
      rr_f_13 *= scale_NC_C7H15_1;
    }
    else if (wid == 19)
    {
      double scale_NC_OH = scratch[19][tid];
      rr_f_0 *= scale_NC_OH;
      double scale_NC_H = scratch[18][tid];
      rr_f_1 *= scale_NC_H;
      double scale_NC_CH3 = scratch[17][tid];
      rr_r_2 *= scale_NC_CH3;
      double scale_NC_CH3O2 = scratch[11][tid];
      rr_f_3 *= scale_NC_CH3O2;
      rr_r_5 *= scale_NC_H;
      rr_r_5 *= scale_NC_OH;
      double scale_NC_C7H15O2 = scratch[22][tid];
      rr_f_6 *= scale_NC_C7H15O2;
      double scale_NC_C2H5 = scratch[15][tid];
      rr_r_7 *= scale_NC_C2H5;
      double scale_NC_O = scratch[16][tid];
      rr_f_7 *= scale_NC_O;
      rr_r_7 *= scale_NC_OH;
      rr_r_8 *= scale_NC_H;
      rr_f_8 *= scale_NC_OH;
      double scale_NC_C5H9 = scratch[2][tid];
      rr_f_9 *= scale_NC_C5H9;
      double scale_NC_C3H5_A = scratch[14][tid];
      rr_r_9 *= scale_NC_C3H5_A;
      double scale_NC_PC4H9 = scratch[1][tid];
      rr_r_10 *= scale_NC_PC4H9;
      double scale_NC_C5H10_1 = scratch[5][tid];
      rr_f_10 *= scale_NC_C5H10_1;
      rr_f_10 *= scale_NC_OH;
      double scale_NC_C2H5CHO = scratch[21][tid];
      rr_r_11 *= scale_NC_C2H5CHO;
      double scale_NC_C4H8_1 = scratch[9][tid];
      rr_f_11 *= scale_NC_C4H8_1;
      rr_r_11 *= scale_NC_CH3;
      rr_f_11 *= scale_NC_OH;
      rr_f_12 *= scale_NC_C3H5_A;
      double scale_NC_NC7KET = scratch[23][tid];
      rr_r_13 *= scale_NC_NC7KET;
      double scale_NC_C7H14OOHO2 = scratch[26][tid];
      rr_f_13 *= scale_NC_C7H14OOHO2;
      rr_r_13 *= scale_NC_OH;
    }
    /* Warp specialized output code */
    double output_0 = 0.0;
    double output_1 = 0.0;
    double output_2 = 0.0;
    asm volatile("bar.sync 0, 640;" : : : "memory");
    {
      double ropl_0 = rr_f_0 - rr_r_0;
      scratch[wid+0][tid] = ropl_0;
    }
    {
      double ropl_1 = rr_f_1 - rr_r_1;
      scratch[wid+20][tid] = ropl_1;
    }
    {
      double ropl_2 = rr_f_2 - rr_r_2;
      scratch[wid+40][tid] = ropl_2;
    }
    {
      double ropl_3 = rr_f_3 - rr_r_3;
      scratch[wid+60][tid] = ropl_3;
    }
    {
      double ropl_4 = rr_f_4 - rr_r_4;
      scratch[wid+80][tid] = ropl_4;
    }
    {
      double ropl_5 = rr_f_5 - rr_r_5;
      scratch[wid+100][tid] = ropl_5;
    }
    {
      double ropl_6 = rr_f_6 - rr_r_6;
      scratch[wid+120][tid] = ropl_6;
    }
    {
      double ropl_7 = rr_f_7 - rr_r_7;
      scratch[wid+140][tid] = ropl_7;
    }
    asm volatile("bar.sync 0, 640;" : : : "memory");
    if (wid == 0)
    {
      double ropl_274 = scratch[142][tid];
      output_0 += ropl_274;
      double ropl_124 = scratch[63][tid];
      output_0 -= ropl_124;
      double ropl_183 = scratch[94][tid];
      output_0 -= ropl_183;
      double ropl_186 = scratch[95][tid];
      output_0 -= ropl_186;
      double ropl_267 = scratch[135][tid];
      output_0 += ropl_267;
      double ropl_188 = scratch[96][tid];
      output_0 -= ropl_188;
      double ropl_22 = scratch[3][tid];
      output_1 += ropl_22;
      double ropl_260 = scratch[130][tid];
      output_1 += ropl_260;
      output_1 += ropl_188;
      double ropl_15 = scratch[156][tid];
      output_1 -= ropl_15;
      double ropl_240 = scratch[118][tid];
      output_1 -= ropl_240;
      double ropl_18 = scratch[158][tid];
      output_1 -= ropl_18;
      double ropl_19 = scratch[159][tid];
      output_1 -= ropl_19;
    }
    else if (wid == 1)
    {
      double ropl_164 = scratch[81][tid];
      output_0 -= ropl_164;
      double ropl_176 = scratch[87][tid];
      output_0 -= ropl_176;
      double ropl_182 = scratch[93][tid];
      output_0 -= ropl_182;
      double ropl_264 = scratch[133][tid];
      output_0 -= ropl_264;
      double ropl_153 = scratch[74][tid];
      output_0 -= ropl_153;
      double ropl_229 = scratch[114][tid];
      output_0 -= ropl_229;
      double ropl_154 = scratch[75][tid];
      output_0 -= ropl_154;
      double ropl_156 = scratch[77][tid];
      output_0 -= ropl_156;
      double ropl_157 = scratch[78][tid];
      output_0 -= ropl_157;
      double ropl_161 = scratch[79][tid];
      output_0 = __fma_rn(-2.0, ropl_161, output_0);
      double ropl_77 = scratch[40][tid];
      output_1 += ropl_77;
      double ropl_80 = scratch[43][tid];
      output_1 += ropl_80;
      double ropl_38 = scratch[7][tid];
      output_1 += ropl_38;
      double ropl_52 = scratch[9][tid];
      output_1 -= ropl_52;
      double ropl_66 = scratch[37][tid];
      output_1 += ropl_66;
      double ropl_276 = scratch[144][tid];
      output_2 -= ropl_276;
    }
    else if (wid == 2)
    {
      double ropl_163 = scratch[80][tid];
      output_0 += ropl_163;
      double ropl_164 = scratch[81][tid];
      output_0 -= ropl_164;
      double ropl_273 = scratch[141][tid];
      output_0 += ropl_273;
      double ropl_87 = scratch[47][tid];
      output_0 -= ropl_87;
      double ropl_88 = scratch[48][tid];
      output_0 -= ropl_88;
      double ropl_89 = scratch[49][tid];
      output_0 -= ropl_89;
      double ropl_90 = scratch[50][tid];
      output_0 -= ropl_90;
      double ropl_179 = scratch[90][tid];
      output_0 += ropl_179;
      double ropl_91 = scratch[51][tid];
      output_0 -= ropl_91;
      double ropl_92 = scratch[52][tid];
      output_0 -= ropl_92;
      double ropl_93 = scratch[53][tid];
      output_0 -= ropl_93;
      double ropl_105 = scratch[57][tid];
      output_0 += ropl_105;
      double ropl_78 = scratch[41][tid];
      output_1 -= ropl_78;
      double ropl_14 = scratch[2][tid];
      output_1 -= ropl_14;
      double ropl_79 = scratch[42][tid];
      output_1 += ropl_79;
      double ropl_81 = scratch[44][tid];
      output_1 -= ropl_81;
      double ropl_178 = scratch[89][tid];
      output_1 -= ropl_178;
      double ropl_261 = scratch[131][tid];
      output_1 += ropl_261;
      double ropl_60 = scratch[32][tid];
      output_1 -= ropl_60;
      double ropl_262 = scratch[132][tid];
      output_1 += ropl_262;
      double ropl_61 = scratch[33][tid];
      output_1 -= ropl_61;
      double ropl_228 = scratch[113][tid];
      output_1 += ropl_228;
      double ropl_62 = scratch[34][tid];
      output_1 -= ropl_62;
      double ropl_16 = scratch[15][tid];
      output_1 -= ropl_16;
      double ropl_63 = scratch[35][tid];
      output_1 -= ropl_63;
      double ropl_270 = scratch[138][tid];
      output_2 -= ropl_270;
      double ropl_271 = scratch[139][tid];
      output_2 -= ropl_271;
    }
    else if (wid == 3)
    {
      double ropl_109 = scratch[60][tid];
      output_0 += ropl_109;
      double ropl_110 = scratch[61][tid];
      output_0 += ropl_110;
      double ropl_275 = scratch[143][tid];
      output_0 += ropl_275;
      double ropl_282 = scratch[146][tid];
      output_0 += ropl_282;
      double ropl_96 = scratch[54][tid];
      output_0 -= ropl_96;
      double ropl_266 = scratch[134][tid];
      output_0 += ropl_266;
      double ropl_99 = scratch[55][tid];
      output_0 -= ropl_99;
    }
    else if (wid == 4)
    {
      double ropl_13 = scratch[1][tid];
      output_0 -= ropl_13;
      double ropl_117 = scratch[62][tid];
      output_0 += ropl_117;
      double ropl_85 = scratch[46][tid];
      output_0 -= ropl_85;
      double ropl_38 = scratch[7][tid];
      output_0 -= ropl_38;
      double ropl_142 = scratch[67][tid];
      output_0 -= ropl_142;
      double ropl_144 = scratch[68][tid];
      output_0 -= ropl_144;
      double ropl_53 = scratch[29][tid];
      output_0 -= ropl_53;
      double ropl_145 = scratch[69][tid];
      output_0 += ropl_145;
      double ropl_54 = scratch[30][tid];
      output_0 -= ropl_54;
      double ropl_12 = scratch[14][tid];
      output_0 -= ropl_12;
      double ropl_154 = scratch[75][tid];
      output_0 -= ropl_154;
      double ropl_17 = scratch[157][tid];
      output_0 += ropl_17;
      double ropl_107 = scratch[58][tid];
      output_0 -= ropl_107;
      double ropl_108 = scratch[59][tid];
      output_0 += ropl_108;
      output_1 += ropl_144;
      double ropl_102 = scratch[56][tid];
      output_1 -= ropl_102;
      double ropl_105 = scratch[57][tid];
      output_1 -= ropl_105;
    }
    else if (wid == 5)
    {
      double ropl_254 = scratch[127][tid];
      output_0 += ropl_254;
      double ropl_48 = scratch[8][tid];
      output_0 += ropl_48;
      double ropl_51 = scratch[28][tid];
      output_0 += ropl_51;
      double ropl_226 = scratch[111][tid];
      output_0 += ropl_226;
      double ropl_92 = scratch[52][tid];
      output_0 += ropl_92;
      double ropl_16 = scratch[15][tid];
      output_0 += ropl_16;
      double ropl_11 = scratch[155][tid];
      output_0 -= ropl_11;
      double ropl_117 = scratch[62][tid];
      output_1 -= ropl_117;
      double ropl_181 = scratch[92][tid];
      output_1 -= ropl_181;
      double ropl_182 = scratch[93][tid];
      output_1 -= ropl_182;
      double ropl_272 = scratch[140][tid];
      output_2 += ropl_272;
      double ropl_281 = scratch[145][tid];
      output_2 -= ropl_281;
      double ropl_282 = scratch[146][tid];
      output_2 -= ropl_282;
    }
    else if (wid == 6)
    {
      double ropl_0 = scratch[0][tid];
      output_0 += ropl_0;
      double ropl_77 = scratch[40][tid];
      output_0 += ropl_77;
      double ropl_35 = scratch[23][tid];
      output_0 += ropl_35;
      double ropl_36 = scratch[24][tid];
      output_0 += ropl_36;
      double ropl_85 = scratch[46][tid];
      output_0 += ropl_85;
      double ropl_1 = scratch[147][tid];
      output_0 -= ropl_1;
      double ropl_256 = scratch[128][tid];
      output_0 += ropl_256;
      double ropl_2 = scratch[148][tid];
      output_0 -= ropl_2;
      double ropl_3 = scratch[149][tid];
      output_0 -= ropl_3;
      double ropl_227 = scratch[112][tid];
      output_0 += ropl_227;
      double ropl_93 = scratch[53][tid];
      output_0 += ropl_93;
      double ropl_239 = scratch[117][tid];
      output_0 -= ropl_239;
      double ropl_200 = scratch[97][tid];
      output_1 -= ropl_200;
      double ropl_210 = scratch[98][tid];
      output_1 -= ropl_210;
      double ropl_211 = scratch[99][tid];
      output_1 -= ropl_211;
    }
    else if (wid == 7)
    {
      double ropl_244 = scratch[122][tid];
      output_0 -= ropl_244;
      double ropl_246 = scratch[123][tid];
      output_0 -= ropl_246;
      double ropl_248 = scratch[124][tid];
      output_0 -= ropl_248;
      double ropl_250 = scratch[125][tid];
      output_0 -= ropl_250;
      double ropl_252 = scratch[126][tid];
      output_0 -= ropl_252;
      double ropl_254 = scratch[127][tid];
      output_0 -= ropl_254;
      double ropl_256 = scratch[128][tid];
      output_0 -= ropl_256;
      double ropl_258 = scratch[129][tid];
      output_0 -= ropl_258;
      double ropl_260 = scratch[130][tid];
      output_0 -= ropl_260;
      double ropl_261 = scratch[131][tid];
      output_0 -= ropl_261;
      double ropl_262 = scratch[132][tid];
      output_0 -= ropl_262;
      double ropl_264 = scratch[133][tid];
      output_0 -= ropl_264;
      double ropl_214 = scratch[102][tid];
      output_1 += ropl_214;
      double ropl_220 = scratch[106][tid];
      output_1 -= ropl_220;
      double ropl_238 = scratch[116][tid];
      output_1 += ropl_238;
      double ropl_211 = scratch[99][tid];
      output_1 += ropl_211;
    }
    else if (wid == 8)
    {
      double ropl_217 = scratch[104][tid];
      output_0 -= ropl_217;
      double ropl_175 = scratch[86][tid];
      output_0 -= ropl_175;
      double ropl_176 = scratch[87][tid];
      output_0 -= ropl_176;
      double ropl_273 = scratch[141][tid];
      output_1 += ropl_273;
      double ropl_136 = scratch[65][tid];
      output_1 -= ropl_136;
      double ropl_281 = scratch[145][tid];
      output_1 += ropl_281;
      double ropl_268 = scratch[136][tid];
      output_1 += ropl_268;
    }
    else if (wid == 9)
    {
      double ropl_243 = scratch[121][tid];
      output_0 += ropl_243;
      double ropl_165 = scratch[82][tid];
      output_0 += ropl_165;
      double ropl_215 = scratch[103][tid];
      output_0 += ropl_215;
      double ropl_36 = scratch[24][tid];
      output_0 += ropl_36;
      double ropl_25 = scratch[5][tid];
      output_0 -= ropl_25;
      double ropl_220 = scratch[106][tid];
      output_0 += ropl_220;
      double ropl_43 = scratch[27][tid];
      output_0 += ropl_43;
      double ropl_5 = scratch[150][tid];
      output_0 -= ropl_5;
      double ropl_86 = scratch[11][tid];
      output_0 += ropl_86;
      double ropl_59 = scratch[31][tid];
      output_0 += ropl_59;
      double ropl_4 = scratch[12][tid];
      output_0 += ropl_4;
      double ropl_10 = scratch[13][tid];
      output_0 += ropl_10;
      double ropl_152 = scratch[73][tid];
      output_0 += ropl_152;
      double ropl_230 = scratch[115][tid];
      output_0 += ropl_230;
      double ropl_27 = scratch[17][tid];
      output_0 += ropl_27;
      double ropl_73 = scratch[39][tid];
      output_0 += ropl_73;
      double ropl_241 = scratch[119][tid];
      output_0 += ropl_241;
      double ropl_164 = scratch[81][tid];
      output_1 += ropl_164;
      double ropl_151 = scratch[72][tid];
      output_1 -= ropl_151;
      double ropl_264 = scratch[133][tid];
      output_1 += ropl_264;
      double ropl_153 = scratch[74][tid];
      output_1 += ropl_153;
      double ropl_229 = scratch[114][tid];
      output_1 += ropl_229;
      double ropl_154 = scratch[75][tid];
      output_1 += ropl_154;
      double ropl_145 = scratch[69][tid];
      output_2 -= ropl_145;
    }
    else if (wid == 10)
    {
      double ropl_30 = scratch[20][tid];
      output_0 += ropl_30;
      double ropl_242 = scratch[120][tid];
      output_0 -= ropl_242;
      double ropl_80 = scratch[43][tid];
      output_0 += ropl_80;
      double ropl_248 = scratch[124][tid];
      output_0 += ropl_248;
      double ropl_38 = scratch[7][tid];
      output_0 += ropl_38;
      double ropl_1 = scratch[147][tid];
      output_0 += ropl_1;
      double ropl_53 = scratch[29][tid];
      output_0 += ropl_53;
      double ropl_224 = scratch[109][tid];
      output_0 += ropl_224;
      double ropl_90 = scratch[50][tid];
      output_0 += ropl_90;
      double ropl_7 = scratch[152][tid];
      output_0 -= ropl_7;
      double ropl_61 = scratch[33][tid];
      output_0 += ropl_61;
      double ropl_62 = scratch[34][tid];
      output_0 += ropl_62;
      double ropl_9 = scratch[154][tid];
      output_0 -= ropl_9;
      double ropl_15 = scratch[156][tid];
      output_0 += ropl_15;
      double ropl_27 = scratch[17][tid];
      output_0 += ropl_27;
      double ropl_200 = scratch[97][tid];
      output_0 += ropl_200;
      double ropl_261 = scratch[131][tid];
      output_1 += ropl_261;
      double ropl_269 = scratch[137][tid];
      output_1 -= ropl_269;
      double ropl_274 = scratch[142][tid];
      output_2 += ropl_274;
      double ropl_132 = scratch[64][tid];
      output_2 -= ropl_132;
    }
    else if (wid == 11)
    {
      double ropl_13 = scratch[1][tid];
      output_0 += ropl_13;
      double ropl_124 = scratch[63][tid];
      output_0 += ropl_124;
      double ropl_132 = scratch[64][tid];
      output_0 += ropl_132;
      double ropl_260 = scratch[130][tid];
      output_0 -= ropl_260;
      double ropl_99 = scratch[55][tid];
      output_0 += ropl_99;
      double ropl_186 = scratch[95][tid];
      output_0 += ropl_186;
      double ropl_155 = scratch[76][tid];
      output_0 -= ropl_155;
      double ropl_268 = scratch[136][tid];
      output_0 += ropl_268;
      double ropl_15 = scratch[156][tid];
      output_0 += ropl_15;
      double ropl_17 = scratch[157][tid];
      output_0 -= ropl_17;
      double ropl_157 = scratch[78][tid];
      output_0 -= ropl_157;
      double ropl_240 = scratch[118][tid];
      output_0 += ropl_240;
      double ropl_18 = scratch[158][tid];
      output_0 += ropl_18;
      double ropl_19 = scratch[159][tid];
      output_0 += ropl_19;
      double ropl_172 = scratch[83][tid];
      output_1 += ropl_172;
      double ropl_174 = scratch[85][tid];
      output_1 += ropl_174;
      double ropl_180 = scratch[91][tid];
      output_1 += ropl_180;
      double ropl_238 = scratch[116][tid];
      output_2 -= ropl_238;
    }
    else if (wid == 12)
    {
      double ropl_30 = scratch[20][tid];
      output_0 -= ropl_30;
      double ropl_31 = scratch[21][tid];
      output_0 -= ropl_31;
      double ropl_78 = scratch[41][tid];
      output_0 -= ropl_78;
      double ropl_243 = scratch[121][tid];
      output_0 += ropl_243;
      double ropl_79 = scratch[42][tid];
      output_0 -= ropl_79;
      double ropl_35 = scratch[23][tid];
      output_0 -= ropl_35;
      double ropl_215 = scratch[103][tid];
      output_0 += ropl_215;
      double ropl_173 = scratch[84][tid];
      output_0 += ropl_173;
      double ropl_217 = scratch[104][tid];
      output_0 += ropl_217;
      double ropl_40 = scratch[25][tid];
      output_0 += ropl_40;
      double ropl_83 = scratch[45][tid];
      output_0 += ropl_83;
      double ropl_37 = scratch[6][tid];
      output_0 += ropl_37;
      double ropl_41 = scratch[26][tid];
      output_0 += ropl_41;
      double ropl_51 = scratch[28][tid];
      output_0 -= ropl_51;
      double ropl_65 = scratch[10][tid];
      output_0 += ropl_65;
      double ropl_147 = scratch[70][tid];
      output_0 += ropl_147;
      double ropl_153 = scratch[74][tid];
      output_0 -= ropl_153;
      double ropl_183 = scratch[94][tid];
      output_0 += ropl_183;
      double ropl_64 = scratch[36][tid];
      output_0 += ropl_64;
      double ropl_28 = scratch[18][tid];
      output_0 -= ropl_28;
      double ropl_29 = scratch[19][tid];
      output_0 -= ropl_29;
      double ropl_275 = scratch[143][tid];
      output_1 += ropl_275;
      double ropl_222 = scratch[107][tid];
      output_1 -= ropl_222;
      double ropl_223 = scratch[108][tid];
      output_1 -= ropl_223;
      double ropl_224 = scratch[109][tid];
      output_1 -= ropl_224;
      double ropl_225 = scratch[110][tid];
      output_1 -= ropl_225;
      double ropl_226 = scratch[111][tid];
      output_1 -= ropl_226;
      double ropl_227 = scratch[112][tid];
      output_1 -= ropl_227;
      double ropl_228 = scratch[113][tid];
      output_1 -= ropl_228;
      double ropl_229 = scratch[114][tid];
      output_1 -= ropl_229;
    }
    else if (wid == 13)
    {
      double ropl_81 = scratch[44][tid];
      output_0 += ropl_81;
      double ropl_281 = scratch[145][tid];
      output_0 += ropl_281;
      double ropl_252 = scratch[126][tid];
      output_0 += ropl_252;
      double ropl_282 = scratch[146][tid];
      output_0 += ropl_282;
      double ropl_177 = scratch[88][tid];
      output_0 += ropl_177;
      double ropl_223 = scratch[108][tid];
      output_0 += ropl_223;
      double ropl_2 = scratch[148][tid];
      output_0 += ropl_2;
      double ropl_89 = scratch[49][tid];
      output_0 += ropl_89;
      double ropl_54 = scratch[30][tid];
      output_0 += ropl_54;
      double ropl_4 = scratch[12][tid];
      output_0 += ropl_4;
      double ropl_60 = scratch[32][tid];
      output_0 += ropl_60;
      double ropl_8 = scratch[153][tid];
      output_0 -= ropl_8;
      double ropl_9 = scratch[154][tid];
      output_0 += ropl_9;
      double ropl_11 = scratch[155][tid];
      output_0 += ropl_11;
      double ropl_210 = scratch[98][tid];
      output_0 += ropl_210;
      double ropl_18 = scratch[158][tid];
      output_0 += ropl_18;
      double ropl_29 = scratch[19][tid];
      output_0 += ropl_29;
      double ropl_219 = scratch[105][tid];
      output_1 -= ropl_219;
      double ropl_152 = scratch[73][tid];
      output_1 += ropl_152;
      double ropl_72 = scratch[38][tid];
      output_1 -= ropl_72;
      double ropl_73 = scratch[39][tid];
      output_1 -= ropl_73;
    }
    else if (wid == 14)
    {
      double ropl_31 = scratch[21][tid];
      output_0 -= ropl_31;
      double ropl_34 = scratch[22][tid];
      output_0 += ropl_34;
      double ropl_25 = scratch[5][tid];
      output_0 -= ropl_25;
      double ropl_136 = scratch[65][tid];
      output_0 -= ropl_136;
      double ropl_250 = scratch[125][tid];
      output_0 -= ropl_250;
      double ropl_141 = scratch[66][tid];
      output_0 -= ropl_141;
      double ropl_142 = scratch[67][tid];
      output_0 -= ropl_142;
      double ropl_3 = scratch[149][tid];
      output_0 -= ropl_3;
      double ropl_225 = scratch[110][tid];
      output_0 -= ropl_225;
      double ropl_91 = scratch[51][tid];
      output_0 -= ropl_91;
      double ropl_149 = scratch[71][tid];
      output_0 += ropl_149;
      double ropl_6 = scratch[151][tid];
      output_0 += ropl_6;
      double ropl_7 = scratch[152][tid];
      output_0 -= ropl_7;
      double ropl_8 = scratch[153][tid];
      output_0 -= ropl_8;
      double ropl_12 = scratch[14][tid];
      output_0 -= ropl_12;
      double ropl_63 = scratch[35][tid];
      output_0 -= ropl_63;
      double ropl_99 = scratch[55][tid];
      output_0 -= ropl_99;
      double ropl_186 = scratch[95][tid];
      output_0 -= ropl_186;
      double ropl_19 = scratch[159][tid];
      output_0 -= ropl_19;
      double ropl_243 = scratch[121][tid];
      output_1 -= ropl_243;
      output_1 += ropl_25;
      double ropl_219 = scratch[105][tid];
      output_1 += ropl_219;
      output_1 += ropl_141;
      double ropl_5 = scratch[150][tid];
      output_1 += ropl_5;
    }
    else if (wid == 15)
    {
      double ropl_0 = scratch[0][tid];
      output_0 -= ropl_0;
      double ropl_77 = scratch[40][tid];
      output_0 -= ropl_77;
      double ropl_242 = scratch[120][tid];
      output_0 += ropl_242;
      double ropl_14 = scratch[2][tid];
      output_0 += ropl_14;
      double ropl_34 = scratch[22][tid];
      output_0 -= ropl_34;
      double ropl_22 = scratch[3][tid];
      output_0 = __fma_rn(-2.0, ropl_22, output_0);
      double ropl_35 = scratch[23][tid];
      output_0 -= ropl_35;
      double ropl_36 = scratch[24][tid];
      output_0 -= ropl_36;
      double ropl_85 = scratch[46][tid];
      output_0 -= ropl_85;
      double ropl_87 = scratch[47][tid];
      output_0 += ropl_87;
      double ropl_1 = scratch[147][tid];
      output_0 += ropl_1;
      double ropl_177 = scratch[88][tid];
      output_0 -= ropl_177;
      double ropl_256 = scratch[128][tid];
      output_0 -= ropl_256;
      double ropl_2 = scratch[148][tid];
      output_0 += ropl_2;
      double ropl_3 = scratch[149][tid];
      output_0 += ropl_3;
      double ropl_147 = scratch[70][tid];
      output_0 += ropl_147;
      double ropl_86 = scratch[11][tid];
      output_0 += ropl_86;
      double ropl_180 = scratch[91][tid];
      output_0 += ropl_180;
      double ropl_227 = scratch[112][tid];
      output_0 -= ropl_227;
      double ropl_93 = scratch[53][tid];
      output_0 -= ropl_93;
      double ropl_12 = scratch[14][tid];
      output_0 += ropl_12;
      double ropl_96 = scratch[54][tid];
      output_0 += ropl_96;
      double ropl_20 = scratch[16][tid];
      output_0 -= ropl_20;
      double ropl_156 = scratch[77][tid];
      output_0 -= ropl_156;
      double ropl_239 = scratch[117][tid];
      output_0 = __fma_rn(2.0, ropl_239, output_0);
      double ropl_240 = scratch[118][tid];
      output_0 += ropl_240;
      double ropl_108 = scratch[59][tid];
      output_0 += ropl_108;
    }
    else if (wid == 16)
    {
      double ropl_110 = scratch[61][tid];
      output_0 += ropl_110;
      double ropl_24 = scratch[4][tid];
      output_0 += ropl_24;
      double ropl_40 = scratch[25][tid];
      output_0 -= ropl_40;
      double ropl_174 = scratch[85][tid];
      output_0 += ropl_174;
      double ropl_41 = scratch[26][tid];
      output_0 += ropl_41;
      double ropl_175 = scratch[86][tid];
      output_0 -= ropl_175;
      double ropl_43 = scratch[27][tid];
      output_0 += ropl_43;
      double ropl_222 = scratch[107][tid];
      output_0 += ropl_222;
      double ropl_254 = scratch[127][tid];
      output_0 -= ropl_254;
      double ropl_51 = scratch[28][tid];
      output_0 -= ropl_51;
      double ropl_88 = scratch[48][tid];
      output_0 += ropl_88;
      double ropl_178 = scratch[89][tid];
      output_0 += ropl_178;
      double ropl_258 = scratch[129][tid];
      output_0 += ropl_258;
      double ropl_226 = scratch[111][tid];
      output_0 -= ropl_226;
      double ropl_92 = scratch[52][tid];
      output_0 -= ropl_92;
      double ropl_181 = scratch[92][tid];
      output_0 -= ropl_181;
      double ropl_16 = scratch[15][tid];
      output_0 -= ropl_16;
      double ropl_11 = scratch[155][tid];
      output_0 += ropl_11;
      double ropl_20 = scratch[16][tid];
      output_0 -= ropl_20;
      double ropl_64 = scratch[36][tid];
      output_0 += ropl_64;
      double ropl_155 = scratch[76][tid];
      output_0 -= ropl_155;
      double ropl_66 = scratch[37][tid];
      output_0 += ropl_66;
      double ropl_17 = scratch[157][tid];
      output_0 += ropl_17;
      double ropl_107 = scratch[58][tid];
      output_0 += ropl_107;
      double ropl_165 = scratch[82][tid];
      output_1 -= ropl_165;
    }
    else if (wid == 17)
    {
      double ropl_110 = scratch[61][tid];
      output_0 -= ropl_110;
      double ropl_34 = scratch[22][tid];
      output_0 -= ropl_34;
      double ropl_215 = scratch[103][tid];
      output_0 -= ropl_215;
      double ropl_24 = scratch[4][tid];
      output_0 -= ropl_24;
      double ropl_217 = scratch[104][tid];
      output_0 -= ropl_217;
      double ropl_276 = scratch[144][tid];
      output_0 += ropl_276;
      double ropl_40 = scratch[25][tid];
      output_0 += ropl_40;
      double ropl_83 = scratch[45][tid];
      output_0 -= ropl_83;
      double ropl_174 = scratch[85][tid];
      output_0 -= ropl_174;
      double ropl_219 = scratch[105][tid];
      output_0 -= ropl_219;
      double ropl_41 = scratch[26][tid];
      output_0 -= ropl_41;
      double ropl_43 = scratch[27][tid];
      output_0 -= ropl_43;
      double ropl_222 = scratch[107][tid];
      output_0 -= ropl_222;
      double ropl_88 = scratch[48][tid];
      output_0 -= ropl_88;
      double ropl_178 = scratch[89][tid];
      output_0 -= ropl_178;
      double ropl_258 = scratch[129][tid];
      output_0 -= ropl_258;
      double ropl_59 = scratch[31][tid];
      output_0 -= ropl_59;
      double ropl_149 = scratch[71][tid];
      output_0 -= ropl_149;
      double ropl_6 = scratch[151][tid];
      output_0 -= ropl_6;
      double ropl_152 = scratch[73][tid];
      output_0 -= ropl_152;
      double ropl_64 = scratch[36][tid];
      output_0 -= ropl_64;
      double ropl_66 = scratch[37][tid];
      output_0 -= ropl_66;
      double ropl_17 = scratch[157][tid];
      output_0 -= ropl_17;
      double ropl_107 = scratch[58][tid];
      output_0 -= ropl_107;
      double ropl_270 = scratch[138][tid];
      output_0 += ropl_270;
      double ropl_161 = scratch[79][tid];
      output_0 += ropl_161;
      double ropl_211 = scratch[99][tid];
      output_0 -= ropl_211;
      double ropl_241 = scratch[119][tid];
      output_0 -= ropl_241;
      output_1 -= ropl_59;
    }
    else if (wid == 18)
    {
      double ropl_0 = scratch[0][tid];
      output_0 -= ropl_0;
      double ropl_30 = scratch[20][tid];
      output_0 -= ropl_30;
      double ropl_109 = scratch[60][tid];
      output_0 += ropl_109;
      double ropl_163 = scratch[80][tid];
      output_0 += ropl_163;
      double ropl_242 = scratch[120][tid];
      output_0 += ropl_242;
      double ropl_13 = scratch[1][tid];
      output_0 -= ropl_13;
      double ropl_214 = scratch[102][tid];
      output_0 += ropl_214;
      double ropl_244 = scratch[122][tid];
      output_0 += ropl_244;
      double ropl_80 = scratch[43][tid];
      output_0 -= ropl_80;
      double ropl_172 = scratch[83][tid];
      output_0 += ropl_172;
      double ropl_24 = scratch[4][tid];
      output_0 -= ropl_24;
      double ropl_248 = scratch[124][tid];
      output_0 -= ropl_248;
      double ropl_37 = scratch[6][tid];
      output_0 += ropl_37;
      double ropl_141 = scratch[66][tid];
      output_0 += ropl_141;
      double ropl_142 = scratch[67][tid];
      output_0 += ropl_142;
      double ropl_1 = scratch[147][tid];
      output_0 -= ropl_1;
      double ropl_144 = scratch[68][tid];
      output_0 += ropl_144;
      double ropl_52 = scratch[9][tid];
      output_0 -= ropl_52;
      double ropl_53 = scratch[29][tid];
      output_0 -= ropl_53;
      double ropl_224 = scratch[109][tid];
      output_0 -= ropl_224;
      double ropl_65 = scratch[10][tid];
      output_0 += ropl_65;
      double ropl_90 = scratch[50][tid];
      output_0 -= ropl_90;
      double ropl_5 = scratch[150][tid];
      output_0 += ropl_5;
      double ropl_6 = scratch[151][tid];
      output_0 -= ropl_6;
      double ropl_7 = scratch[152][tid];
      output_0 += ropl_7;
      double ropl_10 = scratch[13][tid];
      output_0 += ropl_10;
      double ropl_61 = scratch[33][tid];
      output_0 -= ropl_61;
      double ropl_152 = scratch[73][tid];
      output_0 += ropl_152;
      double ropl_62 = scratch[34][tid];
      output_0 -= ropl_62;
      double ropl_9 = scratch[154][tid];
      output_0 += ropl_9;
      double ropl_15 = scratch[156][tid];
      output_0 -= ropl_15;
      double ropl_27 = scratch[17][tid];
      output_0 -= ropl_27;
      double ropl_200 = scratch[97][tid];
      output_0 -= ropl_200;
      double ropl_28 = scratch[18][tid];
      output_0 += ropl_28;
      double ropl_73 = scratch[39][tid];
      output_0 -= ropl_73;
      double ropl_241 = scratch[119][tid];
      output_0 += ropl_241;
      double ropl_246 = scratch[123][tid];
      output_1 += ropl_246;
      double ropl_136 = scratch[65][tid];
      output_1 += ropl_136;
      double ropl_266 = scratch[134][tid];
      output_1 += ropl_266;
    }
    else if (wid == 19)
    {
      double ropl_272 = scratch[140][tid];
      output_0 += ropl_272;
      double ropl_31 = scratch[21][tid];
      output_0 += ropl_31;
      double ropl_273 = scratch[141][tid];
      output_0 += ropl_273;
      double ropl_14 = scratch[2][tid];
      output_0 += ropl_14;
      double ropl_274 = scratch[142][tid];
      output_0 += ropl_274;
      double ropl_215 = scratch[103][tid];
      output_0 += ropl_215;
      double ropl_275 = scratch[143][tid];
      output_0 += ropl_275;
      double ropl_81 = scratch[44][tid];
      output_0 -= ropl_81;
      double ropl_250 = scratch[125][tid];
      output_0 += ropl_250;
      double ropl_281 = scratch[145][tid];
      output_0 -= ropl_281;
      double ropl_175 = scratch[86][tid];
      output_0 += ropl_175;
      double ropl_220 = scratch[106][tid];
      output_0 -= ropl_220;
      double ropl_252 = scratch[126][tid];
      output_0 -= ropl_252;
      double ropl_282 = scratch[146][tid];
      output_0 -= ropl_282;
      double ropl_48 = scratch[8][tid];
      output_0 = __fma_rn(-2.0, ropl_48, output_0);
      double ropl_177 = scratch[88][tid];
      output_0 -= ropl_177;
      double ropl_223 = scratch[108][tid];
      output_0 -= ropl_223;
      double ropl_2 = scratch[148][tid];
      output_0 -= ropl_2;
      double ropl_89 = scratch[49][tid];
      output_0 -= ropl_89;
      double ropl_3 = scratch[149][tid];
      output_0 += ropl_3;
      double ropl_54 = scratch[30][tid];
      output_0 -= ropl_54;
      double ropl_225 = scratch[110][tid];
      output_0 += ropl_225;
      double ropl_5 = scratch[150][tid];
      output_0 -= ropl_5;
      double ropl_91 = scratch[51][tid];
      output_0 += ropl_91;
      double ropl_6 = scratch[151][tid];
      output_0 += ropl_6;
      double ropl_4 = scratch[12][tid];
      output_0 -= ropl_4;
      double ropl_60 = scratch[32][tid];
      output_0 -= ropl_60;
      double ropl_151 = scratch[72][tid];
      output_0 += ropl_151;
      double ropl_181 = scratch[92][tid];
      output_0 += ropl_181;
      double ropl_7 = scratch[152][tid];
      output_0 += ropl_7;
      double ropl_8 = scratch[153][tid];
      output_0 = __fma_rn(2.0, ropl_8, output_0);
      double ropl_183 = scratch[94][tid];
      output_0 -= ropl_183;
      double ropl_9 = scratch[154][tid];
      output_0 -= ropl_9;
      double ropl_63 = scratch[35][tid];
      output_0 += ropl_63;
      double ropl_11 = scratch[155][tid];
      output_0 -= ropl_11;
      double ropl_20 = scratch[16][tid];
      output_0 += ropl_20;
      double ropl_155 = scratch[76][tid];
      output_0 += ropl_155;
      double ropl_188 = scratch[96][tid];
      output_0 -= ropl_188;
      double ropl_105 = scratch[57][tid];
      output_0 -= ropl_105;
      double ropl_72 = scratch[38][tid];
      output_0 -= ropl_72;
      double ropl_210 = scratch[98][tid];
      output_0 -= ropl_210;
      double ropl_18 = scratch[158][tid];
      output_0 -= ropl_18;
      double ropl_29 = scratch[19][tid];
      output_0 -= ropl_29;
      double ropl_241 = scratch[119][tid];
      output_0 += ropl_241;
      double ropl_19 = scratch[159][tid];
      output_0 += ropl_19;
    }
    asm volatile("bar.sync 0, 640;" : : : "memory");
    {
      double ropl_8 = rr_f_8 - rr_r_8;
      scratch[wid+0][tid] = ropl_8;
    }
    {
      double ropl_9 = rr_f_9 - rr_r_9;
      scratch[wid+20][tid] = ropl_9;
    }
    {
      double ropl_10 = rr_f_10 - rr_r_10;
      scratch[wid+40][tid] = ropl_10;
    }
    {
      double ropl_11 = rr_f_11 - rr_r_11;
      scratch[wid+60][tid] = ropl_11;
    }
    {
      double ropl_12 = rr_f_12 - rr_r_12;
      scratch[wid+80][tid] = ropl_12;
    }
    {
      double ropl_13 = rr_f_13 - rr_r_13;
      scratch[wid+100][tid] = ropl_13;
    }
    {
      double ropl_14 = rr_f_14 - rr_r_14;
      scratch[wid+120][tid] = ropl_14;
    }
    asm volatile("bar.sync 0, 640;" : : : "memory");
    if (wid == 0)
    {
      double ropl_123 = scratch[47][tid];
      output_0 -= ropl_123;
      double ropl_125 = scratch[48][tid];
      output_0 -= ropl_125;
      double ropl_126 = scratch[49][tid];
      output_0 -= ropl_126;
      double ropl_127 = scratch[50][tid];
      output_0 -= ropl_127;
      double ropl_128 = scratch[51][tid];
      output_0 -= ropl_128;
      double ropl_130 = scratch[53][tid];
      output_0 += ropl_130;
      double ropl_184 = scratch[76][tid];
      output_0 -= ropl_184;
      double ropl_185 = scratch[77][tid];
      output_0 -= ropl_185;
      double ropl_187 = scratch[78][tid];
      output_0 -= ropl_187;
      double ropl_189 = scratch[79][tid];
      output_0 -= ropl_189;
      double ropl_75 = scratch[23][tid];
      output_1 -= ropl_75;
      double ropl_76 = scratch[24][tid];
      output_1 -= ropl_76;
      double ropl_194 = scratch[84][tid];
      output_1 += ropl_194;
      double ropl_84 = scratch[26][tid];
      output_1 -= ropl_84;
      double ropl_122 = scratch[46][tid];
      output_1 += ropl_122;
      double ropl_162 = scratch[69][tid];
      output_1 -= ropl_162;
      double ropl_259 = scratch[116][tid];
      output_1 += ropl_259;
    }
    else if (wid == 1)
    {
      double ropl_150 = scratch[65][tid];
      output_0 -= ropl_150;
      double ropl_158 = scratch[66][tid];
      output_0 -= ropl_158;
      double ropl_160 = scratch[68][tid];
      output_0 = __fma_rn(-2.0, ropl_160, output_0);
      double ropl_237 = scratch[108][tid];
      output_0 -= ropl_237;
      double ropl_162 = scratch[69][tid];
      output_0 -= ropl_162;
      double ropl_171 = scratch[75][tid];
      output_0 -= ropl_171;
      double ropl_263 = scratch[117][tid];
      output_0 -= ropl_263;
      double ropl_218 = scratch[100][tid];
      output_1 += ropl_218;
      double ropl_94 = scratch[27][tid];
      output_1 -= ropl_94;
      double ropl_95 = scratch[28][tid];
      output_1 += ropl_95;
      double ropl_55 = scratch[13][tid];
      output_1 -= ropl_55;
      double ropl_56 = scratch[14][tid];
      output_1 -= ropl_56;
      double ropl_57 = scratch[15][tid];
      output_1 -= ropl_57;
      double ropl_58 = scratch[16][tid];
      output_1 -= ropl_58;
      double ropl_68 = scratch[18][tid];
      output_1 -= ropl_68;
      double ropl_69 = scratch[19][tid];
      output_1 -= ropl_69;
      double ropl_277 = scratch[119][tid];
      output_2 -= ropl_277;
    }
    else if (wid == 2)
    {
      double ropl_143 = scratch[62][tid];
      output_0 += ropl_143;
      double ropl_280 = scratch[122][tid];
      output_0 += ropl_280;
      double ropl_233 = scratch[104][tid];
      output_0 += ropl_233;
      double ropl_185 = scratch[77][tid];
      output_0 += ropl_185;
      double ropl_187 = scratch[78][tid];
      output_0 += ropl_187;
      double ropl_160 = scratch[68][tid];
      output_1 += ropl_160;
    }
    else if (wid == 3)
    {
      double ropl_191 = scratch[81][tid];
      output_0 -= ropl_191;
      double ropl_119 = scratch[43][tid];
      output_0 += ropl_119;
      double ropl_195 = scratch[85][tid];
      output_0 -= ropl_195;
      double ropl_97 = scratch[29][tid];
      output_0 -= ropl_97;
      double ropl_98 = scratch[30][tid];
      output_0 -= ropl_98;
      double ropl_100 = scratch[31][tid];
      output_0 -= ropl_100;
      double ropl_101 = scratch[32][tid];
      output_0 -= ropl_101;
      double ropl_111 = scratch[36][tid];
      output_0 -= ropl_111;
      double ropl_184 = scratch[76][tid];
      output_0 += ropl_184;
      double ropl_112 = scratch[37][tid];
      output_0 -= ropl_112;
      double ropl_113 = scratch[38][tid];
      output_0 -= ropl_113;
      double ropl_190 = scratch[80][tid];
      output_1 -= ropl_190;
      double ropl_192 = scratch[82][tid];
      output_1 += ropl_192;
      double ropl_193 = scratch[83][tid];
      output_1 += ropl_193;
      double ropl_194 = scratch[84][tid];
      output_1 += ropl_194;
      output_1 -= ropl_195;
      double ropl_197 = scratch[87][tid];
      output_1 -= ropl_197;
      double ropl_198 = scratch[88][tid];
      output_1 -= ropl_198;
      double ropl_199 = scratch[89][tid];
      output_1 -= ropl_199;
      double ropl_201 = scratch[90][tid];
      output_1 -= ropl_201;
      double ropl_202 = scratch[91][tid];
      output_1 += ropl_202;
      double ropl_203 = scratch[92][tid];
      output_1 -= ropl_203;
      double ropl_106 = scratch[35][tid];
      output_1 += ropl_106;
      double ropl_216 = scratch[99][tid];
      output_1 += ropl_216;
      double ropl_279 = scratch[121][tid];
      output_2 += ropl_279;
      double ropl_234 = scratch[105][tid];
      output_2 -= ropl_234;
    }
    else if (wid == 4)
    {
      double ropl_129 = scratch[52][tid];
      output_0 += ropl_129;
      double ropl_185 = scratch[77][tid];
      output_0 += ropl_185;
      double ropl_113 = scratch[38][tid];
      output_0 += ropl_113;
      double ropl_265 = scratch[118][tid];
      output_0 += ropl_265;
      double ropl_114 = scratch[39][tid];
      output_0 += ropl_114;
      double ropl_115 = scratch[40][tid];
      output_1 += ropl_115;
      double ropl_116 = scratch[41][tid];
      output_1 += ropl_116;
      double ropl_118 = scratch[42][tid];
      output_1 += ropl_118;
      double ropl_119 = scratch[43][tid];
      output_1 += ropl_119;
      double ropl_120 = scratch[44][tid];
      output_1 += ropl_120;
      double ropl_121 = scratch[45][tid];
      output_1 += ropl_121;
      double ropl_122 = scratch[46][tid];
      output_1 += ropl_122;
      double ropl_103 = scratch[33][tid];
      output_1 -= ropl_103;
      double ropl_104 = scratch[34][tid];
      output_1 -= ropl_104;
      double ropl_106 = scratch[35][tid];
      output_1 -= ropl_106;
      double ropl_278 = scratch[120][tid];
      output_2 += ropl_278;
      double ropl_131 = scratch[54][tid];
      output_2 -= ropl_131;
    }
    else if (wid == 5)
    {
      double ropl_190 = scratch[80][tid];
      output_0 += ropl_190;
      double ropl_140 = scratch[61][tid];
      output_0 -= ropl_140;
      double ropl_76 = scratch[24][tid];
      output_0 += ropl_76;
      double ropl_148 = scratch[64][tid];
      output_0 -= ropl_148;
      double ropl_159 = scratch[67][tid];
      output_0 -= ropl_159;
      double ropl_236 = scratch[107][tid];
      output_0 += ropl_236;
      double ropl_47 = scratch[10][tid];
      output_0 -= ropl_47;
      double ropl_49 = scratch[11][tid];
      output_0 -= ropl_49;
      double ropl_50 = scratch[12][tid];
      output_0 += ropl_50;
      double ropl_169 = scratch[73][tid];
      output_0 += ropl_169;
      double ropl_253 = scratch[113][tid];
      output_0 += ropl_253;
      double ropl_67 = scratch[17][tid];
      output_0 -= ropl_67;
      double ropl_116 = scratch[41][tid];
      output_1 -= ropl_116;
      double ropl_118 = scratch[42][tid];
      output_1 -= ropl_118;
      double ropl_119 = scratch[43][tid];
      output_1 -= ropl_119;
      double ropl_120 = scratch[44][tid];
      output_1 -= ropl_120;
      double ropl_121 = scratch[45][tid];
      output_1 -= ropl_121;
      double ropl_122 = scratch[46][tid];
      output_1 -= ropl_122;
      double ropl_125 = scratch[48][tid];
      output_1 += ropl_125;
      double ropl_126 = scratch[49][tid];
      output_1 += ropl_126;
      double ropl_127 = scratch[50][tid];
      output_1 += ropl_127;
      double ropl_128 = scratch[51][tid];
      output_1 += ropl_128;
    }
    else if (wid == 6)
    {
      double ropl_139 = scratch[60][tid];
      output_0 += ropl_139;
      double ropl_118 = scratch[42][tid];
      output_0 += ropl_118;
      double ropl_193 = scratch[83][tid];
      output_0 += ropl_193;
      double ropl_42 = scratch[6][tid];
      output_0 += ropl_42;
      double ropl_50 = scratch[12][tid];
      output_0 -= ropl_50;
      double ropl_170 = scratch[74][tid];
      output_0 += ropl_170;
      double ropl_255 = scratch[114][tid];
      output_0 += ropl_255;
      double ropl_190 = scratch[80][tid];
      output_1 += ropl_190;
      double ropl_197 = scratch[87][tid];
      output_1 += ropl_197;
      double ropl_199 = scratch[89][tid];
      output_1 += ropl_199;
      double ropl_201 = scratch[90][tid];
      output_1 += ropl_201;
      double ropl_203 = scratch[92][tid];
      output_1 += ropl_203;
      double ropl_204 = scratch[93][tid];
      output_1 += ropl_204;
      double ropl_206 = scratch[95][tid];
      output_1 += ropl_206;
      double ropl_207 = scratch[96][tid];
      output_1 += ropl_207;
      double ropl_208 = scratch[97][tid];
      output_1 += ropl_208;
      double ropl_209 = scratch[98][tid];
      output_1 -= ropl_209;
      double ropl_235 = scratch[106][tid];
      output_2 -= ropl_235;
      double ropl_236 = scratch[107][tid];
      output_2 -= ropl_236;
      double ropl_237 = scratch[108][tid];
      output_2 -= ropl_237;
    }
    else if (wid == 7)
    {
      double ropl_245 = scratch[109][tid];
      output_0 -= ropl_245;
      double ropl_247 = scratch[110][tid];
      output_0 -= ropl_247;
      double ropl_249 = scratch[111][tid];
      output_0 -= ropl_249;
      double ropl_251 = scratch[112][tid];
      output_0 -= ropl_251;
      double ropl_253 = scratch[113][tid];
      output_0 -= ropl_253;
      double ropl_255 = scratch[114][tid];
      output_0 -= ropl_255;
      double ropl_257 = scratch[115][tid];
      output_0 -= ropl_257;
      double ropl_259 = scratch[116][tid];
      output_0 -= ropl_259;
      double ropl_263 = scratch[117][tid];
      output_0 -= ropl_263;
      double ropl_70 = scratch[20][tid];
      output_1 -= ropl_70;
      double ropl_71 = scratch[21][tid];
      output_1 -= ropl_71;
      double ropl_234 = scratch[105][tid];
      output_1 += ropl_234;
      double ropl_98 = scratch[30][tid];
      output_1 += ropl_98;
      double ropl_103 = scratch[33][tid];
      output_1 += ropl_103;
      double ropl_131 = scratch[54][tid];
      output_1 += ropl_131;
      double ropl_69 = scratch[19][tid];
      output_1 += ropl_69;
      double ropl_278 = scratch[120][tid];
      output_2 -= ropl_278;
      double ropl_279 = scratch[121][tid];
      output_2 -= ropl_279;
      double ropl_280 = scratch[122][tid];
      output_2 -= ropl_280;
      double ropl_277 = scratch[119][tid];
      output_2 += ropl_277;
    }
    else if (wid == 8)
    {
      double ropl_218 = scratch[100][tid];
      output_0 -= ropl_218;
      double ropl_191 = scratch[81][tid];
      output_0 += ropl_191;
      double ropl_192 = scratch[82][tid];
      output_0 -= ropl_192;
      double ropl_119 = scratch[43][tid];
      output_0 -= ropl_119;
      double ropl_193 = scratch[83][tid];
      output_0 -= ropl_193;
      double ropl_194 = scratch[84][tid];
      output_0 -= ropl_194;
      double ropl_195 = scratch[85][tid];
      output_0 = __fma_rn(2.0, ropl_195, output_0);
      double ropl_196 = scratch[86][tid];
      output_0 -= ropl_196;
      double ropl_123 = scratch[47][tid];
      output_0 += ropl_123;
      double ropl_95 = scratch[28][tid];
      output_0 -= ropl_95;
      double ropl_97 = scratch[29][tid];
      output_0 += ropl_97;
      double ropl_202 = scratch[91][tid];
      output_0 -= ropl_202;
      double ropl_101 = scratch[32][tid];
      output_0 += ropl_101;
      double ropl_104 = scratch[34][tid];
      output_0 += ropl_104;
      double ropl_133 = scratch[55][tid];
      output_0 += ropl_133;
      double ropl_111 = scratch[36][tid];
      output_0 += ropl_111;
      double ropl_112 = scratch[37][tid];
      output_0 += ropl_112;
      double ropl_114 = scratch[39][tid];
      output_0 += ropl_114;
      double ropl_216 = scratch[99][tid];
      output_0 -= ropl_216;
      double ropl_139 = scratch[60][tid];
      output_1 -= ropl_139;
      double ropl_146 = scratch[63][tid];
      output_1 += ropl_146;
      output_1 -= ropl_133;
      double ropl_134 = scratch[56][tid];
      output_1 -= ropl_134;
      double ropl_135 = scratch[57][tid];
      output_1 -= ropl_135;
      double ropl_137 = scratch[58][tid];
      output_1 -= ropl_137;
      double ropl_138 = scratch[59][tid];
      output_1 -= ropl_138;
      double ropl_231 = scratch[102][tid];
      output_2 -= ropl_231;
      double ropl_232 = scratch[103][tid];
      output_2 -= ropl_232;
      double ropl_233 = scratch[104][tid];
      output_2 -= ropl_233;
      double ropl_100 = scratch[31][tid];
      output_2 += ropl_100;
    }
    else if (wid == 9)
    {
      double ropl_21 = scratch[0][tid];
      output_0 -= ropl_21;
      double ropl_26 = scratch[2][tid];
      output_0 -= ropl_26;
      double ropl_74 = scratch[22][tid];
      output_0 = __fma_rn(2.0, ropl_74, output_0);
      double ropl_232 = scratch[103][tid];
      output_0 += ropl_232;
      double ropl_233 = scratch[104][tid];
      output_0 += ropl_233;
      double ropl_158 = scratch[66][tid];
      output_1 += ropl_158;
      double ropl_237 = scratch[108][tid];
      output_1 += ropl_237;
      double ropl_162 = scratch[69][tid];
      output_1 += ropl_162;
      double ropl_171 = scratch[75][tid];
      output_1 += ropl_171;
      double ropl_263 = scratch[117][tid];
      output_1 += ropl_263;
      double ropl_146 = scratch[63][tid];
      output_2 -= ropl_146;
      double ropl_245 = scratch[109][tid];
      output_2 += ropl_245;
      double ropl_265 = scratch[118][tid];
      output_2 += ropl_265;
    }
    else if (wid == 10)
    {
      double ropl_71 = scratch[21][tid];
      output_0 += ropl_71;
      double ropl_140 = scratch[61][tid];
      output_0 += ropl_140;
      double ropl_192 = scratch[82][tid];
      output_0 += ropl_192;
      double ropl_32 = scratch[3][tid];
      output_0 += ropl_32;
      double ropl_121 = scratch[45][tid];
      output_0 += ropl_121;
      double ropl_45 = scratch[8][tid];
      output_0 += ropl_45;
      double ropl_126 = scratch[49][tid];
      output_0 += ropl_126;
      double ropl_247 = scratch[110][tid];
      output_0 += ropl_247;
      double ropl_167 = scratch[71][tid];
      output_0 += ropl_167;
      double ropl_203 = scratch[92][tid];
      output_0 += ropl_203;
      double ropl_134 = scratch[56][tid];
      output_0 += ropl_134;
      double ropl_112 = scratch[37][tid];
      output_0 += ropl_112;
      double ropl_208 = scratch[97][tid];
      output_0 += ropl_208;
      output_1 += ropl_247;
      double ropl_249 = scratch[111][tid];
      output_1 += ropl_249;
      double ropl_251 = scratch[112][tid];
      output_1 += ropl_251;
      double ropl_253 = scratch[113][tid];
      output_1 += ropl_253;
      double ropl_255 = scratch[114][tid];
      output_1 += ropl_255;
      double ropl_257 = scratch[115][tid];
      output_1 += ropl_257;
      double ropl_259 = scratch[116][tid];
      output_1 += ropl_259;
      double ropl_263 = scratch[117][tid];
      output_1 += ropl_263;
      double ropl_265 = scratch[118][tid];
      output_1 -= ropl_265;
      double ropl_279 = scratch[121][tid];
      output_2 += ropl_279;
      double ropl_189 = scratch[79][tid];
      output_2 += ropl_189;
    }
    else if (wid == 11)
    {
      double ropl_143 = scratch[62][tid];
      output_0 -= ropl_143;
      double ropl_231 = scratch[102][tid];
      output_0 += ropl_231;
      double ropl_75 = scratch[23][tid];
      output_0 += ropl_75;
      double ropl_232 = scratch[103][tid];
      output_0 += ropl_232;
      double ropl_76 = scratch[24][tid];
      output_0 += ropl_76;
      double ropl_194 = scratch[84][tid];
      output_0 -= ropl_194;
      double ropl_82 = scratch[25][tid];
      output_0 -= ropl_82;
      double ropl_234 = scratch[105][tid];
      output_0 += ropl_234;
      double ropl_84 = scratch[26][tid];
      output_0 += ropl_84;
      double ropl_122 = scratch[46][tid];
      output_0 -= ropl_122;
      double ropl_162 = scratch[69][tid];
      output_0 += ropl_162;
      double ropl_245 = scratch[109][tid];
      output_0 += ropl_245;
      double ropl_129 = scratch[52][tid];
      output_0 += ropl_129;
      double ropl_103 = scratch[33][tid];
      output_0 += ropl_103;
      double ropl_133 = scratch[55][tid];
      output_0 += ropl_133;
      double ropl_259 = scratch[116][tid];
      output_0 -= ropl_259;
      double ropl_187 = scratch[78][tid];
      output_0 += ropl_187;
      double ropl_196 = scratch[86][tid];
      output_1 += ropl_196;
      double ropl_166 = scratch[70][tid];
      output_1 -= ropl_166;
      double ropl_167 = scratch[71][tid];
      output_1 -= ropl_167;
      double ropl_168 = scratch[72][tid];
      output_1 -= ropl_168;
      double ropl_169 = scratch[73][tid];
      output_1 -= ropl_169;
      double ropl_170 = scratch[74][tid];
      output_1 -= ropl_170;
      double ropl_171 = scratch[75][tid];
      output_1 -= ropl_171;
      double ropl_280 = scratch[122][tid];
      output_2 += ropl_280;
      double ropl_235 = scratch[106][tid];
      output_2 += ropl_235;
      double ropl_236 = scratch[107][tid];
      output_2 += ropl_236;
      double ropl_237 = scratch[108][tid];
      output_2 += ropl_237;
    }
    else if (wid == 12)
    {
      double ropl_218 = scratch[100][tid];
      output_0 += ropl_218;
      double ropl_221 = scratch[101][tid];
      output_0 += ropl_221;
      double ropl_32 = scratch[3][tid];
      output_0 += ropl_32;
      double ropl_33 = scratch[4][tid];
      output_0 += ropl_33;
      double ropl_160 = scratch[68][tid];
      output_0 += ropl_160;
      double ropl_104 = scratch[34][tid];
      output_0 += ropl_104;
      double ropl_106 = scratch[35][tid];
      output_0 += ropl_106;
      double ropl_184 = scratch[76][tid];
      output_0 += ropl_184;
      double ropl_209 = scratch[98][tid];
      output_0 += ropl_209;
      double ropl_138 = scratch[59][tid];
      output_0 += ropl_138;
      double ropl_278 = scratch[120][tid];
      output_1 += ropl_278;
    }
    else if (wid == 13)
    {
      double ropl_70 = scratch[20][tid];
      output_0 += ropl_70;
      double ropl_23 = scratch[1][tid];
      output_0 -= ropl_23;
      double ropl_235 = scratch[106][tid];
      output_0 += ropl_235;
      double ropl_159 = scratch[67][tid];
      output_0 += ropl_159;
      double ropl_46 = scratch[9][tid];
      output_0 += ropl_46;
      double ropl_127 = scratch[50][tid];
      output_0 += ropl_127;
      double ropl_166 = scratch[70][tid];
      output_0 += ropl_166;
      double ropl_201 = scratch[90][tid];
      output_0 += ropl_201;
      double ropl_49 = scratch[11][tid];
      output_0 += ropl_49;
      double ropl_101 = scratch[32][tid];
      output_0 += ropl_101;
      double ropl_251 = scratch[112][tid];
      output_0 += ropl_251;
      double ropl_57 = scratch[15][tid];
      output_0 += ropl_57;
      double ropl_207 = scratch[96][tid];
      output_0 += ropl_207;
      double ropl_137 = scratch[58][tid];
      output_0 += ropl_137;
      output_1 += ropl_70;
      double ropl_71 = scratch[21][tid];
      output_1 += ropl_71;
      double ropl_74 = scratch[22][tid];
      output_1 -= ropl_74;
      double ropl_56 = scratch[14][tid];
      output_1 += ropl_56;
      double ropl_68 = scratch[18][tid];
      output_1 += ropl_68;
    }
    else if (wid == 14)
    {
      double ropl_26 = scratch[2][tid];
      output_0 += ropl_26;
      double ropl_74 = scratch[22][tid];
      output_0 -= ropl_74;
      double ropl_143 = scratch[62][tid];
      output_0 -= ropl_143;
      double ropl_33 = scratch[4][tid];
      output_0 -= ropl_33;
      double ropl_233 = scratch[104][tid];
      output_0 -= ropl_233;
      double ropl_39 = scratch[5][tid];
      output_0 -= ropl_39;
      double ropl_98 = scratch[30][tid];
      output_0 -= ropl_98;
      double ropl_100 = scratch[31][tid];
      output_0 -= ropl_100;
      double ropl_249 = scratch[111][tid];
      output_0 -= ropl_249;
      double ropl_168 = scratch[72][tid];
      output_0 -= ropl_168;
      double ropl_106 = scratch[35][tid];
      output_0 -= ropl_106;
      double ropl_58 = scratch[16][tid];
      output_0 -= ropl_58;
      double ropl_111 = scratch[36][tid];
      output_0 -= ropl_111;
      double ropl_184 = scratch[76][tid];
      output_0 -= ropl_184;
      double ropl_67 = scratch[17][tid];
      output_0 -= ropl_67;
      double ropl_135 = scratch[57][tid];
      output_0 -= ropl_135;
      double ropl_185 = scratch[77][tid];
      output_0 -= ropl_185;
      double ropl_68 = scratch[18][tid];
      output_0 -= ropl_68;
      double ropl_209 = scratch[98][tid];
      output_0 -= ropl_209;
      double ropl_21 = scratch[0][tid];
      output_1 += ropl_21;
      output_1 += ropl_26;
      double ropl_231 = scratch[102][tid];
      output_1 += ropl_231;
    }
    else if (wid == 15)
    {
      double ropl_115 = scratch[40][tid];
      output_0 += ropl_115;
      double ropl_139 = scratch[60][tid];
      output_0 -= ropl_139;
      double ropl_221 = scratch[101][tid];
      output_0 -= ropl_221;
      double ropl_118 = scratch[42][tid];
      output_0 -= ropl_118;
      double ropl_32 = scratch[3][tid];
      output_0 -= ropl_32;
      double ropl_193 = scratch[83][tid];
      output_0 -= ropl_193;
      double ropl_33 = scratch[4][tid];
      output_0 -= ropl_33;
      double ropl_82 = scratch[25][tid];
      output_0 = __fma_rn(2.0, ropl_82, output_0);
      double ropl_150 = scratch[65][tid];
      output_0 += ropl_150;
      double ropl_42 = scratch[6][tid];
      output_0 -= ropl_42;
      double ropl_94 = scratch[27][tid];
      output_0 -= ropl_94;
      double ropl_123 = scratch[47][tid];
      output_0 += ropl_123;
      double ropl_95 = scratch[28][tid];
      output_0 += ropl_95;
      double ropl_98 = scratch[30][tid];
      output_0 += ropl_98;
      double ropl_50 = scratch[12][tid];
      output_0 += ropl_50;
      double ropl_131 = scratch[54][tid];
      output_0 += ropl_131;
      double ropl_170 = scratch[74][tid];
      output_0 -= ropl_170;
      double ropl_205 = scratch[94][tid];
      output_0 += ropl_205;
      double ropl_255 = scratch[114][tid];
      output_0 -= ropl_255;
      double ropl_113 = scratch[38][tid];
      output_0 += ropl_113;
      double ropl_189 = scratch[79][tid];
      output_0 += ropl_189;
      output_1 += ropl_94;
      double ropl_198 = scratch[88][tid];
      output_1 += ropl_198;
      double ropl_204 = scratch[93][tid];
      output_1 -= ropl_204;
      output_1 -= ropl_205;
      double ropl_206 = scratch[95][tid];
      output_1 -= ropl_206;
      double ropl_207 = scratch[96][tid];
      output_1 -= ropl_207;
      double ropl_208 = scratch[97][tid];
      output_1 -= ropl_208;
    }
    else if (wid == 16)
    {
      double ropl_21 = scratch[0][tid];
      output_0 -= ropl_21;
      double ropl_190 = scratch[80][tid];
      output_0 -= ropl_190;
      double ropl_140 = scratch[61][tid];
      output_0 += ropl_140;
      double ropl_191 = scratch[81][tid];
      output_0 += ropl_191;
      double ropl_75 = scratch[23][tid];
      output_0 += ropl_75;
      double ropl_76 = scratch[24][tid];
      output_0 -= ropl_76;
      double ropl_120 = scratch[44][tid];
      output_0 += ropl_120;
      double ropl_148 = scratch[64][tid];
      output_0 = __fma_rn(2.0, ropl_148, output_0);
      double ropl_39 = scratch[5][tid];
      output_0 -= ropl_39;
      double ropl_42 = scratch[6][tid];
      output_0 -= ropl_42;
      double ropl_158 = scratch[66][tid];
      output_0 -= ropl_158;
      double ropl_44 = scratch[7][tid];
      output_0 -= ropl_44;
      double ropl_159 = scratch[67][tid];
      output_0 += ropl_159;
      double ropl_236 = scratch[107][tid];
      output_0 -= ropl_236;
      double ropl_45 = scratch[8][tid];
      output_0 -= ropl_45;
      double ropl_46 = scratch[9][tid];
      output_0 -= ropl_46;
      double ropl_199 = scratch[89][tid];
      output_0 += ropl_199;
      double ropl_47 = scratch[10][tid];
      output_0 = __fma_rn(2.0, ropl_47, output_0);
      double ropl_128 = scratch[51][tid];
      output_0 += ropl_128;
      double ropl_50 = scratch[12][tid];
      output_0 -= ropl_50;
      double ropl_169 = scratch[73][tid];
      output_0 -= ropl_169;
      double ropl_253 = scratch[113][tid];
      output_0 -= ropl_253;
      double ropl_206 = scratch[95][tid];
      output_0 += ropl_206;
      double ropl_257 = scratch[115][tid];
      output_0 += ropl_257;
      double ropl_67 = scratch[17][tid];
      output_0 += ropl_67;
      double ropl_216 = scratch[99][tid];
      output_0 += ropl_216;
      double ropl_166 = scratch[70][tid];
      output_1 += ropl_166;
      double ropl_167 = scratch[71][tid];
      output_1 += ropl_167;
      double ropl_168 = scratch[72][tid];
      output_1 += ropl_168;
      output_1 += ropl_169;
      double ropl_170 = scratch[74][tid];
      output_1 += ropl_170;
      double ropl_171 = scratch[75][tid];
      output_1 += ropl_171;
    }
    else if (wid == 17)
    {
      double ropl_218 = scratch[100][tid];
      output_0 -= ropl_218;
      double ropl_191 = scratch[81][tid];
      output_0 -= ropl_191;
      double ropl_221 = scratch[101][tid];
      output_0 -= ropl_221;
      double ropl_26 = scratch[2][tid];
      output_0 -= ropl_26;
      double ropl_75 = scratch[23][tid];
      output_0 -= ropl_75;
      double ropl_120 = scratch[44][tid];
      output_0 -= ropl_120;
      double ropl_148 = scratch[64][tid];
      output_0 -= ropl_148;
      double ropl_39 = scratch[5][tid];
      output_0 += ropl_39;
      double ropl_150 = scratch[65][tid];
      output_0 += ropl_150;
      double ropl_42 = scratch[6][tid];
      output_0 += ropl_42;
      double ropl_158 = scratch[66][tid];
      output_0 += ropl_158;
      double ropl_196 = scratch[86][tid];
      output_0 -= ropl_196;
      double ropl_45 = scratch[8][tid];
      output_0 += ropl_45;
      double ropl_160 = scratch[68][tid];
      output_0 += ropl_160;
      double ropl_46 = scratch[9][tid];
      output_0 += ropl_46;
      double ropl_199 = scratch[89][tid];
      output_0 -= ropl_199;
      double ropl_47 = scratch[10][tid];
      output_0 -= ropl_47;
      double ropl_128 = scratch[51][tid];
      output_0 -= ropl_128;
      double ropl_56 = scratch[14][tid];
      output_0 -= ropl_56;
      double ropl_206 = scratch[95][tid];
      output_0 -= ropl_206;
      double ropl_257 = scratch[115][tid];
      output_0 -= ropl_257;
      double ropl_216 = scratch[99][tid];
      output_0 -= ropl_216;
      double ropl_55 = scratch[13][tid];
      output_1 += ropl_55;
      double ropl_205 = scratch[94][tid];
      output_1 += ropl_205;
      double ropl_57 = scratch[15][tid];
      output_1 += ropl_57;
      double ropl_58 = scratch[16][tid];
      output_1 += ropl_58;
      double ropl_209 = scratch[98][tid];
      output_1 += ropl_209;
    }
    else if (wid == 18)
    {
      double ropl_23 = scratch[1][tid];
      output_0 += ropl_23;
      double ropl_71 = scratch[21][tid];
      output_0 -= ropl_71;
      double ropl_116 = scratch[41][tid];
      output_0 += ropl_116;
      double ropl_140 = scratch[61][tid];
      output_0 -= ropl_140;
      double ropl_74 = scratch[22][tid];
      output_0 += ropl_74;
      double ropl_143 = scratch[62][tid];
      output_0 += ropl_143;
      double ropl_192 = scratch[82][tid];
      output_0 -= ropl_192;
      double ropl_146 = scratch[63][tid];
      output_0 += ropl_146;
      double ropl_232 = scratch[103][tid];
      output_0 -= ropl_232;
      double ropl_33 = scratch[4][tid];
      output_0 += ropl_33;
      double ropl_82 = scratch[25][tid];
      output_0 -= ropl_82;
      double ropl_121 = scratch[45][tid];
      output_0 -= ropl_121;
      double ropl_84 = scratch[26][tid];
      output_0 += ropl_84;
      double ropl_44 = scratch[7][tid];
      output_0 -= ropl_44;
      double ropl_94 = scratch[27][tid];
      output_0 += ropl_94;
      double ropl_197 = scratch[87][tid];
      output_0 += ropl_197;
      double ropl_45 = scratch[8][tid];
      output_0 -= ropl_45;
      double ropl_125 = scratch[48][tid];
      output_0 += ropl_125;
      double ropl_97 = scratch[29][tid];
      output_0 += ropl_97;
      double ropl_126 = scratch[49][tid];
      output_0 -= ropl_126;
      double ropl_98 = scratch[30][tid];
      output_0 += ropl_98;
      double ropl_247 = scratch[110][tid];
      output_0 -= ropl_247;
      double ropl_49 = scratch[11][tid];
      output_0 -= ropl_49;
      double ropl_100 = scratch[31][tid];
      output_0 = __fma_rn(2.0, ropl_100, output_0);
      double ropl_167 = scratch[71][tid];
      output_0 -= ropl_167;
      double ropl_202 = scratch[91][tid];
      output_0 += ropl_202;
      double ropl_203 = scratch[92][tid];
      output_0 -= ropl_203;
      double ropl_55 = scratch[13][tid];
      output_0 += ropl_55;
      double ropl_130 = scratch[53][tid];
      output_0 += ropl_130;
      double ropl_204 = scratch[93][tid];
      output_0 += ropl_204;
      double ropl_134 = scratch[56][tid];
      output_0 -= ropl_134;
      double ropl_112 = scratch[37][tid];
      output_0 -= ropl_112;
      double ropl_208 = scratch[97][tid];
      output_0 -= ropl_208;
      double ropl_68 = scratch[18][tid];
      output_0 += ropl_68;
      double ropl_113 = scratch[38][tid];
      output_0 -= ropl_113;
      double ropl_69 = scratch[19][tid];
      output_0 += ropl_69;
      double ropl_129 = scratch[52][tid];
      output_1 -= ropl_129;
      output_1 -= ropl_130;
      double ropl_138 = scratch[59][tid];
      output_1 += ropl_138;
    }
    else if (wid == 19)
    {
      double ropl_21 = scratch[0][tid];
      output_0 += ropl_21;
      double ropl_70 = scratch[20][tid];
      output_0 -= ropl_70;
      double ropl_218 = scratch[100][tid];
      output_0 += ropl_218;
      double ropl_278 = scratch[120][tid];
      output_0 += ropl_278;
      double ropl_23 = scratch[1][tid];
      output_0 += ropl_23;
      double ropl_221 = scratch[101][tid];
      output_0 += ropl_221;
      double ropl_279 = scratch[121][tid];
      output_0 += ropl_279;
      double ropl_231 = scratch[102][tid];
      output_0 -= ropl_231;
      double ropl_280 = scratch[122][tid];
      output_0 += ropl_280;
      double ropl_32 = scratch[3][tid];
      output_0 -= ropl_32;
      double ropl_39 = scratch[5][tid];
      output_0 += ropl_39;
      double ropl_196 = scratch[86][tid];
      output_0 += ropl_196;
      double ropl_235 = scratch[106][tid];
      output_0 -= ropl_235;
      double ropl_44 = scratch[7][tid];
      output_0 = __fma_rn(2.0, ropl_44, output_0);
      double ropl_159 = scratch[67][tid];
      output_0 -= ropl_159;
      double ropl_46 = scratch[9][tid];
      output_0 -= ropl_46;
      double ropl_127 = scratch[50][tid];
      output_0 -= ropl_127;
      double ropl_166 = scratch[70][tid];
      output_0 -= ropl_166;
      double ropl_201 = scratch[90][tid];
      output_0 -= ropl_201;
      double ropl_49 = scratch[11][tid];
      output_0 += ropl_49;
      double ropl_249 = scratch[111][tid];
      output_0 += ropl_249;
      double ropl_101 = scratch[32][tid];
      output_0 -= ropl_101;
      double ropl_168 = scratch[72][tid];
      output_0 += ropl_168;
      double ropl_251 = scratch[112][tid];
      output_0 -= ropl_251;
      double ropl_103 = scratch[33][tid];
      output_0 -= ropl_103;
      double ropl_56 = scratch[14][tid];
      output_0 += ropl_56;
      double ropl_104 = scratch[34][tid];
      output_0 -= ropl_104;
      double ropl_57 = scratch[15][tid];
      output_0 -= ropl_57;
      double ropl_58 = scratch[16][tid];
      output_0 += ropl_58;
      double ropl_111 = scratch[36][tid];
      output_0 += ropl_111;
      double ropl_207 = scratch[96][tid];
      output_0 -= ropl_207;
      double ropl_67 = scratch[17][tid];
      output_0 += ropl_67;
      double ropl_135 = scratch[57][tid];
      output_0 += ropl_135;
      double ropl_137 = scratch[58][tid];
      output_0 -= ropl_137;
      double ropl_187 = scratch[78][tid];
      output_0 -= ropl_187;
      double ropl_69 = scratch[19][tid];
      output_0 -= ropl_69;
      double ropl_138 = scratch[59][tid];
      output_0 -= ropl_138;
      double ropl_189 = scratch[79][tid];
      output_0 -= ropl_189;
      double ropl_277 = scratch[119][tid];
      output_0 += ropl_277;
      double ropl_115 = scratch[40][tid];
      output_1 -= ropl_115;
      double ropl_139 = scratch[60][tid];
      output_1 += ropl_139;
      double ropl_134 = scratch[56][tid];
      output_1 += ropl_134;
      output_1 += ropl_135;
      output_1 += ropl_137;
      double ropl_114 = scratch[39][tid];
      output_1 -= ropl_114;
    }
    {
      if (tid == 2)
        int_mirror[wid] = index_constants[0];
      int index = int_mirror[wid];
      {
        output_0 *= (1e-3 * molecular_masses[index]);
        asm volatile("st.global.cs.f64 [%0],  %1;" : : 
          "l"(wdot_array+index*spec_stride) ,  "d"(output_0) : "memory"); 
      }
    }
    {
      if (tid == 3)
        int_mirror[wid] = index_constants[0];
      int index = int_mirror[wid];
      {
        output_1 *= (1e-3 * molecular_masses[index]);
        asm volatile("st.global.cs.f64 [%0],  %1;" : : 
          "l"(wdot_array+index*spec_stride) ,  "d"(output_1) : "memory"); 
      }
    }
    {
      if (tid == 4)
        int_mirror[wid] = index_constants[0];
      int index = int_mirror[wid];
      if (((threadIdx.x >> 5)+40) < 52)
      {
        output_2 *= (1e-3 * molecular_masses[index]);
        asm volatile("st.global.cs.f64 [%0],  %1;" : : 
          "l"(wdot_array+index*spec_stride) ,  "d"(output_2) : "memory"); 
      }
    }
    {
      temperature_array += slice_stride;
      pressure_array += slice_stride;
      avmolwt_array += slice_stride;
      mass_frac_array += slice_stride;
      diffusion_array += slice_stride;
      wdot_array += slice_stride;
    }
  }
}

