/*
 * Copyright 2015 Stanford University and NVIDIA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Kepler tuned viscosity kernel for DME.
 * Gets 3 CTAs with 15 warps per CTA.
 * Should compile to 40 registers with 20 bytes spilled.
 * SM-throughput limited.
 *
 * Launch with:
 *  dim3 grid((nx*ny)/32,1,1);
 *  dim3 block(15*32,1,1);
 *
 * DON'T FORGET: cudaDeviceSetSharedMemConfig(cudaSharedMemBankSizeEightByte)
 *
 * gpu_viscosity<<<grid,block>>>(temperature_ptr,  
 *                 mole_frac_input_ptr, nx*ny, nx, nz, nx*ny*nz, output_d);
 *
 * Performance numbers on K20c with 13 SMs:
 * 
 * 32x32x32
 *   Latency: 2.666 ms
 *   Throughput: 12.290 Mpoints/s
 *   Perf: 454.3 GFLOPS
 *
 * 64x64x64
 *   Latency: 15.871 ms
 *   Throughput: 16.517 Mpoints/s
 *   Perf: 600.0 GFLOPS
 *
 * 128x128x128
 *   Latency: 122.922 ms
 *   Throughput: 17.061 Mpoints/s
 *   Perf: 617.7 GFLOPS
 *
 * Generation command:
 *   ./singe --dir inputs/DME/ --cuda --visc 15 --k20
 *
 */

#ifndef TOTAL_STEPS
#define TOTAL_STEPS 32
#endif

__constant__ double recip_molecular_masses[30] = {0.9920930186414277, 
  0.4960465093207139, 0.06651120780362699, 0.06250234383789392, 
  0.06233236489615739, 0.05879803873262004, 0.05550825019122593, 
  0.0384050534905585, 0.03570083414998991, 0.03564531203549703, 
  0.0344090165386938, 0.03330392596670473, 0.03325560390181349, 
  0.03222224585186918, 0.03125117191894696, 0.03029681486555637, 
  0.02939901936631002, 0.02272213442641948, 0.02269963076780593, 
  0.02172690196756651, 0.02170632557057247, 0.01693623220658274, 
  0.01665196298335236, 0.01611112292593459, 0.01332544289441412, 
  0.01332544289441412, 0.01297684217629429, 0.01086345098378326, 
  9.169336089635763e-03, 0.03569720205330306}; 

__constant__ double viscosity_neta[30][4] = { {0.01757076575883849, 
  -0.3980310503714805, 3.652696513182246, -20.40535459028184} , 
  {2.33100139953291e-03, -0.05016056447174558, 1.003492096616715, 
  -13.84035618317203} , {0.01745292662633083, -0.3952264471530641, 
  3.630413752559152, -20.22834639799518} , {7.841447484966627e-03, 
  -0.173865132716423, 1.929020467011314, -15.10026747364014} , 
  {0.01712465091640445, -0.3874927847672007, 3.569547094857978, 
  -20.00458513330756} , {7.841447484966898e-03, -0.1738651327164285, 
  1.929020467011351, -15.06971969464791} , {-0.05045537005542979, 
  1.031781480707904, -5.987902336937527, 0.7009388163509245} , 
  {0.02486206221740027, -0.587852927349057, 5.290034479082859, 
  -24.74505541054281} , {0.01054816060102988, -0.235770758410507, 
  2.400968097030088, -16.61559645415615} , {0.02436925155378749, 
  -0.5700815021202054, 5.100704137488538, -23.93711926625748} , 
  {0.02441371059443401, -0.5734517595536173, 5.145721907003817, 
  -24.529504601817} , {3.212240006873408e-03, -0.167235142784101, 
  2.703808872626219, -19.85295314006834} , {0.02441371059443357, 
  -0.5734517595536081, 5.145721907003752, -24.51245692810857} , 
  {-0.023618697767246, 0.4069654657503018, -1.384947591294291, 
  -10.10494407684299} , {0.01214171417829216, -0.272158843610373, 
  2.678085479588637, -17.15808369877082} , {0.01214171417829254, 
  -0.272158843610381, 2.678085479588692, -17.14257655384877} , 
  {0.01214171417829194, -0.272158843610368, 2.6780854795886, -17.12753591977842} 
  , {0.02440890122032096, -0.5724287559128219, 5.130428117775916, 
  -23.97057723451212} , {0.01173153385928102, -0.3419575514452081, 
  3.866549994604684, -22.31996918351742} , {7.235675392407266e-03, 
  -0.2503679239288357, 3.262693232699687, -21.25097866061817} , 
  {0.02237582504898801, -0.5500614533107528, 5.159442761254609, 
  -25.02944655668421} , {0.01536289690465918, -0.4150999855999652, 
  4.341454112797969, -23.48003905216325} , {0.0153628969046591, 
  -0.4150999855999636, 4.341454112797959, -23.47157548306755} , 
  {0.02237582504898794, -0.5500614533107515, 5.159442761254599, 
  -24.880399646385} , {0.02237582504898696, -0.5500614533107304, 
  5.159442761254451, -24.78548230085281} , {0.02237582504898696, 
  -0.5500614533107304, 5.159442761254451, -24.78548230085281} , 
  {0.02237582504898747, -0.5500614533107413, 5.159442761254526, 
  -24.77222789611538} , {0.02237582504898723, -0.550061453310736, 
  5.159442761254486, -24.68334671426243} , {0.02237582504898733, 
  -0.5500614533107383, 5.159442761254504, -24.59857713887057} , 
  {0.01047722299820579, -0.2341198015382627, 2.388160005867027, 
  -16.56562055017989} }; 

__device__ const double viscosity_mass_ratios[960] = {0.0, 0.3465735902799727, 
  1.351223199909701, 1.382306407117559, 1.383668040020057, 1.412854186109868, 
  1.441642604940847, 1.625813909714501, 1.662321408811029, 1.663099616586355, 
  1.680749116481392, 1.697070792372736, 1.697796790189674, 1.713579896351357, 
  1.728879997397532, 1.744387142319708, 1.75942777638984, 1.888238668707702, 
  1.888734106530485, 1.910632828473667, 1.911106576332154, 2.03518081355703, 
  2.043644382652708, 2.06015348663133, 2.155070832163178, 2.155070832163178, 
  2.168325236900783, 2.257206418753639, 2.341975994145546, 1.662372279911736, 
  -1.744387142319708, -1.397813552039736, -0.3931639424100069, 
  -0.3620807352021493, -0.3607191022996516, -0.3315329562098402, 
  -0.302744537378861, -0.1185732326052076, -0.08206573350867967, 
  -0.08128752573335371, -0.06363802583831621, -0.04731634994697258, 
  -0.04659035213003416, -0.03080724596835131, -0.01550714492217662, 0.0, 
  0.01504063407013245, 0.1438515263879935, 0.1443469642107765, 
  0.1662456861539583, 0.1667194340124462, 0.2907936712373221, 
  0.2992572403330001, 0.3157663443116214, 0.4106836898434693, 
  0.4106836898434693, 0.4239380945810752, 0.512819276433931, 0.5975888518258374, 
  -0.08201486240797261, 0.0, 0.0, 0.0, 0.0, -0.3465735902799726, 0.0, 
  1.004649609629729, 1.035732816837586, 1.037094449740084, 1.066280595829895, 
  1.095069014660875, 1.279240319434528, 1.315747818531056, 1.316526026306382, 
  1.334175526201419, 1.350497202092763, 1.351223199909701, 1.367006306071384, 
  1.382306407117559, 1.397813552039736, 1.412854186109868, 1.541665078427729, 
  1.542160516250512, 1.564059238193694, 1.564532986052182, 1.688607223277058, 
  1.697070792372736, 1.713579896351357, 1.808497241883205, 1.808497241883205, 
  1.821751646620811, 1.910632828473667, 1.995402403865573, 1.315798689631763, 
  -1.759427776389841, -1.412854186109868, -0.4082045764801394, 
  -0.3771213692722816, -0.375759736369784, -0.3465735902799726, 
  -0.3177851714489934, -0.13361386667534, -0.097106367578812, 
  -0.09632815980348611, -0.07867865990844856, -0.06235698401710501, 
  -0.06163098620016667, -0.0458478800384837, -0.03054777899230902, 
  -0.01504063407013241, 0.0, 0.1288108923178611, 0.1293063301406441, 
  0.151205052083826, 0.1516787999423138, 0.2757530371671896, 0.2842166062628677, 
  0.3007257102414889, 0.3956430557733368, 0.3956430557733368, 
  0.4088974605109428, 0.4977786423637987, 0.5825482177557049, 
  -0.09705549647810503, 0.0, 0.0, 0.0, 0.0, -1.351223199909702, 
  -1.004649609629729, 0.0, 0.03108320720785747, 0.03244484011035541, 
  0.06163098620016673, 0.09041940503114584, 0.2745907098047992, 
  0.3110982089013272, 0.3118764166766531, 0.3295259165716906, 
  0.3458475924630343, 0.3465735902799727, 0.3623566964416555, 
  0.3776567974878303, 0.3931639424100069, 0.4082045764801393, 
  0.5370154687980004, 0.5375109066207834, 0.5594096285639653, 
  0.5598833764224531, 0.683957613647329, 0.6924211827430069, 0.7089302867216283, 
  0.8038476322534761, 0.8038476322534761, 0.817102036991082, 0.9059832188439378, 
  0.9907527942358442, 0.3111490800020342, -1.888238668707702, 
  -1.541665078427729, -0.5370154687980003, -0.5059322615901427, 
  -0.504570628687645, -0.4753844825978338, -0.4465960637668545, 
  -0.2624247589932011, -0.2259172598966731, -0.2251390521213472, 
  -0.2074895522263096, -0.1911678763349661, -0.1904418785180277, 
  -0.1746587723563447, -0.1593586713101701, -0.1438515263879935, 
  -0.1288108923178611, 0.0, 4.954378227831078e-04, 0.02239415976596477, 
  0.02286790762445278, 0.1469421448493286, 0.1554057139450066, 
  0.1719148179236278, 0.2668321634554758, 0.2668321634554758, 
  0.2800865681930818, 0.3689677500459375, 0.4537373254378438, 
  -0.2258663887959661, 0.0, 0.0, 0.0, 0.0, -1.382306407117559, 
  -1.035732816837586, -0.03108320720785762, 0.0, 1.361632902497667e-03, 
  0.03054777899230918, 0.05933619782328822, 0.2435075025969416, 
  0.2800150016934697, 0.2807932094687955, 0.298442709363833, 0.3147643852551767, 
  0.3154903830721151, 0.331273489233798, 0.3465735902799727, 0.3620807352021494, 
  0.3771213692722816, 0.5059322615901428, 0.5064276994129258, 
  0.5283264213561075, 0.5288001692145954, 0.6528744064394714, 
  0.6613379755351494, 0.6778470795137707, 0.7727644250456186, 
  0.7727644250456186, 0.7860188297832246, 0.8749000116360803, 
  0.9596695870279867, 0.2800658727941766, -1.888734106530485, 
  -1.542160516250512, -0.5375109066207833, -0.5064276994129259, 
  -0.5050660665104281, -0.4758799204206168, -0.4470915015896375, 
  -0.2629201968159842, -0.2264126977194562, -0.2256344899441303, 
  -0.2079849900490927, -0.191663314157749, -0.1909373163408107, 
  -0.1751542101791278, -0.1598541091329532, -0.1443469642107766, 
  -0.129306330140644, -4.954378227830712e-04, 0.0, 0.02189872194318177, 
  0.02237246980166979, 0.1464467070265456, 0.1549102761222237, 
  0.1714193801008449, 0.2663367256326928, 0.2663367256326928, 
  0.2795911303702987, 0.3684723122231546, 0.4532418876150609, 
  -0.2263618266187491, 0.0, 0.0, 0.0, 0.0, -1.383668040020056, 
  -1.037094449740084, -0.03244484011035531, -1.361632902497763e-03, 0.0, 
  0.02918614608981124, 0.05797456492079061, 0.2421458696944438, 
  0.278653368790972, 0.2794315765662978, 0.2970810764613354, 0.3134027523526789, 
  0.3141287501696174, 0.3299118563313002, 0.3452119573774749, 
  0.3607191022996514, 0.3757597363697839, 0.504570628687645, 0.505066066510428, 
  0.5269647884536099, 0.5274385363120977, 0.6515127735369737, 
  0.6599763426326516, 0.676485446611273, 0.7714027921431209, 0.7714027921431209, 
  0.7846571968807268, 0.8735383787335824, 0.958307954125489, 0.2787042398916789, 
  -1.910632828473667, -1.564059238193694, -0.5594096285639653, 
  -0.5283264213561076, -0.5269647884536098, -0.4977786423637986, 
  -0.4689902235328194, -0.2848189187591661, -0.2483114196626381, 
  -0.2475332118873121, -0.2298837119922746, -0.2135620361009309, 
  -0.2128360382839926, -0.1970529321223096, -0.1817528310761349, 
  -0.1662456861539584, -0.1512050520838259, -0.02239415976596484, 
  -0.02189872194318185, 0.0, 4.737478584879253e-04, 0.1245479850833638, 
  0.1330115541790418, 0.149520658157663, 0.244438003689511, 0.244438003689511, 
  0.257692408427117, 0.3465735902799727, 0.4313431656718791, -0.248260548561931, 
  0.0, 0.0, 0.0, 0.0, -1.412854186109868, -1.066280595829895, 
  -0.06163098620016667, -0.03054777899230902, -0.02918614608981128, 0.0, 
  0.02878841883097929, 0.2129597236046326, 0.2494672227011607, 
  0.2502454304764865, 0.2678949303715241, 0.2842166062628677, 0.284942604079806, 
  0.3007257102414889, 0.3160258112876637, 0.3315329562098401, 
  0.3465735902799727, 0.4753844825978337, 0.4758799204206168, 
  0.4977786423637987, 0.4982523902222865, 0.6223266274471623, 
  0.6307901965428403, 0.6472993005214616, 0.7422166460533095, 
  0.7422166460533095, 0.7554710507909155, 0.8443522326437713, 
  0.9291218080356776, 0.2495180938018677, -1.911106576332154, 
  -1.564532986052182, -0.5598833764224531, -0.5288001692145955, 
  -0.5274385363120978, -0.4982523902222865, -0.4694639713913074, 
  -0.2852926666176538, -0.2487851675211259, -0.2480069597457999, 
  -0.2303574598507623, -0.2140357839594188, -0.2133097861424805, 
  -0.1975266799807975, -0.1822265789346229, -0.1667194340124462, 
  -0.1516787999423138, -0.02286790762445272, -0.02237246980166969, 
  -4.737478584879235e-04, 0.0, 0.1240742372248759, 0.1325378063205539, 
  0.1490469102991752, 0.243964255831023, 0.243964255831023, 0.257218660568629, 
  0.3460998424214847, 0.4308694178133911, -0.2487342964204188, 0.0, 0.0, 0.0, 
  0.0, -1.441642604940847, -1.095069014660875, -0.09041940503114583, 
  -0.05933619782328824, -0.05797456492079052, -0.02878841883097917, 0.0, 
  0.1841713047736533, 0.2206788038701814, 0.2214570116455073, 
  0.2391065115405449, 0.2554281874318885, 0.2561541852488268, 
  0.2719372914105097, 0.2872373924566843, 0.302744537378861, 0.3177851714489935, 
  0.4465960637668545, 0.4470915015896375, 0.4689902235328193, 
  0.4694639713913073, 0.5935382086161832, 0.602001777711861, 0.6185108816904824, 
  0.7134282272223302, 0.7134282272223302, 0.7266826319599363, 0.815563813812792, 
  0.9003333892046983, 0.2207296749708884, -2.03518081355703, -1.688607223277058, 
  -0.6839576136473291, -0.6528744064394714, -0.6515127735369737, 
  -0.6223266274471624, -0.5935382086161831, -0.4093669038425297, 
  -0.3728594047460018, -0.3720811969706758, -0.3544316970756383, 
  -0.3381100211842947, -0.3373840233673563, -0.3216009172056735, 
  -0.3063008161594987, -0.2907936712373222, -0.2757530371671896, 
  -0.1469421448493285, -0.1464467070265456, -0.1245479850833638, 
  -0.1240742372248759, 0.0, 8.463569095678048e-03, 0.0249726730742992, 
  0.1198900186061471, 0.1198900186061471, 0.1331444233437532, 
  0.2220256051966089, 0.3067951805885152, -0.3728085336452946, 0.0, 0.0, 0.0, 
  0.0, -1.625813909714501, -1.279240319434528, -0.2745907098047992, 
  -0.2435075025969417, -0.242145869694444, -0.2129597236046326, 
  -0.1841713047736535, 0.0, 0.03650749909652789, 0.03728570687185385, 
  0.05493520676689147, 0.07125688265823502, 0.07198288047517344, 
  0.08776598663685624, 0.103066087683031, 0.1185732326052077, 
  0.1336138666753401, 0.2624247589932012, 0.2629201968159842, 
  0.2848189187591659, 0.2852926666176538, 0.4093669038425297, 
  0.4178304729382078, 0.434339576916829, 0.5292569224486768, 0.5292569224486768, 
  0.5425113271862829, 0.6313925090391387, 0.716162084431045, 
  0.03655837019723514, -2.043644382652708, -1.697070792372736, 
  -0.692421182743007, -0.6613379755351494, -0.6599763426326517, 
  -0.6307901965428402, -0.602001777711861, -0.4178304729382077, 
  -0.3813229738416797, -0.3805447660663539, -0.3628952661713162, 
  -0.3465735902799726, -0.3458475924630343, -0.3300644863013513, 
  -0.3147643852551766, -0.2992572403330002, -0.2842166062628677, 
  -0.1554057139450066, -0.1549102761222236, -0.1330115541790418, 
  -0.1325378063205538, -8.463569095677938e-03, 0.0, 0.01650910397862133, 
  0.1114264495104692, 0.1114264495104692, 0.1246808542480752, 
  0.2135620361009308, 0.2983316114928374, -0.3812721027409727, 0.0, 0.0, 0.0, 
  0.0, -1.662321408811029, -1.315747818531056, -0.3110982089013271, 
  -0.2800150016934696, -0.2786533687909719, -0.2494672227011605, 
  -0.2206788038701813, -0.03650749909652799, 0.0, 7.78207775326053e-04, 
  0.01842770767036363, 0.03474938356170718, 0.03547538137864548, 
  0.05125848754032829, 0.066558588586503, 0.08206573350867977, 
  0.09710636757881215, 0.2259172598966732, 0.2264126977194561, 
  0.248311419662638, 0.2487851675211259, 0.3728594047460017, 0.3813229738416798, 
  0.3978320778203009, 0.492749423352149, 0.492749423352149, 0.5060038280897549, 
  0.5948850099426106, 0.6796545853345171, 5.087110070711854e-05, 
  -2.06015348663133, -1.713579896351357, -0.7089302867216283, 
  -0.6778470795137708, -0.6764854466112729, -0.6472993005214615, 
  -0.6185108816904824, -0.4343395769168291, -0.397832077820301, 
  -0.3970538700449751, -0.3794043701499376, -0.363082694258594, 
  -0.3623566964416557, -0.3465735902799726, -0.331273489233798, 
  -0.3157663443116213, -0.3007257102414889, -0.1719148179236278, 
  -0.1714193801008449, -0.1495206581576631, -0.1490469102991751, 
  -0.02497267307429921, -0.01650910397862133, 0.0, 0.09491734553184791, 
  0.09491734553184791, 0.1081717502694538, 0.1970529321223097, 
  0.2818225075142161, -0.397781206719594, 0.0, 0.0, 0.0, 0.0, 
  -1.663099616586355, -1.316526026306382, -0.3118764166766532, 
  -0.2807932094687955, -0.2794315765662979, -0.2502454304764866, 
  -0.2214570116455074, -0.03728570687185388, -7.782077753259437e-04, 0.0, 
  0.01764949989503745, 0.03397117578638115, 0.03469717360331957, 
  0.05048027976500236, 0.06578038081117712, 0.08128752573335377, 
  0.09632815980348616, 0.2251390521213472, 0.2256344899441302, 
  0.247533211887312, 0.2480069597457998, 0.3720811969706758, 0.3805447660663538, 
  0.3970538700449751, 0.4919712155768231, 0.4919712155768231, 0.505225620314429, 
  0.5941068021672847, 0.6788763775591911, -7.273366746189308e-04, 
  -2.155070832163177, -1.808497241883205, -0.8038476322534762, 
  -0.7727644250456185, -0.7714027921431207, -0.7422166460533095, 
  -0.7134282272223302, -0.5292569224486771, -0.492749423352149, 
  -0.4919712155768231, -0.4743217156817855, -0.4580000397904418, 
  -0.4572740419735035, -0.4414909358118206, -0.4261908347656458, 
  -0.4106836898434693, -0.395643055773337, -0.2668321634554759, 
  -0.2663367256326928, -0.2444380036895109, -0.243964255831023, 
  -0.1198900186061472, -0.1114264495104692, -0.09491734553184789, 0.0, 0.0, 
  0.01325440473760599, 0.1021355865904617, 0.186905161982368, 
  -0.4926985522514418, 0.0, 0.0, 0.0, 0.0, -1.680749116481392, 
  -1.334175526201419, -0.3295259165716907, -0.2984427093638331, 
  -0.2970810764613353, -0.2678949303715241, -0.2391065115405449, 
  -0.05493520676689138, -0.01842770767036347, -0.01764949989503758, 0.0, 
  0.0163216758913436, 0.01704767370828198, 0.03283077986996483, 
  0.04813088091613942, 0.06363802583831603, 0.07867865990844863, 
  0.2074895522263096, 0.2079849900490927, 0.2298837119922744, 
  0.2303574598507623, 0.3544316970756383, 0.3628952661713162, 
  0.3794043701499375, 0.4743217156817854, 0.4743217156817854, 
  0.4875761204193914, 0.5764573022722471, 0.6612268776641534, 
  -0.0183768365696564, -2.155070832163177, -1.808497241883205, 
  -0.8038476322534762, -0.7727644250456185, -0.7714027921431207, 
  -0.7422166460533095, -0.7134282272223302, -0.5292569224486771, 
  -0.492749423352149, -0.4919712155768231, -0.4743217156817855, 
  -0.4580000397904418, -0.4572740419735035, -0.4414909358118206, 
  -0.4261908347656458, -0.4106836898434693, -0.395643055773337, 
  -0.2668321634554759, -0.2663367256326928, -0.2444380036895109, 
  -0.243964255831023, -0.1198900186061472, -0.1114264495104692, 
  -0.09491734553184789, 0.0, 0.0, 0.01325440473760599, 0.1021355865904617, 
  0.186905161982368, -0.4926985522514418, 0.0, 0.0, 0.0, 0.0, 
  -1.697070792372736, -1.350497202092763, -0.3458475924630343, 
  -0.3147643852551766, -0.313402752352679, -0.2842166062628677, 
  -0.2554281874318884, -0.07125688265823506, -0.03474938356170709, 
  -0.0339711757863812, -0.01632167589134356, 0.0, 7.259978169383085e-04, 
  0.01650910397862133, 0.03180920502479588, 0.04731634994697258, 
  0.06235698401710509, 0.191167876334966, 0.1916633141577491, 
  0.2135620361009308, 0.2140357839594189, 0.3381100211842946, 
  0.3465735902799727, 0.363082694258594, 0.4580000397904419, 0.4580000397904419, 
  0.4712544445280477, 0.5601356263809035, 0.64490520177281, 
  -0.03469851246100003, -2.168325236900784, -1.821751646620811, 
  -0.8171020369910821, -0.7860188297832245, -0.7846571968807268, 
  -0.7554710507909155, -0.7266826319599363, -0.5425113271862828, 
  -0.506003828089755, -0.5052256203144289, -0.4875761204193915, 
  -0.4712544445280479, -0.4705284467111094, -0.4547453405494264, 
  -0.4394452395032519, -0.4239380945810753, -0.4088974605109428, 
  -0.2800865681930818, -0.2795911303702986, -0.2576924084271169, 
  -0.257218660568629, -0.1331444233437531, -0.1246808542480752, 
  -0.1081717502694539, -0.01325440473760599, -0.01325440473760599, 0.0, 
  0.08888118185285578, 0.1736507572447622, -0.5059529569890479, 0.0, 0.0, 0.0, 
  0.0, -1.697796790189674, -1.351223199909702, -0.3465735902799726, 
  -0.3154903830721151, -0.3141287501696173, -0.284942604079806, 
  -0.2561541852488269, -0.07198288047517343, -0.03547538137864544, 
  -0.0346971736033195, -0.01704767370828196, -7.259978169384068e-04, 0.0, 
  0.015783106161683, 0.03108320720785747, 0.04659035213003412, 
  0.06163098620016673, 0.1904418785180277, 0.1909373163408107, 
  0.2128360382839925, 0.2133097861424804, 0.3373840233673563, 
  0.3458475924630343, 0.3623566964416555, 0.4572740419735035, 
  0.4572740419735035, 0.4705284467111094, 0.5594096285639653, 
  0.6441792039558715, -0.03542451027793839, -2.257206418753639, 
  -1.910632828473667, -0.905983218843938, -0.8749000116360802, 
  -0.8735383787335825, -0.8443522326437712, -0.8155638138127921, 
  -0.6313925090391388, -0.5948850099426106, -0.5941068021672846, 
  -0.5764573022722472, -0.5601356263809034, -0.5594096285639653, 
  -0.5436265224022823, -0.5283264213561076, -0.512819276433931, 
  -0.4977786423637986, -0.3689677500459376, -0.3684723122231546, 
  -0.3465735902799726, -0.3460998424214847, -0.2220256051966089, 
  -0.2135620361009309, -0.1970529321223096, -0.1021355865904617, 
  -0.1021355865904617, -0.08888118185285579, 0.0, 0.08476957539190631, 
  -0.5948341388419035, 0.0, 0.0, 0.0, 0.0, -1.713579896351357, 
  -1.367006306071384, -0.3623566964416557, -0.331273489233798, 
  -0.3299118563313003, -0.3007257102414889, -0.2719372914105098, 
  -0.08776598663685636, -0.0512584875403283, -0.05048027976500247, 
  -0.0328307798699649, -0.01650910397862133, -0.01578310616168297, 0.0, 
  0.01530010104617457, 0.03080724596835117, 0.04584788003848384, 
  0.1746587723563448, 0.1751542101791277, 0.1970529321223097, 
  0.1975266799807976, 0.3216009172056735, 0.3300644863013513, 
  0.3465735902799727, 0.4414909358118206, 0.4414909358118206, 
  0.4547453405494266, 0.5436265224022823, 0.6283960977941887, 
  -0.05120761643962126, -2.341975994145546, -1.995402403865573, 
  -0.9907527942358442, -0.9596695870279867, -0.9583079541254889, 
  -0.9291218080356776, -0.9003333892046984, -0.716162084431045, 
  -0.6796545853345169, -0.6788763775591911, -0.6612268776641536, 
  -0.64490520177281, -0.6441792039558715, -0.6283960977941887, 
  -0.613095996748014, -0.5975888518258374, -0.5825482177557049, 
  -0.4537373254378438, -0.4532418876150608, -0.4313431656718791, 
  -0.4308694178133911, -0.3067951805885152, -0.2983316114928373, 
  -0.281822507514216, -0.1869051619823681, -0.1869051619823681, 
  -0.1736507572447621, -0.08476957539190633, 0.0, -0.6796037142338098, 0.0, 0.0, 
  0.0, 0.0, -1.728879997397532, -1.382306407117559, -0.3776567974878302, 
  -0.3465735902799726, -0.3452119573774749, -0.3160258112876637, 
  -0.2872373924566844, -0.103066087683031, -0.06655858858650303, 
  -0.06578038081117704, -0.0481308809161395, -0.03180920502479596, 
  -0.03108320720785762, -0.01530010104617469, 0.0, 0.01550714492217675, 
  0.03054777899230918, 0.1593586713101701, 0.1598541091329531, 
  0.181752831076135, 0.1822265789346227, 0.3063008161594987, 0.3147643852551767, 
  0.331273489233798, 0.426190834765646, 0.426190834765646, 0.4394452395032518, 
  0.5283264213561075, 0.613095996748014, -0.06650771748579595, 
  -1.662372279911736, -1.315798689631763, -0.3111490800020342, 
  -0.2800658727941767, -0.2787042398916789, -0.2495180938018677, 
  -0.2207296749708884, -0.03655837019723507, -5.087110070708709e-05, 
  7.273366746189069e-04, 0.01837683656965642, 0.03469851246100007, 
  0.03542451027793831, 0.05120761643962125, 0.06650771748579586, 
  0.08201486240797258, 0.09705549647810505, 0.2258663887959661, 
  0.2263618266187491, 0.2482605485619309, 0.2487342964204188, 
  0.3728085336452946, 0.3812721027409728, 0.3977812067195939, 
  0.4926985522514419, 0.4926985522514419, 0.505952956989048, 0.5948341388419036, 
  0.6796037142338099, 0.0, 0.0, 0.0, 0.0, 0.0}; 

__device__ const double viscosity_factor_prefix[960] = {0.7071067811865475, 
  0.8164965809277261, 0.9680758473154983, 0.9699140894422974, 
  0.9699922639292418, 0.971622019642798, 0.9731464190357054, 0.9811888513529012, 
  0.9824788020819667, 0.9825053402396818, 0.9830968156469072, 
  0.9836264244359701, 0.9836496020649622, 0.9841456436842519, 
  0.9846124717471159, 0.9850719113086823, 0.9855047090477966, 
  0.9887414136306164, 0.9887523765479622, 0.9892266014584273, 
  0.9892366402378487, 0.991572146074944, 0.9917118511507302, 0.9919778119620978, 
  0.993351081633508, 0.993351081633508, 0.9935233347736726, 0.9945695409596425, 
  0.9954105807514206, 0.9824805380660118, 0.1721433401286832, 
  0.2399186047167572, 0.5594262123660976, 0.5713818844377662, 
  0.5719059005893237, 0.5831391202030293, 0.5942128291842127, 
  0.6640705375867318, 0.6775389299575841, 0.6778241078903778, 
  0.6842688588135148, 0.6901879923821975, 0.6904503346529252, 
  0.6961330679471983, 0.7016031990973591, 0.7071067811865475, 
  0.7124042040882749, 0.7559323444988001, 0.7560928216566766, 0.763128719376609, 
  0.7632796803223634, 0.8008948570018367, 0.8033158590005929, 
  0.8079832383229113, 0.8333825770601405, 0.8333825770601405, 0.836732594676151, 
  0.8579449079413927, 0.876165402858484, 0.6775575744738503, 0.0, 0.0, 0.0, 0.0, 
  0.5773502691896258, 0.7071067811865475, 0.9390260827927792, 
  0.9423898864639306, 0.9425333143890049, 0.9455304890716288, 
  0.9483461395154609, 0.9634008457828757, 0.9658474431744803, 
  0.9658978713457121, 0.9670227915024118, 0.9680316606213769, 
  0.9680758473154983, 0.9690222218899796, 0.9699140894422974, 
  0.9707930073454198, 0.971622019642798, 0.9778547280897629, 0.9778759379539206, 
  0.9787940632701722, 0.9788135125650554, 0.9833538485334853, 
  0.9836264244359701, 0.9841456436842519, 0.9868330480801305, 
  0.9868330480801305, 0.9871709027483913, 0.9892266014584273, 
  0.9908837753057731, 0.9658507417986416, 0.1696480723280338, 
  0.2365388994335815, 0.5536482892977428, 0.5655948487899036, 
  0.5661186320030672, 0.5773502691896258, 0.5884288866823369, 
  0.6584738481000175, 0.672011053395733, 0.6722978079439913, 0.6787795253596322, 
  0.6847348805565449, 0.6849988788408234, 0.6907185452427825, 
  0.6962261556132335, 0.7017693709455775, 0.7071067811865475, 
  0.7510336771306878, 0.751195861570777, 0.7583083679057505, 0.7584610102935874, 
  0.7965456302852552, 0.7990003558022288, 0.8037339722286053, 
  0.8295224029153299, 0.8295224029153299, 0.8329274054011169, 
  0.8545081577418637, 0.8730736108758221, 0.6720298008362261, 0.0, 0.0, 0.0, 
  0.0, 0.2506574432255698, 0.3438459187410087, 0.7071067811865475, 
  0.7180087745162979, 0.7184822406842919, 0.7285441208237253, 
  0.7383000051379629, 0.7962070417039337, 0.8066708898588171, 
  0.8068900730770983, 0.8118173216724673, 0.8162989176295664, 
  0.8164965809277261, 0.8207582425214556, 0.8248244667332583, 
  0.8288801559439831, 0.8327506059785745, 0.8633439248643011, 
  0.8634528083374381, 0.8681990757275172, 0.8683003218550683, 
  0.8927727137098141, 0.8942972545509392, 0.8972194841334854, 
  0.9127382748000721, 0.9127382748000721, 0.9147375258144468, 
  0.9271458181639928, 0.9374655018854918, 0.8066852227333896, 
  0.1496342773956902, 0.2092848077441266, 0.5046159603103175, 
  0.5163478664078446, 0.5168635619782184, 0.5279490535667124, 
  0.5389355470614888, 0.6096875881905095, 0.6236382614682711, 
  0.6239348093432265, 0.6306495289699677, 0.6368388066661637, 
  0.6371136188392371, 0.6430769195741511, 0.6488361681111461, 
  0.6546497464603095, 0.6602638986159685, 0.7071067811865475, 
  0.7072819232039818, 0.7149791664698106, 0.7151447134209092, 
  0.7569324965326423, 0.7596599957278316, 0.7649316873386622, 
  0.7939378765229638, 0.7939378765229638, 0.7978048632052999, 
  0.8225230951698341, 0.8440871521167191, 0.6236576478512198, 0.0, 0.0, 0.0, 
  0.0, 0.2434474462821885, 0.3345165196077766, 0.6960340506883298, 
  0.7071067811865475, 0.7075880270542277, 0.7178224991180043, 
  0.7277591150584508, 0.7870215957491786, 0.7977841076744662, 
  0.7980097289466876, 0.8030836919542321, 0.8077020519103046, 
  0.8079058204185576, 0.8123006214075538, 0.8164965809277261, 
  0.8206843133241595, 0.8246832525414386, 0.8563789353178104, 
  0.8564920218216583, 0.8614234613548143, 0.8615286993819776, 
  0.8870179868272744, 0.8886093464112432, 0.891660806854676, 0.9078915246105729, 
  0.9078915246105729, 0.9099856585455582, 0.9229992292972317, 
  0.9338440581183054, 0.7977988613181562, 0.1495618195622024, 
  0.2091856829965662, 0.5044296261860434, 0.5161602624726624, 
  0.5166759070369086, 0.5277604016264412, 0.5387460972410903, 
  0.6094978027755634, 0.6234494473040505, 0.6237460197122588, 0.630461338652143, 
  0.6366512436048324, 0.636926085305184, 0.64289006210065, 0.6486500280900068, 
  0.6544643955474164, 0.6600793721659071, 0.7069315957777504, 
  0.7071067811865475, 0.7148059953842244, 0.7149715861035167, 
  0.7567723175258367, 0.7595007961590622, 0.7647744285081944, 
  0.7937924387932112, 0.7937924387932112, 0.7976611499199272, 
  0.8223912504024188, 0.8439668807769256, 0.6234688352858434, 0.0, 0.0, 0.0, 
  0.0, 0.2431357808250859, 0.3341121836552468, 0.6955453039315838, 
  0.7066252075672828, 0.7071067811865475, 0.7173485420944357, 
  0.7272928228428442, 0.7866134966445973, 0.7973889531484409, 
  0.7976148538422746, 0.8026951886966347, 0.8073194954177303, 
  0.8075235295471489, 0.8119241262794462, 0.8161257391261402, 
  0.8203192310747778, 0.8243237801367711, 0.8560677883784604, 
  0.8561810597575654, 0.861120648669827, 0.8612260624725449, 0.8867602479240054, 
  0.8883545657425779, 0.8914117502446957, 0.9076740629511328, 
  0.9076740629511328, 0.9097724153382329, 0.9228129367233473, 
  0.9336812025659105, 0.7974037250536872, 0.1463923869844662, 
  0.2048467273525904, 0.4962160466025711, 0.5078874090066529, 
  0.5084006573898743, 0.5194379735373668, 0.5303852027662534, 
  0.6010993230346416, 0.6150891331328014, 0.6153866882421827, 
  0.6221261920271492, 0.6283416946731358, 0.6286177470230505, 
  0.6346095566933405, 0.6403992580177285, 0.6462465146231868, 
  0.6518960186748475, 0.6991457584181819, 0.6993228074092593, 
  0.7071067811865475, 0.7072742565027537, 0.7496358955113952, 
  0.7524070205547019, 0.7577652287536132, 0.7873002049300376, 
  0.7873002049300376, 0.7912445578998659, 0.8164965809277261, 
  0.8385830908303361, 0.6151085851374556, 0.0, 0.0, 0.0, 0.0, 
  0.2365388994335815, 0.3255335531645952, 0.6849988788408234, 
  0.6962261556132335, 0.6967144818036923, 0.7071067811865475, 
  0.7172100349425605, 0.7777524351054738, 0.7888021863940915, 
  0.7890340160044326, 0.7942496393960862, 0.7990003558022288, 
  0.7992100394194569, 0.8037339722286053, 0.8080560102661852, 
  0.8123723078052557, 0.8164965809277261, 0.8492760427787966, 
  0.8493932884565886, 0.8545081577418637, 0.8546173541554862, 
  0.8811202766432499, 0.8827785926698482, 0.8859596678205917, 
  0.9029071212710276, 0.9029071212710276, 0.9050971131795992, 
  0.9187239566209273, 0.9301032715906857, 0.7888173457727758, 
  0.1463245352322465, 0.2047537731521891, 0.4960388604397693, 
  0.5077088734119169, 0.5082220669333795, 0.5192582960110279, 
  0.5302046246517115, 0.6009174429444923, 0.6149079758295807, 
  0.6152055500008348, 0.6219455271521722, 0.6281615375346074, 0.628437614030125, 
  0.6344299814434835, 0.6402202832139392, 0.6460682081692233, 
  0.6517184176194737, 0.6989764222533731, 0.6991535103713786, 
  0.7069392661951075, 0.7071067811865475, 0.7494803032791987, 
  0.7522523366135777, 0.7576123477227482, 0.7871583839105838, 
  0.7871583839105838, 0.791104360160902, 0.8163676125517652, 0.8384651566239493, 
  0.6149274290756328, 0.0, 0.0, 0.0, 0.0, 0.2301869829464367, 
  0.3172374499741829, 0.6744724623090879, 0.6858328298130242, 
  0.6863272906138056, 0.6968570626589725, 0.7071067811865475, 
  0.7688032478102023, 0.7801169616843492, 0.7803545121900962, 
  0.7857008447863071, 0.7905739733009424, 0.7907891339056414, 
  0.7954327647479643, 0.7998719059670416, 0.8043078475514793, 
  0.8085489752128718, 0.8423470045732541, 0.8424681849823727, 
  0.8477567674083175, 0.8478697164057328, 0.8753386636426602, 
  0.8770611312561573, 0.8803665053035069, 0.8980039211317182, 
  0.8980039211317182, 0.9002865161377931, 0.9145075472102803, 
  0.9264070823423055, 0.7801324949225127, 0.1295556989419211, 
  0.1817008766472619, 0.4505073602675259, 0.4617348709431521, 
  0.4622296644545398, 0.4728922267156894, 0.4835103141943113, 
  0.5532020457842204, 0.5672344008551246, 0.5675338000488647, 
  0.5743257239226671, 0.580607846525601, 0.5808872686658104, 0.5869609181358555, 
  0.5928456452404612, 0.5988050000025114, 0.6045784141643379, 
  0.6534930724138255, 0.6536785597115559, 0.6618504545294417, 
  0.6620266422105084, 0.7071067811865475, 0.7100927288087108, 
  0.7158796976784185, 0.7481038979875578, 0.7481038979875578, 
  0.7524503946274755, 0.7805279806531389, 0.8054560052104229, 
  0.5672539722043541, 0.0, 0.0, 0.0, 0.0, 0.1930503508952376, 
  0.2680649368060655, 0.6050242530188936, 0.6169254475416105, 
  0.6174457116998708, 0.6285707197185578, 0.6394853916677729, 
  0.7071067811865475, 0.7198928005974746, 0.7201626337087944, 
  0.7262506491670556, 0.7318252946572212, 0.7320719945281474, 
  0.7374080718525245, 0.7425303656419568, 0.7476699279155669, 
  0.7526036083944555, 0.7926418136878975, 0.7927877574810048, 
  0.7991743263189174, 0.7993110951094403, 0.8330471154383486, 0.835194932242619, 
  0.8393275779326226, 0.8616301043446239, 0.8616301043446239, 
  0.8645480303321482, 0.8828958945168079, 0.8984782634602946, 0.719910443030877, 
  0.1284819220248193, 0.1802194694013624, 0.4474733740711871, 
  0.4586648334792883, 0.459158105149322, 0.4697892679956007, 0.4803787797557983, 
  0.5499540209474307, 0.563978792324439, 0.5642780907910415, 0.5710684240751878, 
  0.5773502691896258, 0.5776297058469191, 0.5837042403799687, 
  0.5895908711470045, 0.5955532139768365, 0.6013305508852113, 
  0.6503204524623155, 0.6505063724774344, 0.658698470789174, 0.65887511871326, 
  0.7041081710170666, 0.7071067811865475, 0.7129192115124937, 
  0.7453078480727765, 0.7453078480727765, 0.749679524438323, 0.7779374748238393, 
  0.8030520118454051, 0.5639983570106363, 0.0, 0.0, 0.0, 0.0, 0.186374363740252, 
  0.2591113978838421, 0.5910009098591849, 0.6029432125350246, 
  0.6034657052367048, 0.6146471432780769, 0.6256336996137434, 0.694085265401827, 
  0.7071067811865475, 0.7073818656207655, 0.713591487497392, 0.7192827689648849, 
  0.7195347479143021, 0.7249874626267021, 0.7302261555763849, 
  0.7354869124545533, 0.7405411157484487, 0.7817130668172513, 
  0.7818636624477916, 0.788457581802559, 0.7885988722165204, 0.8235563942357124, 
  0.8257892720351042, 0.8300880910106908, 0.8533451494485161, 
  0.8533451494485161, 0.85639527493489, 0.8756140302351951, 0.8919906932856912, 
  0.7071247666079385, 0.1264121061247254, 0.1773622057184381, 
  0.4415848698622297, 0.4527041037137483, 0.4531943198294617, 0.463762295788723, 
  0.474294018874042, 0.5436259899248357, 0.557632281312898, 0.5579313033035891, 
  0.5647167054745827, 0.5709962958817534, 0.5712756841780432, 
  0.5773502691896258, 0.5832389737156648, 0.5892054706036101, 
  0.5949888250090313, 0.6441114140466905, 0.6442981247062299, 
  0.6525272853237511, 0.6527047805693058, 0.6982236450105769, 
  0.7012461749317455, 0.7071067811865475, 0.739808530184733, 0.739808530184733, 
  0.7442283941135424, 0.7728329124419338, 0.7983079018932795, 
  0.5576518277744518, 0.0, 0.0, 0.0, 0.0, 0.1862344125034554, 
  0.2589233518434015, 0.5907016251625139, 0.6026445656491346, 
  0.6031670953642669, 0.6143495109365001, 0.6253373771849537, 
  0.6938052904162757, 0.7068315896950879, 0.7071067811865475, 
  0.7133188864345454, 0.7190125568358325, 0.71926464406382, 0.7247197542809828, 
  0.7299608435468957, 0.7352241010485261, 0.7402807963426474, 
  0.7814763935589044, 0.7816270868471196, 0.7882253636710244, 
  0.7883667492025335, 0.8233500991692995, 0.8255847844123686, 
  0.8298871373831255, 0.853164567984347, 0.853164567984347, 0.8562175240383979, 
  0.8754549768867886, 0.8918487645236579, 0.7068495821084, 0.1151244049606323, 
  0.1617421874987436, 0.4085447854458406, 0.4192051759464445, 0.419675821850369, 
  0.4298357015861594, 0.4399874516756801, 0.5075367605278188, 
  0.5213463876471091, 0.5216418502536799, 0.5283537836569659, 
  0.5345779701811978, 0.5348551775140238, 0.540888383261636, 0.546748101749516, 
  0.5526965535016468, 0.5584734398891116, 0.6079988883396146, 
  0.6081887569782313, 0.6165698559912905, 0.6167509048548513, 
  0.6635816135305601, 0.6667204898614765, 0.6728174631100958, 
  0.7071067811865475, 0.7071067811865475, 0.7117772223868714, 
  0.7422202886471023, 0.7696618511911792, 0.5213657006137662, 0.0, 0.0, 0.0, 
  0.0, 0.1830864578960195, 0.2546898520060881, 0.5839114969175909, 
  0.5958662464992963, 0.5963894986024435, 0.6075915653785749, 0.618606646021592, 
  0.6874299924970035, 0.7005620521918522, 0.700839615215764, 0.7071067811865475, 
  0.712853500621518, 0.7131079940714454, 0.7186163751581033, 0.7239108194214406, 
  0.7292298189583651, 0.7343421245935389, 0.7760677622540173, 
  0.7762206519186073, 0.7829169823128111, 0.7830605093193033, 
  0.8186268764465924, 0.8209024637703809, 0.8252848251106604, 
  0.8490243101910381, 0.8490243101910381, 0.8521415707855909, 
  0.8718043809450704, 0.8885885762186616, 0.7005801994846593, 
  0.1151244049606323, 0.1617421874987436, 0.4085447854458406, 
  0.4192051759464445, 0.419675821850369, 0.4298357015861594, 0.4399874516756801, 
  0.5075367605278188, 0.5213463876471091, 0.5216418502536799, 
  0.5283537836569659, 0.5345779701811978, 0.5348551775140238, 0.540888383261636, 
  0.546748101749516, 0.5526965535016468, 0.5584734398891116, 0.6079988883396146, 
  0.6081887569782313, 0.6165698559912905, 0.6167509048548513, 
  0.6635816135305601, 0.6667204898614765, 0.6728174631100958, 
  0.7071067811865475, 0.7071067811865475, 0.7117772223868714, 
  0.7422202886471023, 0.7696618511911792, 0.5213657006137662, 0.0, 0.0, 0.0, 
  0.0, 0.1802194694013624, 0.2508280367794221, 0.5776297058469191, 
  0.5895908711470045, 0.590114592531367, 0.6013305508852113, 0.6123665509636861, 
  0.6814922876305141, 0.6947174233241945, 0.694997081369698, 0.7013129733946517, 
  0.7071067811865475, 0.7073634135610164, 0.7129192115124937, 
  0.7182612619757396, 0.7236301093593548, 0.7287922497867374, 
  0.7709969742638532, 0.7711518618381339, 0.7779374748238393, 
  0.7780829536509317, 0.8141833506974361, 0.8164965809277261, 
  0.8209526357161643, 0.8451191595254188, 0.8451191595254188, 
  0.8482960347806956, 0.868354206291716, 0.8855027364619978, 0.6947357074285243, 
  0.1136282678746834, 0.1596671812456343, 0.4040485847851274, 
  0.4146397246301983, 0.4151073985002407, 0.4252049102655752, 
  0.4352978162826863, 0.5025501997301394, 0.5163207656769135, 
  0.5166154774390286, 0.5233113254450602, 0.5295222727849593, 0.529798928351109, 
  0.5358209317990553, 0.5416712579277553, 0.5476116918095486, 
  0.5533822705253246, 0.6029157488787076, 0.6031058695688671, 
  0.6114998361355838, 0.61168120073647, 0.6586489228906067, 0.6618010355370638, 
  0.6679252184153387, 0.7024052859220453, 0.7024052859220453, 
  0.7071067811865475, 0.7377831216950063, 0.7654822340333597, 
  0.5163400294548546, 0.0, 0.0, 0.0, 0.0, 0.1800929214529031, 
  0.2506574432255698, 0.5773502691896258, 0.5893116198869808, 
  0.5898353577293538, 0.6010518387719567, 0.6120886747006234, 
  0.6812272710539267, 0.6944564396302347, 0.694736188635475, 0.7010541981839915, 
  0.7068500556379029, 0.7071067811865475, 0.7126646461465801, 
  0.7180087745162979, 0.7233798002278359, 0.7285441208237253, 
  0.7707698986659839, 0.7709248743281107, 0.7777144258194417, 0.777859990790196, 
  0.8139840177190056, 0.8162989176295664, 0.8207582425214556, 
  0.8449437490664348, 0.8449437490664348, 0.8481232784908196, 
  0.8681990757275172, 0.8853638817345015, 0.6944747296742978, 
  0.1040741475839515, 0.1463923869844662, 0.3747007230591108, 
  0.3848017966651355, 0.3852483404455255, 0.3949003564581685, 
  0.4045688397484871, 0.4695687803137741, 0.4830114595486103, 
  0.4832996828512844, 0.4898541837781755, 0.4959445255424078, 
  0.4962160466025711, 0.5021313581248521, 0.5078874090066529, 
  0.5137417006020002, 0.5194379735373668, 0.5687317099584266, 
  0.5689223420305677, 0.5773502691896258, 0.5775326148162813, 
  0.6251208454511281, 0.6283416946731358, 0.6346095566933405, 
  0.6701559841713063, 0.6701559841713063, 0.675037825119431, 0.7071067811865475, 
  0.7363990457986389, 0.4830302985252535, 0.0, 0.0, 0.0, 0.0, 
  0.1773622057184381, 0.246973548145155, 0.5712756841780432, 0.5832389737156648, 
  0.5837629768710566, 0.5949888250090313, 0.606041844071356, 0.6754475076323416, 
  0.6887620627140379, 0.6890437415396152, 0.6954067193769616, 
  0.7012461749317455, 0.7015048838980167, 0.7071067811865475, 0.71249523060695, 
  0.717912774444376, 0.7231237039799582, 0.7658015901726901, 0.7659584636598922, 
  0.7728329124419338, 0.7729803352256907, 0.8096152670133596, 
  0.8119663538364404, 0.8164965809277261, 0.8410943804666712, 
  0.8410943804666712, 0.8443316463605945, 0.8647913616518677, 
  0.8823114007467934, 0.6887804787718768, 0.09569626809922814, 
  0.1347195005772294, 0.3480781992233687, 0.3576804091883355, 0.358105308498876, 
  0.3672981134940705, 0.3765234624641826, 0.4390180065662151, 
  0.4520537612847743, 0.4523337055953546, 0.4587050710573101, 
  0.4646341611615674, 0.4648986953305155, 0.4706661153219247, 
  0.4762862698015209, 0.4820105671391762, 0.487588422742228, 0.5362060048446742, 
  0.5363952872198511, 0.5447737142827658, 0.5449552102031654, 
  0.5926555691718987, 0.5959089412578464, 0.6022495278327332, 
  0.6384517482323681, 0.6384517482323681, 0.6434570299400704, 
  0.6765474450080009, 0.7071067811865475, 0.4520720585482646, 0.0, 0.0, 0.0, 
  0.0, 0.1747520542941766, 0.2434474462821885, 0.565388891894947, 
  0.5773502691896258, 0.5778743617221752, 0.5891056647772915, 
  0.6001707540730823, 0.6698124036621164, 0.6832055047437288, 0.683488966178902, 
  0.6898935610111014, 0.6957734972999603, 0.6960340506883298, 0.701676952993576, 
  0.7071067811865475, 0.7125678571310604, 0.7178224991180043, 
  0.7609281352078161, 0.761086815717388, 0.7680421800463454, 0.7681913752193938, 
  0.8053161124176151, 0.8077020519103046, 0.8123006214075538, 
  0.8372971475129369, 0.8372971475129369, 0.8405904165138709, 
  0.8614234613548143, 0.8792902758466925, 0.6832240371937915, 
  0.1863652122085029, 0.2590991018259489, 0.5909813460876593, 
  0.6029236907598284, 0.6034461858944041, 0.614627688123463, 0.6256143303713364, 
  0.6940669665205846, 0.7070887953076815, 0.707363886746546, 0.7135736711020348, 
  0.7192651088602782, 0.7195170948933813, 0.7249699663177671, 
  0.7302088160249892, 0.7354697364767042, 0.7405241027731794, 
  0.7816976002756334, 0.7818482022920522, 0.788442406577803, 0.7885837032112905, 
  0.8235429138899696, 0.8257759098504285, 0.8300749598559236, 
  0.8533333500007583, 0.8533333500007583, 0.8563836605065277, 
  0.8756036379016505, 0.8919814201427821, 0.7071067811865475, 0.0, 0.0, 0.0, 
  0.0}; 

__global__ void
__launch_bounds__(480,3)
gpu_viscosity(const double *temperature_array, const double *mass_frac_array, 
  const double *avmolwt_array, const int slice_stride/*NX*NY in number of 
  doubles*/, const int row_stride/*NX in number of doubles*/, const int 
  total_steps/*NZ in number of doubles*/, const int spec_stride/*NX*NY*NZ in 
  number of doubles*/, double *viscosity) 
{
  const int tid = threadIdx.x & 0x1f;
  const int wid = threadIdx.x >> 5;
  {
    const int offset = (blockIdx.x*32 + tid);
    temperature_array += offset;
    mass_frac_array += offset;
    avmolwt_array += offset;
    viscosity += offset;
  }
  volatile __shared__ double spec_visc[30][32];
  volatile __shared__ double mole_frac[30][32];
  double mass_ratios[2];
  double factor_prefix[2];
  {
    const int offset = wid*64+tid;
    asm volatile("ld.global.nc.cg.f64 %0, [%1];" : "=d"(mass_ratios[0]) : 
      "l"(viscosity_mass_ratios+offset+0) : "memory"); 
    asm volatile("ld.global.nc.cg.f64 %0, [%1];" : "=d"(factor_prefix[0]) : 
      "l"(viscosity_factor_prefix+offset+0) : "memory"); 
    asm volatile("ld.global.nc.cg.f64 %0, [%1];" : "=d"(mass_ratios[1]) : 
      "l"(viscosity_mass_ratios+offset+32) : "memory"); 
    asm volatile("ld.global.nc.cg.f64 %0, [%1];" : "=d"(factor_prefix[1]) : 
      "l"(viscosity_factor_prefix+offset+32) : "memory"); 
  }
  double mole_frac_temp[2];
  double temperature;
  double avmolwt;
#ifdef DYNAMIC
  for (int step = 0; step < total_steps; step++)
#else
  #pragma unroll 1
  for (int step = 0; step < TOTAL_STEPS; step++)
#endif
  {
    asm volatile("ld.global.nc.cg.f64 %0, [%1];" : "=d"(temperature) : 
      "l"(temperature_array+0) : "memory"); 
    asm volatile("ld.global.nc.cg.f64 %0, [%1];" : "=d"(avmolwt) : 
      "l"(avmolwt_array+0) : "memory"); 
    asm volatile("ld.global.nc.cg.f64 %0, [%1];" : "=d"(mole_frac_temp[0]) : 
      "l"(mass_frac_array+(wid+0)*spec_stride) : "memory"); 
    asm volatile("ld.global.nc.cg.f64 %0, [%1];" : "=d"(mole_frac_temp[1]) : 
      "l"(mass_frac_array+(wid+15)*spec_stride) : "memory"); 
    temperature *= 120.0;
    double logt = log(temperature);
    {
      const int neta_index = (wid+0+step*64)%64;
      double val = viscosity_neta[neta_index][0];
      val = __fma_rn(val,logt,viscosity_neta[neta_index][1]);
      val = __fma_rn(val,logt,viscosity_neta[neta_index][2]);
      val = __fma_rn(val,logt,viscosity_neta[neta_index][3]);
      spec_visc[wid+0][tid] = val;
    }
    {
      const int neta_index = (wid+15+step*64)%64;
      double val = viscosity_neta[neta_index][0];
      val = __fma_rn(val,logt,viscosity_neta[neta_index][1]);
      val = __fma_rn(val,logt,viscosity_neta[neta_index][2]);
      val = __fma_rn(val,logt,viscosity_neta[neta_index][3]);
      spec_visc[wid+15][tid] = val;
    }
    {
      mole_frac_temp[0] *= recip_molecular_masses[wid+0] * 1e3 * avmolwt;
      mole_frac[wid+0][tid] = mole_frac_temp[0];
    }
    {
      mole_frac_temp[1] *= recip_molecular_masses[wid+15] * 1e3 * avmolwt;
      mole_frac[wid+15][tid] = mole_frac_temp[1];
    }
    asm volatile("bar.sync 0;" : : : "memory");
    double result = 0.0;
    {
      double spec_sum = 0.0;
      const int point = wid + 0;
      double local_visc = spec_visc[point][tid];
      {
        double visc_0 = spec_visc[0][tid];
        double mole_0 = mole_frac[0][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[0]), 0, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[0]), 0, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_0); 
        lo_part = __shfl(__double2loint(factor_prefix[0]), 0, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[0]), 0, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_0,spec_sum);
      }
      {
        double visc_1 = spec_visc[1][tid];
        double mole_1 = mole_frac[1][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[0]), 1, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[0]), 1, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_1); 
        lo_part = __shfl(__double2loint(factor_prefix[0]), 1, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[0]), 1, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_1,spec_sum);
      }
      {
        double visc_2 = spec_visc[2][tid];
        double mole_2 = mole_frac[2][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[0]), 2, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[0]), 2, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_2); 
        lo_part = __shfl(__double2loint(factor_prefix[0]), 2, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[0]), 2, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_2,spec_sum);
      }
      {
        double visc_3 = spec_visc[3][tid];
        double mole_3 = mole_frac[3][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[0]), 3, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[0]), 3, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_3); 
        lo_part = __shfl(__double2loint(factor_prefix[0]), 3, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[0]), 3, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_3,spec_sum);
      }
      {
        double visc_4 = spec_visc[4][tid];
        double mole_4 = mole_frac[4][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[0]), 4, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[0]), 4, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_4); 
        lo_part = __shfl(__double2loint(factor_prefix[0]), 4, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[0]), 4, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_4,spec_sum);
      }
      {
        double visc_5 = spec_visc[5][tid];
        double mole_5 = mole_frac[5][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[0]), 5, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[0]), 5, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_5); 
        lo_part = __shfl(__double2loint(factor_prefix[0]), 5, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[0]), 5, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_5,spec_sum);
      }
      {
        double visc_6 = spec_visc[6][tid];
        double mole_6 = mole_frac[6][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[0]), 6, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[0]), 6, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_6); 
        lo_part = __shfl(__double2loint(factor_prefix[0]), 6, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[0]), 6, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_6,spec_sum);
      }
      {
        double visc_7 = spec_visc[7][tid];
        double mole_7 = mole_frac[7][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[0]), 7, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[0]), 7, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_7); 
        lo_part = __shfl(__double2loint(factor_prefix[0]), 7, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[0]), 7, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_7,spec_sum);
      }
      {
        double visc_8 = spec_visc[8][tid];
        double mole_8 = mole_frac[8][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[0]), 8, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[0]), 8, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_8); 
        lo_part = __shfl(__double2loint(factor_prefix[0]), 8, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[0]), 8, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_8,spec_sum);
      }
      {
        double visc_9 = spec_visc[9][tid];
        double mole_9 = mole_frac[9][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[0]), 9, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[0]), 9, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_9); 
        lo_part = __shfl(__double2loint(factor_prefix[0]), 9, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[0]), 9, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_9,spec_sum);
      }
      {
        double visc_10 = spec_visc[10][tid];
        double mole_10 = mole_frac[10][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[0]), 10, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[0]), 10, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_10); 
        lo_part = __shfl(__double2loint(factor_prefix[0]), 10, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[0]), 10, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_10,spec_sum);
      }
      {
        double visc_11 = spec_visc[11][tid];
        double mole_11 = mole_frac[11][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[0]), 11, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[0]), 11, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_11); 
        lo_part = __shfl(__double2loint(factor_prefix[0]), 11, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[0]), 11, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_11,spec_sum);
      }
      {
        double visc_12 = spec_visc[12][tid];
        double mole_12 = mole_frac[12][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[0]), 12, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[0]), 12, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_12); 
        lo_part = __shfl(__double2loint(factor_prefix[0]), 12, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[0]), 12, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_12,spec_sum);
      }
      {
        double visc_13 = spec_visc[13][tid];
        double mole_13 = mole_frac[13][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[0]), 13, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[0]), 13, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_13); 
        lo_part = __shfl(__double2loint(factor_prefix[0]), 13, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[0]), 13, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_13,spec_sum);
      }
      {
        double visc_14 = spec_visc[14][tid];
        double mole_14 = mole_frac[14][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[0]), 14, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[0]), 14, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_14); 
        lo_part = __shfl(__double2loint(factor_prefix[0]), 14, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[0]), 14, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_14,spec_sum);
      }
      {
        double visc_15 = spec_visc[15][tid];
        double mole_15 = mole_frac[15][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[0]), 15, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[0]), 15, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_15); 
        lo_part = __shfl(__double2loint(factor_prefix[0]), 15, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[0]), 15, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_15,spec_sum);
      }
      {
        double visc_16 = spec_visc[16][tid];
        double mole_16 = mole_frac[16][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[0]), 16, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[0]), 16, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_16); 
        lo_part = __shfl(__double2loint(factor_prefix[0]), 16, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[0]), 16, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_16,spec_sum);
      }
      {
        double visc_17 = spec_visc[17][tid];
        double mole_17 = mole_frac[17][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[0]), 17, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[0]), 17, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_17); 
        lo_part = __shfl(__double2loint(factor_prefix[0]), 17, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[0]), 17, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_17,spec_sum);
      }
      {
        double visc_18 = spec_visc[18][tid];
        double mole_18 = mole_frac[18][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[0]), 18, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[0]), 18, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_18); 
        lo_part = __shfl(__double2loint(factor_prefix[0]), 18, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[0]), 18, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_18,spec_sum);
      }
      {
        double visc_19 = spec_visc[19][tid];
        double mole_19 = mole_frac[19][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[0]), 19, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[0]), 19, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_19); 
        lo_part = __shfl(__double2loint(factor_prefix[0]), 19, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[0]), 19, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_19,spec_sum);
      }
      {
        double visc_20 = spec_visc[20][tid];
        double mole_20 = mole_frac[20][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[0]), 20, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[0]), 20, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_20); 
        lo_part = __shfl(__double2loint(factor_prefix[0]), 20, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[0]), 20, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_20,spec_sum);
      }
      {
        double visc_21 = spec_visc[21][tid];
        double mole_21 = mole_frac[21][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[0]), 21, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[0]), 21, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_21); 
        lo_part = __shfl(__double2loint(factor_prefix[0]), 21, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[0]), 21, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_21,spec_sum);
      }
      {
        double visc_22 = spec_visc[22][tid];
        double mole_22 = mole_frac[22][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[0]), 22, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[0]), 22, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_22); 
        lo_part = __shfl(__double2loint(factor_prefix[0]), 22, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[0]), 22, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_22,spec_sum);
      }
      {
        double visc_23 = spec_visc[23][tid];
        double mole_23 = mole_frac[23][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[0]), 23, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[0]), 23, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_23); 
        lo_part = __shfl(__double2loint(factor_prefix[0]), 23, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[0]), 23, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_23,spec_sum);
      }
      {
        double visc_24 = spec_visc[24][tid];
        double mole_24 = mole_frac[24][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[0]), 24, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[0]), 24, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_24); 
        lo_part = __shfl(__double2loint(factor_prefix[0]), 24, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[0]), 24, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_24,spec_sum);
      }
      {
        double visc_25 = spec_visc[25][tid];
        double mole_25 = mole_frac[25][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[0]), 25, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[0]), 25, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_25); 
        lo_part = __shfl(__double2loint(factor_prefix[0]), 25, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[0]), 25, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_25,spec_sum);
      }
      {
        double visc_26 = spec_visc[26][tid];
        double mole_26 = mole_frac[26][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[0]), 26, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[0]), 26, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_26); 
        lo_part = __shfl(__double2loint(factor_prefix[0]), 26, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[0]), 26, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_26,spec_sum);
      }
      {
        double visc_27 = spec_visc[27][tid];
        double mole_27 = mole_frac[27][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[0]), 27, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[0]), 27, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_27); 
        lo_part = __shfl(__double2loint(factor_prefix[0]), 27, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[0]), 27, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_27,spec_sum);
      }
      {
        double visc_28 = spec_visc[28][tid];
        double mole_28 = mole_frac[28][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[0]), 28, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[0]), 28, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_28); 
        lo_part = __shfl(__double2loint(factor_prefix[0]), 28, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[0]), 28, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_28,spec_sum);
      }
      {
        double visc_29 = spec_visc[29][tid];
        double mole_29 = mole_frac[29][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[0]), 29, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[0]), 29, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_29); 
        lo_part = __shfl(__double2loint(factor_prefix[0]), 29, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[0]), 29, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_29,spec_sum);
      }
      double local_mole = mole_frac[wid+0][tid];
      local_visc = exp(local_visc);
      double ratio = local_visc/spec_sum;
      result = __fma_rn(local_mole,ratio,result);
    }
    {
      double spec_sum = 0.0;
      const int point = wid + 15;
      double local_visc = spec_visc[point][tid];
      {
        double visc_0 = spec_visc[0][tid];
        double mole_0 = mole_frac[0][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[0]), 30, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[0]), 30, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_0); 
        lo_part = __shfl(__double2loint(factor_prefix[0]), 30, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[0]), 30, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_0,spec_sum);
      }
      {
        double visc_1 = spec_visc[1][tid];
        double mole_1 = mole_frac[1][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[0]), 31, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[0]), 31, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_1); 
        lo_part = __shfl(__double2loint(factor_prefix[0]), 31, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[0]), 31, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_1,spec_sum);
      }
      {
        double visc_2 = spec_visc[2][tid];
        double mole_2 = mole_frac[2][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[1]), 0, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[1]), 0, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_2); 
        lo_part = __shfl(__double2loint(factor_prefix[1]), 0, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[1]), 0, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_2,spec_sum);
      }
      {
        double visc_3 = spec_visc[3][tid];
        double mole_3 = mole_frac[3][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[1]), 1, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[1]), 1, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_3); 
        lo_part = __shfl(__double2loint(factor_prefix[1]), 1, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[1]), 1, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_3,spec_sum);
      }
      {
        double visc_4 = spec_visc[4][tid];
        double mole_4 = mole_frac[4][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[1]), 2, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[1]), 2, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_4); 
        lo_part = __shfl(__double2loint(factor_prefix[1]), 2, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[1]), 2, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_4,spec_sum);
      }
      {
        double visc_5 = spec_visc[5][tid];
        double mole_5 = mole_frac[5][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[1]), 3, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[1]), 3, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_5); 
        lo_part = __shfl(__double2loint(factor_prefix[1]), 3, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[1]), 3, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_5,spec_sum);
      }
      {
        double visc_6 = spec_visc[6][tid];
        double mole_6 = mole_frac[6][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[1]), 4, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[1]), 4, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_6); 
        lo_part = __shfl(__double2loint(factor_prefix[1]), 4, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[1]), 4, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_6,spec_sum);
      }
      {
        double visc_7 = spec_visc[7][tid];
        double mole_7 = mole_frac[7][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[1]), 5, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[1]), 5, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_7); 
        lo_part = __shfl(__double2loint(factor_prefix[1]), 5, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[1]), 5, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_7,spec_sum);
      }
      {
        double visc_8 = spec_visc[8][tid];
        double mole_8 = mole_frac[8][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[1]), 6, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[1]), 6, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_8); 
        lo_part = __shfl(__double2loint(factor_prefix[1]), 6, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[1]), 6, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_8,spec_sum);
      }
      {
        double visc_9 = spec_visc[9][tid];
        double mole_9 = mole_frac[9][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[1]), 7, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[1]), 7, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_9); 
        lo_part = __shfl(__double2loint(factor_prefix[1]), 7, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[1]), 7, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_9,spec_sum);
      }
      {
        double visc_10 = spec_visc[10][tid];
        double mole_10 = mole_frac[10][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[1]), 8, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[1]), 8, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_10); 
        lo_part = __shfl(__double2loint(factor_prefix[1]), 8, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[1]), 8, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_10,spec_sum);
      }
      {
        double visc_11 = spec_visc[11][tid];
        double mole_11 = mole_frac[11][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[1]), 9, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[1]), 9, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_11); 
        lo_part = __shfl(__double2loint(factor_prefix[1]), 9, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[1]), 9, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_11,spec_sum);
      }
      {
        double visc_12 = spec_visc[12][tid];
        double mole_12 = mole_frac[12][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[1]), 10, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[1]), 10, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_12); 
        lo_part = __shfl(__double2loint(factor_prefix[1]), 10, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[1]), 10, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_12,spec_sum);
      }
      {
        double visc_13 = spec_visc[13][tid];
        double mole_13 = mole_frac[13][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[1]), 11, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[1]), 11, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_13); 
        lo_part = __shfl(__double2loint(factor_prefix[1]), 11, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[1]), 11, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_13,spec_sum);
      }
      {
        double visc_14 = spec_visc[14][tid];
        double mole_14 = mole_frac[14][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[1]), 12, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[1]), 12, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_14); 
        lo_part = __shfl(__double2loint(factor_prefix[1]), 12, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[1]), 12, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_14,spec_sum);
      }
      {
        double visc_15 = spec_visc[15][tid];
        double mole_15 = mole_frac[15][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[1]), 13, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[1]), 13, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_15); 
        lo_part = __shfl(__double2loint(factor_prefix[1]), 13, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[1]), 13, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_15,spec_sum);
      }
      {
        double visc_16 = spec_visc[16][tid];
        double mole_16 = mole_frac[16][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[1]), 14, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[1]), 14, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_16); 
        lo_part = __shfl(__double2loint(factor_prefix[1]), 14, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[1]), 14, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_16,spec_sum);
      }
      {
        double visc_17 = spec_visc[17][tid];
        double mole_17 = mole_frac[17][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[1]), 15, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[1]), 15, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_17); 
        lo_part = __shfl(__double2loint(factor_prefix[1]), 15, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[1]), 15, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_17,spec_sum);
      }
      {
        double visc_18 = spec_visc[18][tid];
        double mole_18 = mole_frac[18][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[1]), 16, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[1]), 16, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_18); 
        lo_part = __shfl(__double2loint(factor_prefix[1]), 16, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[1]), 16, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_18,spec_sum);
      }
      {
        double visc_19 = spec_visc[19][tid];
        double mole_19 = mole_frac[19][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[1]), 17, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[1]), 17, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_19); 
        lo_part = __shfl(__double2loint(factor_prefix[1]), 17, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[1]), 17, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_19,spec_sum);
      }
      {
        double visc_20 = spec_visc[20][tid];
        double mole_20 = mole_frac[20][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[1]), 18, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[1]), 18, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_20); 
        lo_part = __shfl(__double2loint(factor_prefix[1]), 18, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[1]), 18, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_20,spec_sum);
      }
      {
        double visc_21 = spec_visc[21][tid];
        double mole_21 = mole_frac[21][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[1]), 19, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[1]), 19, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_21); 
        lo_part = __shfl(__double2loint(factor_prefix[1]), 19, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[1]), 19, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_21,spec_sum);
      }
      {
        double visc_22 = spec_visc[22][tid];
        double mole_22 = mole_frac[22][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[1]), 20, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[1]), 20, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_22); 
        lo_part = __shfl(__double2loint(factor_prefix[1]), 20, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[1]), 20, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_22,spec_sum);
      }
      {
        double visc_23 = spec_visc[23][tid];
        double mole_23 = mole_frac[23][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[1]), 21, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[1]), 21, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_23); 
        lo_part = __shfl(__double2loint(factor_prefix[1]), 21, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[1]), 21, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_23,spec_sum);
      }
      {
        double visc_24 = spec_visc[24][tid];
        double mole_24 = mole_frac[24][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[1]), 22, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[1]), 22, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_24); 
        lo_part = __shfl(__double2loint(factor_prefix[1]), 22, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[1]), 22, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_24,spec_sum);
      }
      {
        double visc_25 = spec_visc[25][tid];
        double mole_25 = mole_frac[25][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[1]), 23, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[1]), 23, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_25); 
        lo_part = __shfl(__double2loint(factor_prefix[1]), 23, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[1]), 23, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_25,spec_sum);
      }
      {
        double visc_26 = spec_visc[26][tid];
        double mole_26 = mole_frac[26][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[1]), 24, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[1]), 24, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_26); 
        lo_part = __shfl(__double2loint(factor_prefix[1]), 24, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[1]), 24, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_26,spec_sum);
      }
      {
        double visc_27 = spec_visc[27][tid];
        double mole_27 = mole_frac[27][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[1]), 25, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[1]), 25, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_27); 
        lo_part = __shfl(__double2loint(factor_prefix[1]), 25, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[1]), 25, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_27,spec_sum);
      }
      {
        double visc_28 = spec_visc[28][tid];
        double mole_28 = mole_frac[28][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[1]), 26, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[1]), 26, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_28); 
        lo_part = __shfl(__double2loint(factor_prefix[1]), 26, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[1]), 26, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_28,spec_sum);
      }
      {
        double visc_29 = spec_visc[29][tid];
        double mole_29 = mole_frac[29][tid];
        int hi_part, lo_part;
        lo_part = __shfl(__double2loint(mass_ratios[1]), 27, 32);
        hi_part = __shfl(__double2hiint(mass_ratios[1]), 27, 32);
        double numer = 0.5 * (__hiloint2double(hi_part,lo_part) + local_visc - 
          visc_29); 
        lo_part = __shfl(__double2loint(factor_prefix[1]), 27, 32);
        hi_part = __shfl(__double2hiint(factor_prefix[1]), 27, 32);
        numer = exp(numer);
        numer += 1.0;
        double factor = __hiloint2double(hi_part,lo_part)*numer*numer;
        spec_sum = __fma_rn(factor,mole_29,spec_sum);
      }
      double local_mole = mole_frac[wid+15][tid];
      local_visc = exp(local_visc);
      double ratio = local_visc/spec_sum;
      result = __fma_rn(local_mole,ratio,result);
    }
    asm volatile("bar.sync 0;" : : : "memory");
    spec_visc[wid][tid] = result;
    asm volatile("bar.sync 0;" : : : "memory");
    if (wid == 0)
    {
      double accum = 0.0;
      #pragma unroll
      for (int i = 0; i < 15; i++)
      {
        accum += spec_visc[i][tid];
      }
      accum *= 0.1535268500652559;
      asm volatile("st.global.cs.f64 [%0], %1;" : : "l"(viscosity), "d"(accum) : 
        "memory"); 
    }
    {
      temperature_array += slice_stride;
      mass_frac_array += slice_stride;
      avmolwt_array += slice_stride;
      viscosity += slice_stride;
    }
    asm volatile("bar.sync 0;" : : : "memory");
  }
}


