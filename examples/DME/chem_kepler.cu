/*
 * Copyright 2015 Stanford University and NVIDIA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Fast chemistry kernel for DME on Kepler.
 * Best version runs with 2 CTA with 8 warps each.
 * Should compile to 128 registers and spill 156 bytes.
 * Shared memory and math latency limited.  Significant
 * math load imbalance between warps leads to long
 * critical paths with under-utilized math units.
 * Fixing imbalance leads to prohibitive register pressure.
 *
 * Launch with:
 * dim3 grid((nx*ny)/32, 1, 1);
 * dim3 block(8*32, 1, 1);
 * 
 * DON'T FORGET: cudaDeviceSetSharedMemConfig(cudaSharedMemBankSizeEightByte)
 *
 * gpu_getrates<<<grid, block>>>(temperature_ptr, 
 *                      pressure_ptr,  avmolwt_ptr,  mass_frac_ptr, 
 *                      diffusion_ptr,  dt,  (1.0/dt),  
 *                      nx*ny,  nx,  nz,  nx*ny*nz, 
 *                      0,  wdot_ptr);
 *
 * Performance numbers on K20c with 13 SMs:
 *
 * 32x32x32
 *   Latency: 7.110 ms
 *   Throughput: 4.609 Mpoints/s
 *
 * 64x64x64
 *   Latency: 35.565 ms
 *   Throughput: 7.371 Mpoints/s
 *
 * 128x128x128
 *   Latency: 285.339 ms
 *   Throughput: 7.350 Mpoints/s
 *
 * Generation command:
 *  ./singe --dir inputs/DME --cuda --reac 8 --qssa 4 --ctas 2 --k20
 *
 */

#ifndef TOTAL_STEPS
#define TOTAL_STEPS 32
#endif

__constant__ double molecular_masses[30] = {1.00797,  2.01594,  15.03506,  15.9994,  
  16.04303,  17.00737,  18.01534,  26.03824,  28.01055,  28.05418,  29.06215,  
  30.02649,  30.07012,  31.03446,  31.9988,  33.00677,  34.01474,  44.00995,  44.05358,  
  46.02589,  46.06952,  59.04501,  60.05298000000001,  62.06892000000001,  75.04441,  
  75.04441,  77.06035,  92.05178000000001,  109.05915,  28.0134}; 


__constant__ double recip_molecular_masses[30] = {0.9920930186414277,  
  0.4960465093207139,  0.06651120780362699,  0.06250234383789392,  
  0.06233236489615739,  0.05879803873262004,  0.05550825019122593,  
  0.0384050534905585,  0.03570083414998991,  0.03564531203549703,  
  0.0344090165386938,  0.03330392596670473,  0.03325560390181349,  
  0.03222224585186918,  0.03125117191894696,  0.03029681486555637,  
  0.02939901936631002,  0.02272213442641948,  0.02269963076780593,  
  0.02172690196756651,  0.02170632557057247,  0.01693623220658274,  
  0.01665196298335236,  0.01611112292593459,  0.01332544289441412,  
  0.01332544289441412,  0.01297684217629429,  0.01086345098378326,  
  9.169336089635763e-03,  0.03569720205330306}; 


__constant__ double gibbs_temp[38] = {8.333333333333336,  8.333333333333336,  
  8.333333333333336,  8.333333333333336,  8.333333333333336,  8.333333333333336,  
  8.333333333333336,  8.333333333333336,  8.333333333333336,  8.333333333333336,  
  8.333333333333336,  8.333333333333336,  8.333333333333336,  8.333333333333336,  
  8.333333333333336,  10.0,  8.333333333333336,  6.250000000000002,  
  8.333333333333336,  8.333333333333336,  8.333333333333336,  8.333333333333336,  
  8.333333333333336,  8.333333333333336,  11.46666666666667,  11.46666666666667,  
  5.916666666666668,  12.1,  11.35,  14.05,  16.76666666666667,  16.78333333333334,  
  12.29166666666667,  13.35833333333334,  11.575,  11.60833333333334,  
  11.55833333333334,  11.68333333333334}; 

__constant__ double gibbs_high[38][7] = {{2.5,  -0.0,  -0.0,  -0.0,  -0.0,  
  212.2635833333334,  -0.4601176},  {2.991423,  -0.04200386399999999,  
  1.352118959999999e-04,  1.329347231999999e-06,  -1.640997273599998e-08,  
  -6.958616666666668,  -1.35511},  {2.87410113,  -0.2193835751999999,  
  3.381470327999999e-03,  -3.746585505599996e-05,  1.946359414655998e-07,  
  385.5300333333334,  6.17119324},  {2.29203842,  -0.2793531821999999,  
  4.828606727999998e-03,  -6.017846399999994e-05,  3.522179272319995e-07,  
  424.3833308333334,  8.62650169},  {2.9781206,  -0.3478711199999999,  
  4.741391999999999e-03,  -4.425089759999996e-05,  1.857677690879998e-07,  
  137.579275,  4.7224799},  {2.54206,  1.6530372e-03,  7.446727199999996e-06,  
  -6.553536479999994e-07,  4.528796313599995e-09,  243.59,  4.920308},  {1.683479,  
  -0.6142343999999998,  9.300309599999996e-03,  -9.771242399999991e-05,  
  4.669148966399994e-07,  -84.00658333333335,  9.623395},  {2.86472886,  
  -0.06339026879999998,  6.217986191999998e-04,  -4.395148905599995e-06,  
  1.380974842367998e-08,  30.69690625,  5.70164073},  {2.672146,  -0.18337758,  
  2.095262399999999e-03,  -1.729434239999998e-05,  6.626829542399991e-08,  
  -249.1600833333334,  6.862817},  {4.14756964,  -0.3576999983999999,  
  5.695076447999998e-03,  -6.730735262399994e-05,  3.745286688383996e-07,  
  216.1333266666667,  -1.23028121},  {3.016724,  -0.6198137519999999,  
  0.01123397637599999,  -1.465391347199998e-04,  8.943509801087989e-07,  
  288.4406158333334,  7.78732378},  {3.025078,  -0.08656133999999999,  
  1.351398719999999e-03,  -1.466756639999998e-05,  7.165275033599991e-08,  
  -118.9029166666667,  6.108218},  {2.03611116,  -0.8787249059999998,  
  0.01610586995999999,  -2.120010091199998e-04,  1.303320440447998e-06,  
  41.16571783333334,  10.3053693},  {3.557271,  -0.20073438,  3.204014399999999e-03,  
  -3.557625119999996e-05,  1.776920716799998e-07,  32.63603333333334,  5.552299},  
  {4.2878814,  -0.7460335799999998,  0.01059338855999999,  -1.017419068799999e-04,  
  4.358202900479995e-07,  100.4704583333334,  0.84602583},  {5.1481905,  
  -0.1720680959999999,  5.707831919999998e-04,  2.320027631999998e-05,  
  -2.961799084799996e-07,  -135.2514416666667,  -5.1213813},  {4.825938,  
  -0.8304257999999999,  0.0109374216,  -9.68395247999999e-05,  
  3.730573324799995e-07,  -105.9815833333334,  -5.239507},  {3.7469103,  
  -0.5318767259999999,  0.01021937328,  -1.452677759999998e-04,  
  9.797921844479988e-07,  -30.55402,  5.4281095},  {3.7708,  -0.4722898199999999,  
  6.375321599999997e-03,  -5.679980639999994e-05,  2.190360268799997e-07,  
  1.065270833333334,  2.929575},  {3.697578,  -0.03681118199999999,  
  3.021220799999999e-04,  -2.556404639999998e-06,  1.178255807999999e-08,  
  -10.28275,  3.189166},  {4.0172109,  -0.1343892078,  1.520779559999999e-03,  
  -1.645147727999999e-05,  1.118795690879999e-07,  0.9321392750000002,  
  3.78510215},  {4.573167,  -0.2601681599999999,  3.539253599999998e-03,  
  -3.382421759999996e-05,  1.484338867199998e-07,  -150.058,  0.5011370000000001},  
  {4.453623,  -0.1884101399999999,  3.068186399999999e-03,  -3.447355679999996e-05,  
  1.730453414399998e-07,  -408.058,  -0.9553959},  {5.4041108,  -0.7033835399999998,  
  0.01014315288,  -9.84563294399999e-05,  4.249310595839995e-07,  
  -188.2760166666667,  -3.4807917},  {8.17137842,  -0.6605170859999999,  
  9.176454647999996e-03,  -8.634775708799992e-05,  3.632091974783995e-07,  
  -28.49513375,  -17.8650856},  {6.68733013,  -0.3085736207999999,  
  4.373724311999999e-03,  -4.171955947199996e-05,  1.771810319231998e-07,  
  -403.3295000000001,  -11.3104798},  {0.830815546,  -1.615039578,  
  0.03332994647999999,  -5.004217137599995e-04,  3.542815936511995e-06,  
  -195.1008125,  20.217436},  {6.39521515,  -0.4462038257999999,  
  6.010136495999997e-03,  -5.542267852799995e-05,  2.299401447551997e-07,  
  -206.2503208333334,  -7.29290847},  {13.08776,  -0.27212697,  
  3.962312735999999e-03,  -3.847640788799996e-05,  1.654492915583998e-07,  
  -205.5136666666667,  -32.7914051},  {8.69123518,  -0.6930187319999997,  
  0.010266779664,  -1.011647604959999e-04,  4.399490267135994e-07,  
  -386.9706408333334,  -18.9301478},  {8.60261845,  -0.8146331699999998,  
  0.011631878448,  -1.119983317919999e-04,  4.796585413631994e-07,  -178.13537,  
  -17.5775023},  {8.7098157,  -0.9216142319999998,  0.01298409091199999,  
  -1.239225762239999e-04,  5.275443188735994e-07,  -397.1725958333334,  
  -18.0226702},  {12.0233916,  -0.4867575953999999,  6.992555087999997e-03,  
  -6.729701529599993e-05,  2.875829443199996e-07,  -361.3726925000001,  
  -33.3691809},  {11.3737391,  -0.4905983387999999,  7.008816503999998e-03,  
  -6.720416870399994e-05,  2.864438100863996e-07,  -387.9797858333334,  
  -28.6035265},  {12.4249729,  -0.7122359159999999,  9.789756767999997e-03,  
  -9.148475649599991e-05,  3.830228125055995e-07,  -191.399365,  -35.3740145},  
  {15.1191783,  -0.5542313297999999,  7.659060119999997e-03,  
  -7.187251363199993e-05,  3.018772675583996e-07,  -153.4290558333334,  
  -48.5706618},  {16.4584298,  -0.5116101065999999,  7.298723999999997e-03,  
  -6.992595475199992e-05,  2.978895750911996e-07,  -519.9663400000001,  
  -53.8924139},  {19.2038046,  -0.6263690459999999,  8.653990535999996e-03,  
  -8.118616939199993e-05,  3.409073194751995e-07,  -316.0058791666667,  
  -65.18472730000001}}; 

__constant__ double gibbs_low[38][7] = {{2.5,  -0.0,  -0.0,  -0.0,  -0.0,  
  212.2635833333334,  -0.4601176},  {3.298124,  -0.04949665199999999,  
  1.954323599999999e-03,  1.364462495999999e-05,  -4.287035289599994e-06,  
  -8.437675,  -3.294094},  {3.76267867,  -0.05813232857999999,  
  -6.707756183999998e-03,  5.545312603199995e-04,  -1.749514142591998e-05,  
  383.3670008333334,  1.56253185},  {4.19860411,  0.1419968514,  
  -0.01975910927999999,  9.63095012639999e-04,  -2.014655193215998e-05,  
  420.8068025000001,  -0.769118967},  {3.6571797,  -0.127595874,  
  -0.01310013191999999,  9.53006443199999e-04,  -2.556445432319997e-05,  
  136.8559666666667,  1.6735354},  {2.946429,  0.09828995999999997,  
  -5.810476799999997e-03,  2.308093919999998e-04,  -4.033873612799995e-06,  
  242.897,  2.963995},  {0.7787415,  -1.0486008,  0.06680181599999997,  
  -4.391579519999995e-03,  1.268971660799999e-04,  -81.87690833333335,  13.72219},  
  {4.12530561,  0.1935269634,  -0.015666352584,  8.349892459199992e-04,  
  -2.138269145471997e-05,  27.88590941666667,  -0.69043296},  {3.386842,  
  -0.2084989199999999,  0.01525127039999999,  -1.003475663999999e-03,  
  2.598830438399997e-05,  -251.7342500000001,  2.590233},  {0.808681094,  
  -1.401693774,  0.08524123559999996,  -4.034195092799996e-03,  
  8.813556594431989e-05,  220.2415058333334,  13.9397051},  {3.21246645,  
  -0.09088749719999999,  -0.06221025887999997,  5.150272996799995e-03,  
  -1.525660251263998e-04,  290.4987233333334,  8.51054025},  {3.262452,  
  -0.09071645999999997,  9.316211999999997e-03,  -8.037999359999992e-04,  
  2.566029196799997e-05,  -119.2545,  4.848897},  {3.95920148,  0.4542313481999999,  
  -0.13703767008,  9.95887804319999e-03,  -2.798161179263997e-04,  
  42.41479941666667,  4.09733096},  {2.89833,  -0.37194882,  0.02309540159999999,  
  -1.569347999999998e-03,  4.743240767999994e-05,  34.66601666666667,  
  8.983613999999999},  {4.305858,  0.2510018279999999,  -0.119297448,  
  8.626445855999991e-03,  -2.389666199039997e-04,  107.0142833333334,  4.7100236},  
  {2.6962612,  -0.2955685379999999,  -1.987835855999999e-03,  
  7.925500223999992e-05,  4.106798599679995e-06,  -124.7566083333334,  9.4697599},  
  {1.462539,  -0.9296801999999998,  -0.01387321679999999,  1.811278079999998e-03,  
  -4.755041625599994e-05,  -93.65983333333335,  14.43229},  {4.6119792,  0.18722256,  
  -0.08527603199999997,  7.110633311999993e-03,  -2.283784968959997e-04,  
  -30.03394500000001,  2.8351399},  {2.106204,  -0.4329956999999999,  
  -0.01281233279999999,  1.062379583999999e-03,  -2.151993484799997e-05,  
  8.155009166666668,  13.15218},  {3.212936,  -0.06764915999999999,  1.381476e-03,  
  -1.891982879999998e-04,  9.091236787199989e-06,  -8.377075000000001,  6.034738},  
  {4.30179801,  0.2849472305999999,  -0.05077989383999998,  3.495800073599997e-03,  
  -9.634206085631988e-05,  2.456733666666667,  3.71666245},  {3.388754,  
  -0.3941535599999999,  3.564031199999998e-04,  6.661160639999993e-04,  
  -2.562466751999997e-05,  -147.1929166666667,  6.785363},  {2.275725,  
  -0.5953243199999999,  0.02498186399999999,  -9.888029279999989e-04,  
  2.195195903999997e-05,  -403.1095000000001,  10.18849},  {4.7294595,  
  0.1915971479999999,  -0.1140838104,  8.274039983999991e-03,  
  -2.273817692159997e-04,  -179.7739833333334,  4.1030159},  {2.91327415,  
  -1.220187954,  0.02303309620799999,  -2.987690759999997e-04,  
  1.776487977215998e-06,  -9.903686666666667,  11.6066817},  {1.43548185,  
  -0.9801780959999997,  0.02550178103999999,  -4.782714868799995e-04,  
  4.169761835903994e-06,  -387.1804200000001,  17.2885798},  {5.68097447,  
  0.3236608505999999,  -0.1558734599999999,  0.01159294057919999,  
  -3.395250618623996e-04,  -199.7962125000001,  -0.636955496},  {4.11183145,  
  -0.4523104181999999,  -9.056096879999996e-03,  7.757942471999992e-04,  
  -1.509745516415998e-05,  -195.345455,  6.81381989},  {3.94199159,  -1.460609304,  
  0.03974293439999999,  -6.602938718399993e-04,  3.440057900543996e-06,  
  -178.6706908333334,  16.6954362},  {3.08839783,  -1.222560288,  
  0.01643464895999999,  1.048588132319999e-04,  -5.828166079487992e-06,  
  -368.2126391666667,  12.5364719},  {3.25889339,  -1.332878154,  
  0.01868535215999999,  3.477371875199997e-05,  -4.685449494527994e-06,  
  -160.3143433333334,  12.3680069},  {3.15851876,  -1.465954506,  
  0.02080763481599999,  8.543798323199991e-06,  -4.524595231103994e-06,  
  -378.7407491666668,  13.0511235},  {5.19690837,  -0.9530383379999998,  
  -8.484973127999997e-04,  8.790579691199991e-04,  -2.018253552767998e-05,  
  -335.2023266666667,  6.11645828},  {6.08180801,  -0.7726101539999998,  
  -4.906066031999998e-03,  8.786230862399991e-04,  -1.864379555711998e-05,  
  -366.2718191666668,  2.54054449},  {2.21029612,  -2.213264723999999,  
  0.06781477319999997,  -1.666519675199998e-03,  2.043848712959998e-05,  
  -162.4507833333334,  19.1463601},  {2.52895507,  -2.54476974,  
  0.08961753263999997,  -2.399606395199998e-03,  3.073524258815996e-05,  
  -120.2444216666667,  17.6899251},  {3.47935703,  -2.417714352,  
  0.07922623103999997,  -1.934785684799998e-03,  2.266461181439997e-05,  
  -483.8582783333334,  15.2521392},  {1.99640551,  -3.499357391999999,  
  0.1327823467199999,  -3.741271775999996e-03,  4.946997939839994e-05,  
  -273.0239516666667,  24.4215005}}; 

__device__ const int chem_index[256] = {16,  4,  28,  8,  1,  25,  18,  0,  0,  0,  0,  0,  
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  9,  27,  3,  6,  
  26,  24,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  
  0,  0,  3,  10,  24,  14,  16,  21,  27,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  11,  13,  18,  11,  4,  22,  28,  0,  0,  0,  0,  0,  0,  0,  
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  15,  19,  25,  15,  9,  20,  
  23,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  
  2,  12,  26,  2,  10,  12,  29,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  
  0,  0,  0,  0,  0,  0,  0,  0,  0,  20,  0,  0,  13,  7,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5,  22,  0,  5,  17,  19,  0,  0,  0,  0,  
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}; 

__device__ const double chem_real[1280] = {-1.72,  -524.8,  1.864740588650248e+18,  
  0.6,  -0.0,  2.879017473981534e+14,  -4.76,  -2.44e+03,  3.467103514755617e+24,  
  -0.63,  -383.0,  6.868518444211025e+15,  -3.86,  -3.32e+03,  1.456907432195987e+23,  
  0.27,  -280.0,  2.444702679710093e+14,  0.0,  -0.0,  3.311805229497511e+14,  0.0,  
  0.0,  0.0,  1.18,  447.0,  1.075651341627646e+13,  0.0,  0.0,  0.0,  0.0,  -0.0,  0.0,  
  -1.1982e+04,  4.636527321296516e+15,  0.0,  0.0,  0.0,  0.0,  -5.017e+03,  
  2.660483534363001e+15,  0.0,  0.0,  0.0,  -7.27,  -7.22e+03,  3.21424865400783e+26,  
  0.0,  -2.4e+03,  6.182036428395355e+13,  0.0,  -0.0,  3.311805229497511e+14,  0.0,  
  0.0,  0.0,  3.0,  -5.2e+04,  2.346347768994395e+13,  0.0,  0.0,  0.0,  0.0,  -0.0,  0.0,  
  1.6293e+03,  1.435115599448922e+12,  0.0,  0.0,  0.0,  -1.0,  -0.0,  
  1.38911830459479e+14,  0.0,  0.0,  0.0,  -3.14,  -1.23e+03,  1.045837954098072e+22,  
  -0.8,  -0.0,  5.991541126414163e+15,  0.0,  -0.0,  3.311805229497511e+13,  0.0,  0.0,  
  0.0,  2.5,  -1.021e+04,  7.157122817631328e+10,  0.0,  0.0,  0.0,  0.0,  -0.0,  0.0,  
  -4.55e+04,  1.326929961952003e+18,  0.0,  -4.843e+04,  3.257712410749052e+15,  0.0,  
  -1.198e+04,  9.971845546017006e+14,  0.0,  0.0,  0.0,  0.659,  -1.4874e+04,  
  1.229363787723021e+14,  0.0,  0.0,  0.0,  0.0,  -0.0,  2.925427952722802e+14,  0.0,  
  0.0,  0.0,  5.42,  -998.0,  7.45984426405874e+06,  0.0,  0.0,  0.0,  2.0,  -8.27e+03,  
  0.0,  -0.0,  1.103935076499171e+13,  0.0,  0.0,  0.0,  0.0,  -1.748e+03,  
  2.428657168298175e+11,  0.0,  0.0,  0.0,  0.0,  -410.0,  8.367827879863712e+13,  0.0,  
  0.0,  0.0,  0.0,  -0.0,  3.311805229497511e+14,  0.0,  0.0,  0.0,  0.0,  -2.51e+04,  
  1.10393507649917e+15,  0.0,  0.0,  0.0,  0.0,  570.0,  0.0,  -9.557e+03,  
  6.402823443695189e+15,  0.0,  0.0,  0.0,  -7.08,  -6.685e+03,  4.18016464015134e+27,  
  -0.99,  -1.58e+03,  5.027960099347838e+16,  0.0,  -0.0,  7.981450603089002e+14,  
  0.0,  0.0,  0.0,  -6.3,  -9.99e+04,  2.901453552656132e+27,  0.0,  0.0,  0.0,  0.0,  
  -0.0,  6.623610458995023e+13,  0.0,  0.0,  0.0,  1.6,  -5.42e+03,  -2.79,  -4.191e+03,  
  2.706197911607109e+19,  0.0,  -2.384e+03,  1.987083137698507e+11,  -9.31,  
  -9.986e+04,  3.395190696521737e+32,  0.44,  -8.877e+04,  7.258941026773331e+14,  
  0.0,  -0.0,  3.333883931027495e+14,  0.0,  0.0,  0.0,  1.9,  -2.7486e+03,  
  5.653270844854574e+12,  0.0,  0.0,  0.0,  0.0,  -0.0,  1.063641446206951e+15,  0.0,  
  0.0,  0.0,  0.0,  -0.0,  -3.75,  -981.6,  1.419140797871381e+25,  
  -0.6899999999999999,  -174.86,  9.23999005317581e+14,  -7.62,  -6.97e+03,  
  1.900044113066513e+27,  0.454,  -1.82e+03,  1.047889705976806e+14,  0.0,  -0.0,  
  3.333883931027495e+14,  0.0,  0.0,  0.0,  0.0,  -3.08e+03,  1.998122488463498e+14,  
  0.0,  0.0,  0.0,  0.0,  -0.0,  4.636527321296516e+14,  0.0,  0.0,  0.0,  0.0,  -0.0,  
  2.649444183598009e+14,  0.0,  0.0,  0.0,  0.0,  570.0,  1.324722091799005e+14,  0.0,  
  0.0,  0.0,  1.91,  -3.74e+03,  1.560115171110356e+12,  0.0,  0.0,  0.0,  2.0,  
  -1.9e+03,  6.485839361447924e+11,  0.0,  0.0,  0.0,  0.0,  -0.0,  
  3.311805229497511e+14,  0.0,  0.0,  0.0,  0.0,  -0.0,  1.324722091799005e+14,  0.0,  
  1.324722091799005e+14,  0.0,  0.0,  0.0,  0.0,  -0.0,  1.766296122398673e+14,  0.0,  
  0.0,  0.0,  0.0,  -5.76e+04,  4.653086347444003e+14,  0.0,  0.0,  0.0,  0.0,  -0.0,  
  8.831480611993364e+14,  0.0,  0.0,  0.0,  0.0,  -0.0,  9.935415688492534e+13,  0.0,  
  0.0,  0.0,  0.0,  -0.0,  1.545509107098839e+14,  0.0,  1.655902614748756e+14,  0.0,  
  0.0,  0.0,  0.0,  -0.0,  1.324722091799004e+15,  0.0,  0.0,  0.0,  0.0,  -0.0,  
  1.0641934137452e+15,  0.0,  0.0,  0.0,  0.0,  -0.0,  2.207870152998341e+14,  0.0,  
  0.0,  0.0,  0.0,  -0.0,  7.727545535494194e+13,  0.0,  0.0,  0.0,  0.0,  -8.1674e+04,  
  7.727545535494194e+16,  0.0,  3.91057961499066e+11,  0.0,  0.0,  0.0,  2.53,  
  -1.224e+04,  2.663716271498442e+12,  0.0,  0.0,  0.0,  0.0,  596.0,  
  1.335761442563996e+11,  0.0,  0.0,  0.0,  2.0,  -7.23e+03,  7.948332550794023e+10,  
  0.0,  0.0,  0.0,  0.0,  -0.0,  1.655902614748756e+14,  0.0,  0.0,  0.0,  2.0,  629.88,  
  1.066666228316558e+12,  0.0,  1.766296122398673e+14,  0.0,  0.0,  0.0,  2.0,  
  -2.5e+03,  2.861399718285848e+11,  0.0,  0.0,  0.0,  0.0,  -0.0,  
  4.305346798346765e+12,  0.0,  0.0,  0.0,  0.0,  -1.5e+03,  1.457194300978905e+14,  
  0.0,  0.0,  0.0,  0.0,  -0.0,  1.655902614748756e+14,  0.0,  0.0,  0.0,  2.0,  
  -4.03361e+03,  4.72130953517165e+12,  0.0,  1.311660842383452e+12,  0.0,  0.0,  0.0,  
  2.0,  -9.2e+03,  3.608542978060487e+10,  0.0,  0.0,  0.0,  0.0,  -0.0,  
  1.059777673439204e+13,  0.0,  0.0,  0.0,  0.0,  -0.0,  2.207870152998341e+14,  0.0,  
  0.0,  0.0,  0.0,  -0.0,  3.311805229497511e+14,  0.0,  0.0,  0.0,  3.7779,  
  -9.631299999999999e+03,  2.118444820464827e+10,  0.0,  2.760941626324425e+14,  
  0.0,  0.0,  0.0,  1.83,  -220.0,  1.352528551877918e+12,  0.0,  0.0,  0.0,  -1.39,  
  -1.015e+03,  6.512490141179874e+14,  0.0,  0.0,  0.0,  0.0,  -0.0,  
  3.532592244797346e+14,  0.0,  0.0,  0.0,  0.0,  -0.0,  7.727545535494192e+14,  0.0,  
  0.0,  0.0,  5.29,  109.0,  2.042472596567349e+09,  0.0,  4.415740305996682e+14,  0.0,  
  0.0,  0.0,  0.0,  -0.0,  5.519675382495852e+13,  0.0,  0.0,  0.0,  1.61,  384.0,  
  3.285161664369637e+10,  0.0,  0.0,  0.0,  0.0,  -600.0,  9.935415688492534e+13,  0.0,  
  0.0,  0.0,  0.0,  -0.0,  3.091018214197678e+14,  0.0,  0.0,  0.0,  0.0,  -1.65e+04,  
  2.207870152998341e+14,  0.0,  0.0,  0.0,  0.0,  -4.491e+04,  4.526133813646599e+14,  
  0.0,  0.0,  0.0,  -1.1,  -2.064e+04,  5.541148369313399e+14,  0.0,  0.0,  0.0,  -1.11,  
  -0.0,  2.444921184143431e+14,  0.0,  0.0,  0.0,  -1.0,  -0.0,  4.336624958847576e+17,  
  0.0,  0.0,  0.0,  2.0,  -3.97e+03,  1.518131517201658e+12,  0.0,  0.0,  0.0,  0.0,  0.0,  
  0.0,  -2.575e+04,  1.324722091799005e+14,  0.0,  0.0,  0.0,  0.0,  -500.0,  
  5.519675382495852e+11,  0.0,  0.0,  0.0,  -0.46,  -1.083e+05,  
  5.605529017804934e+18,  0.0,  0.0,  0.0,  -2.0,  -0.0,  2.913162007428368e+19,  0.0,  
  0.0,  0.0,  0.0,  -4.77e+04,  2.792955743542901e+13,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  
  -0.0,  2.660483534363001e+14,  0.0,  0.0,  0.0,  0.0,  -2.15e+04,  
  6.623610458995023e+11,  0.0,  0.0,  0.0,  -0.406,  -1.6599e+04,  
  5.606052175734568e+15,  0.0,  0.0,  0.0,  0.0,  -823.0,  1.832532226988623e+14,  0.0,  
  0.0,  0.0,  0.0,  -2.3e+04,  3.322844580262503e+14,  0.0,  0.0,  0.0,  0.0,  0.0,  2.8,  
  -5.862e+03,  4.019975129634464e+10,  0.0,  0.0,  0.0,  0.0,  -2.05e+04,  
  1.655902614748756e+14,  0.0,  0.0,  0.0,  2.67,  -6.29e+03,  1.996278696128123e+11,  
  0.0,  0.0,  0.0,  0.0,  -295.0,  7.814756406537628e+14,  0.0,  0.0,  0.0,  1.89,  
  1.1587e+03,  2.09269605867099e+10,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  -0.0,  
  9.935415688492534e+13,  0.0,  0.0,  0.0,  0.0,  -0.0,  7.727545535494193e+12,  0.0,  
  0.0,  0.0,  1.51,  -3.43e+03,  3.288220749682686e+12,  0.0,  0.0,  0.0,  0.0,  -0.0,  
  3.587788998622304e+14,  0.0,  0.0,  0.0,  -8.0,  -9.751e+04,  7.958940506033622e+29,  
  0.0,  0.0,  0.0,  0.0,  0.0,  -0.66,  -1.172e+04,  8.174841514690048e+15,  0.0,  0.0,  
  0.0,  -2.69,  -1.72e+04,  6.134856519837184e+11,  0.0,  0.0,  0.0,  2.02,  -1.34e+04,  
  5.195724313044046e+11,  0.0,  0.0,  0.0,  0.0,  497.0,  3.190372371082602e+14,  0.0,  
  0.0,  0.0,  0.0,  -0.0,  9.306172694888006e+14,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  
  -0.0,  2.207870152998341e+13,  0.0,  0.0,  0.0,  -2.61,  -2.081e+04,  
  2.195112496257389e+11,  0.0,  0.0,  0.0,  -1.4,  -1.0438e+05,  
  6.203984453113697e+17,  0.0,  0.0,  0.0,  0.0,  -3.97e+03,  2.660483534363001e+14,  
  0.0,  0.0,  0.0,  -1.57,  -2.923e+04,  1.195314128835182e+16,  0.0,  0.0,  0.0,  0.0,  
  0.0,  -4.5,  -0.0,  7.761270889928952e+14,  0.0,  0.0,  0.0,  0.0,  -1.49e+04,  
  1.10393507649917e+15,  0.0,  0.0,  0.0,  -0.5,  -0.0,  6.21278022363831e+15,  0.0,  
  0.0,  0.0,  0.0,  -7.95e+03,  5.320967068726001e+14,  0.0,  0.0,  0.0,  0.0,  
  -1.464e+04,  4.128717186106897e+12,  0.0,  0.0,  0.0,  0.76,  2.325e+03,  
  1.011901692790769e+13,  0.0,  0.0,  0.0,  0.0,  -0.0,  6.623610458995023e+13,  0.0,  
  0.0,  0.0,  0.0,  -5.09e+04,  4.415740305996682e+14,  0.0,  0.0,  0.0,  4.0,  2.0e+03,  
  1.105644851145651e+06,  0.0,  0.0,  0.0,  -1.76,  -1.715e+04,  
  1.802183890287902e+10,  0.0,  0.0,  0.0,  2.06,  -916.0,  1.97,  -1.121e+04,  
  7.532131852958465e+12,  0.0,  0.0,  0.0,  0.0,  -0.0,  1.987083137698507e+14,  0.0,  
  0.0,  0.0,  0.0,  -1.494e+04,  3.245569124907561e+12,  0.0,  0.0,  0.0,  -7.95359,  
  -9.180660000000001e+04,  5.447209472326553e+26,  0.0,  0.0,  0.0,  -1.78,  
  -1.382e+04,  3.327566857330973e+09,  0.0,  0.0,  0.0,  1.51,  962.0,  0.5,  
  -1.029e+04,  3.809295903544656e+14,  0.0,  0.0,  0.0,  0.0,  -0.0,  
  3.311805229497511e+12,  0.0,  0.0,  0.0,  1.74,  -1.045e+04,  2.811171052603441e+11,  
  0.0,  0.0,  0.0,  0.0,  -4.97e+04,  1.10393507649917e+14,  0.0,  0.0,  0.0,  -4.5,  
  -0.0,  3.326120098351519e+14,  0.0,  0.0,  0.0,  2.1,  -4.868e+03,  1.96,  -2.639e+03,  
  7.508182214995878e+11,  0.0,  0.0,  0.0,  0.0,  -1.18e+04,  1.766296122398673e+14,  
  0.0,  0.0,  0.0,  0.0,  -0.0,  2.207870152998341e+13,  0.0,  0.0,  0.0,  1.61,  35.0,  
  5.749647191192931e+11,  0.0,  0.0,  0.0,  0.0,  -1.85e+04,  4.415740305996682e+11,  
  0.0,  0.0,  0.0,  -0.35,  -2.988e+03,  0.0,  -0.0,  3.488434841737379e+13,  0.0,  0.0,  
  0.0,  0.1,  -1.06e+04,  8.891237335160038e+13,  0.0,  0.0,  0.0,  0.0,  -0.0,  
  1.457194300978905e+15,  0.0,  0.0,  0.0,  0.0,  -1.7e+04,  1.346800793328988e+13,  
  0.0,  0.0,  0.0,  0.0,  -4.0e+04,  3.311805229497511e+17,  0.0,  0.0,  0.0,  5.8,  
  -2.2e+03,  0.0,  -1.858e+04,  1.998122488463499e+12,  0.0,  0.0,  0.0,  1.9,  
  -7.53e+03,  1.132623949753094e+13,  0.0,  0.0,  0.0,  0.0,  -0.0,  
  2.207870152998341e+11,  0.0,  0.0,  0.0,  2.5,  -2.23e+03,  4.092272170665114e+11,  
  0.0,  0.0,  0.0,  0.0,  -1.4e+04,  1.10393507649917e+12,  0.0,  0.0,  0.0,  0.0,  
  -1.192e+04,  -1.2,  -1.55e+04,  2.930921117095452e+16,  0.0,  0.0,  0.0,  1.92,  
  -5.69e+03,  9.733025516474088e+12,  0.0,  0.0,  0.0,  0.0,  -0.0,  
  1.545509107098839e+13,  0.0,  0.0,  0.0,  2.0,  -5.0e+03,  7.232982621222561e+11,  
  0.0,  0.0,  0.0,  0.0,  -5.0e+04,  2.539050675948092e+14,  0.0,  0.0,  0.0,  -1.9,  
  -2.975e+03,  0.0,  -0.0,  3.532592244797346e+14,  0.0,  0.0,  0.0,  2.12,  -870.0,  
  9.99564990124443e+11,  0.0,  0.0,  0.0,  0.0,  -0.0,  8.853559313523348e+14,  0.0,  
  0.0,  0.0,  3.46,  -5.481e+03,  1.302739543042372e+08,  0.0,  0.0,  0.0,  0.0,  
  -5.7e+04,  1.655902614748756e+17,  0.0,  0.0,  0.0,  0.0,  0.0,  
  5.550833377171349e+11,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  
  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  
  0.0,  0.0,  0.0,  0.0,  0.0,  2.816300179126374e+11,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  
  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  
  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  1.087902578628319e+12,  0.0,  
  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  
  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  
  1.246084256131252e+14,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  
  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  
  0.0,  0.0,  0.0,  0.0,  0.0,  4.934684224705385e+06,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  
  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  
  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  1.103935076499171e+13,  0.0,  
  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  
  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  
  2.190142797154487e+15,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  
  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  
  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  
  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  
  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0}; 

__global__ void
__launch_bounds__(256, 2)
gpu_getrates(const double *temperature_array,  const double *pressure_array,  
  const double *avmolwt_array,  const double *mass_frac_array,  const double 
  *diffusion_array,  const double dt,  const double recip_dt,  const int 
  slice_stride/*NX*NY in number of doubles*/,  const int row_stride/*NX in number 
  of doubles*/,  const int total_steps/*NZ in number of doubles*/,  const int 
  spec_stride/*NX*NY*NZ in number of doubles*/,  int step_stride/*always 
  zero*/,  double *wdot_array) 
{
step_stride = 0;
  __shared__ volatile double scratch[96][32];
  const int wid = threadIdx.x >> 5;
  const int tid = threadIdx.x & 0x1f;
  const double PA = 1.013250e+06;
  // Scaled R0 for non-dimensionalization
  const double R0 = 9.977411999999998e+09;
  // Scaled R0c for non-dimensionalization
  const double R0c = 238.4658699839999;
  const double DLn10 = 2.3025850929940459e0;
  {
    const int offset = (blockIdx.x*32 + tid);
    pressure_array += offset;
    temperature_array += offset;
    mass_frac_array += offset;
    avmolwt_array += offset;
    diffusion_array += offset;
    wdot_array += offset;
  }
  int index_constants[1];
  asm volatile("ld.global.nc.cg.s32 %0,  [%1];" : "=r"(index_constants[0]) : 
    "l"(chem_index+(wid*32+tid+0)) : "memory"); 
  double real_constants[5];
  asm volatile("ld.global.nc.cg.f64 %0,  [%1];" : "=d"(real_constants[0]) : 
    "l"(chem_real+(wid*32+tid+0)) : "memory"); 
  asm volatile("ld.global.nc.cg.f64 %0,  [%1];" : "=d"(real_constants[1]) : 
    "l"(chem_real+(wid*32+tid+256)) : "memory"); 
  asm volatile("ld.global.nc.cg.f64 %0,  [%1];" : "=d"(real_constants[2]) : 
    "l"(chem_real+(wid*32+tid+512)) : "memory"); 
  asm volatile("ld.global.nc.cg.f64 %0,  [%1];" : "=d"(real_constants[3]) : 
    "l"(chem_real+(wid*32+tid+768)) : "memory"); 
  asm volatile("ld.global.nc.cg.f64 %0,  [%1];" : "=d"(real_constants[4]) : 
    "l"(chem_real+(wid*32+tid+1024)) : "memory"); 
  // Main loop
#ifdef DYNAMIC
  for (int step = 0; step < total_steps; step++)
#else
  for (int step = 0; step < TOTAL_STEPS; step++)
#endif
  {
    asm volatile("bar.sync 0, 256;" : : : "memory");
    /* Chemistry */
    double temperature;
    asm volatile("ld.global.nc.cg.f64 %0,  [%1];" : "=d"(temperature) : 
      "l"(temperature_array) : "memory"); 
    double avmolwt;
    asm volatile("ld.global.nc.cg.f64 %0,  [%1];" : "=d"(avmolwt) : 
      "l"(avmolwt_array) : "memory"); 
    double pressure;
    asm volatile("ld.global.nc.cg.f64 %0,  [%1];" : "=d"(pressure) : 
      "l"(pressure_array) : "memory"); 
    double local_mass_frac[4];
    asm volatile("ld.global.nc.cg.f64 %0,  [%1];" : "=d"(local_mass_frac[0]) : 
      "l"(mass_frac_array+(wid+0)*spec_stride) : "memory"); 
    asm volatile("ld.global.nc.cg.f64 %0,  [%1];" : "=d"(local_mass_frac[1]) : 
      "l"(mass_frac_array+(wid+8)*spec_stride) : "memory"); 
    asm volatile("ld.global.nc.cg.f64 %0,  [%1];" : "=d"(local_mass_frac[2]) : 
      "l"(mass_frac_array+(wid+16)*spec_stride) : "memory"); 
    if ((wid+24) < 30)
    asm volatile("ld.global.nc.cg.f64 %0,  [%1];" : "=d"(local_mass_frac[3]) : 
      "l"(mass_frac_array+(wid+24)*spec_stride) : "memory"); 
    const double otc = 1.0 / temperature;
    const double ortc = 1.0 / (temperature * R0c);
    const double vlntemp = log(temperature);
    const double prt     = PA / (R0 * temperature);
    const double oprt    = 1.0 / prt;
    double sumyow = temperature * avmolwt * 7.03444160806564;
    sumyow = pressure/sumyow;
    double local_ctot = 0.0;
    {
      local_mass_frac[0] *= recip_molecular_masses[wid+0+step*step_stride];
      local_mass_frac[0] = (local_mass_frac[0] > 1e-200) ? local_mass_frac[0] : 
        1e-200; 
      double temp_0 = local_mass_frac[0] * sumyow;
      scratch[wid+0][tid] = temp_0;
      local_ctot += temp_0;
    }
    {
      local_mass_frac[1] *= recip_molecular_masses[wid+8+step*step_stride];
      local_mass_frac[1] = (local_mass_frac[1] > 1e-200) ? local_mass_frac[1] : 
        1e-200; 
      double temp_1 = local_mass_frac[1] * sumyow;
      scratch[wid+8][tid] = temp_1;
      local_ctot += temp_1;
    }
    {
      local_mass_frac[2] *= recip_molecular_masses[wid+16+step*step_stride];
      local_mass_frac[2] = (local_mass_frac[2] > 1e-200) ? local_mass_frac[2] : 
        1e-200; 
      double temp_2 = local_mass_frac[2] * sumyow;
      scratch[wid+16][tid] = temp_2;
      local_ctot += temp_2;
    }
    if ((wid+24) < 30)
    {
      local_mass_frac[3] *= recip_molecular_masses[wid+24+step*step_stride];
      local_mass_frac[3] = (local_mass_frac[3] > 1e-200) ? local_mass_frac[3] : 
        1e-200; 
      double temp_3 = local_mass_frac[3] * sumyow;
      scratch[wid+24][tid] = temp_3;
      local_ctot += temp_3;
    }
    scratch[wid+75][tid] = local_ctot;
    asm volatile("bar.sync 0, 256;" : : : "memory");
    if ((threadIdx.x >> 5) == 0)
    {
      double ctot = 0.0;
      ctot += scratch[wid+75][tid];
      ctot += scratch[wid+76][tid];
      ctot += scratch[wid+77][tid];
      ctot += scratch[wid+78][tid];
      ctot += scratch[wid+79][tid];
      ctot += scratch[wid+80][tid];
      ctot += scratch[wid+81][tid];
      ctot += scratch[wid+82][tid];
      double thb_0 = ctot;
      scratch[30][tid] = thb_0;
      double thb_1 = ctot + 1.5*scratch[1][tid] + 11.0*scratch[6][tid] + 
        0.8999999999999999*scratch[8][tid] + 2.8*scratch[17][tid]; 
      scratch[31][tid] = thb_1;
      double thb_2 = ctot + 1.0*scratch[1][tid] + 10.0*scratch[6][tid] + 
        0.8999999999999999*scratch[8][tid] + -0.22*scratch[14][tid] + 
        2.8*scratch[17][tid]; 
      scratch[32][tid] = thb_2;
      double thb_3 = ctot + 1.5*scratch[1][tid] + 5.0*scratch[6][tid] + 
        0.8999999999999999*scratch[8][tid] + 2.8*scratch[17][tid]; 
      scratch[33][tid] = thb_3;
      double thb_4 = ctot + 4.0*scratch[6][tid] + 1.0*scratch[8][tid] + 
        2.0*scratch[17][tid]; 
      scratch[34][tid] = thb_4;
      double thb_5 = ctot + 1.0*scratch[1][tid] + 1.0*scratch[4][tid] + 
        5.0*scratch[6][tid] + 0.5*scratch[8][tid] + 2.0*scratch[12][tid] + 
        1.0*scratch[17][tid]; 
      scratch[35][tid] = thb_5;
      double thb_6 = ctot + -1.0*scratch[6][tid] + -1.0*scratch[8][tid] + 
        -1.0*scratch[17][tid]; 
      scratch[36][tid] = thb_6;
    }
    else
    {
      const double &tk1 = temperature;
      const double &tklog = vlntemp;
      double tk2 = tk1 * tk1;
      double tk3 = tk1 * tk2;
      double tk4 = tk1 * tk3;
      double tk5 = tk1 * tk4;
      {
        int index = wid+-1+step*step_stride;
        if (tk1 > gibbs_temp[index])
        {
          scratch[index+37][tid] = 
            gibbs_high[index][0]*tk1*(-3.787491742782046-tklog) + 
            gibbs_high[index][1]*tk2 + gibbs_high[index][2]*tk3 + 
            gibbs_high[index][3]*tk4 + gibbs_high[index][4]*tk5 + 
            (gibbs_high[index][5] - tk1*gibbs_high[index][6]); 
        }
        else
        {
          scratch[index+37][tid] = 
            gibbs_low[index][0]*tk1*(-3.787491742782046-tklog) + 
            gibbs_low[index][1]*tk2 + gibbs_low[index][2]*tk3 + 
            gibbs_low[index][3]*tk4 + gibbs_low[index][4]*tk5 + 
            (gibbs_low[index][5] - tk1*gibbs_low[index][6]); 
        }
      }
      {
        int index = wid+6+step*step_stride;
        if (tk1 > gibbs_temp[index])
        {
          scratch[index+37][tid] = 
            gibbs_high[index][0]*tk1*(-3.787491742782046-tklog) + 
            gibbs_high[index][1]*tk2 + gibbs_high[index][2]*tk3 + 
            gibbs_high[index][3]*tk4 + gibbs_high[index][4]*tk5 + 
            (gibbs_high[index][5] - tk1*gibbs_high[index][6]); 
        }
        else
        {
          scratch[index+37][tid] = 
            gibbs_low[index][0]*tk1*(-3.787491742782046-tklog) + 
            gibbs_low[index][1]*tk2 + gibbs_low[index][2]*tk3 + 
            gibbs_low[index][3]*tk4 + gibbs_low[index][4]*tk5 + 
            (gibbs_low[index][5] - tk1*gibbs_low[index][6]); 
        }
      }
      {
        int index = wid+13+step*step_stride;
        if (tk1 > gibbs_temp[index])
        {
          scratch[index+37][tid] = 
            gibbs_high[index][0]*tk1*(-3.787491742782046-tklog) + 
            gibbs_high[index][1]*tk2 + gibbs_high[index][2]*tk3 + 
            gibbs_high[index][3]*tk4 + gibbs_high[index][4]*tk5 + 
            (gibbs_high[index][5] - tk1*gibbs_high[index][6]); 
        }
        else
        {
          scratch[index+37][tid] = 
            gibbs_low[index][0]*tk1*(-3.787491742782046-tklog) + 
            gibbs_low[index][1]*tk2 + gibbs_low[index][2]*tk3 + 
            gibbs_low[index][3]*tk4 + gibbs_low[index][4]*tk5 + 
            (gibbs_low[index][5] - tk1*gibbs_low[index][6]); 
        }
      }
      {
        int index = wid+20+step*step_stride;
        if (tk1 > gibbs_temp[index])
        {
          scratch[index+37][tid] = 
            gibbs_high[index][0]*tk1*(-3.787491742782046-tklog) + 
            gibbs_high[index][1]*tk2 + gibbs_high[index][2]*tk3 + 
            gibbs_high[index][3]*tk4 + gibbs_high[index][4]*tk5 + 
            (gibbs_high[index][5] - tk1*gibbs_high[index][6]); 
        }
        else
        {
          scratch[index+37][tid] = 
            gibbs_low[index][0]*tk1*(-3.787491742782046-tklog) + 
            gibbs_low[index][1]*tk2 + gibbs_low[index][2]*tk3 + 
            gibbs_low[index][3]*tk4 + gibbs_low[index][4]*tk5 + 
            (gibbs_low[index][5] - tk1*gibbs_low[index][6]); 
        }
      }
      {
        int index = wid+27+step*step_stride;
        if (tk1 > gibbs_temp[index])
        {
          scratch[index+37][tid] = 
            gibbs_high[index][0]*tk1*(-3.787491742782046-tklog) + 
            gibbs_high[index][1]*tk2 + gibbs_high[index][2]*tk3 + 
            gibbs_high[index][3]*tk4 + gibbs_high[index][4]*tk5 + 
            (gibbs_high[index][5] - tk1*gibbs_high[index][6]); 
        }
        else
        {
          scratch[index+37][tid] = 
            gibbs_low[index][0]*tk1*(-3.787491742782046-tklog) + 
            gibbs_low[index][1]*tk2 + gibbs_low[index][2]*tk3 + 
            gibbs_low[index][3]*tk4 + gibbs_low[index][4]*tk5 + 
            (gibbs_low[index][5] - tk1*gibbs_low[index][6]); 
        }
      }
      if ((wid+34) < 38)
      {
        int index = wid+34+step*step_stride;
        if (tk1 > gibbs_temp[index])
        {
          scratch[index+37][tid] = 
            gibbs_high[index][0]*tk1*(-3.787491742782046-tklog) + 
            gibbs_high[index][1]*tk2 + gibbs_high[index][2]*tk3 + 
            gibbs_high[index][3]*tk4 + gibbs_high[index][4]*tk5 + 
            (gibbs_high[index][5] - tk1*gibbs_high[index][6]); 
        }
        else
        {
          scratch[index+37][tid] = 
            gibbs_low[index][0]*tk1*(-3.787491742782046-tklog) + 
            gibbs_low[index][1]*tk2 + gibbs_low[index][2]*tk3 + 
            gibbs_low[index][3]*tk4 + gibbs_low[index][4]*tk5 + 
            (gibbs_low[index][5] - tk1*gibbs_low[index][6]); 
        }
      }
    }
    asm volatile("bar.sync 0, 256;" : : : "memory");
    double avals[5];
    double denoms[2];
    avals[0] = 0.0;
    avals[1] = 0.0;
    avals[2] = 0.0;
    avals[3] = 0.0;
    avals[4] = 0.0;
    denoms[0] = 0.0;
    denoms[1] = 0.0;
    double rr_f_0 = 0.0,  rr_r_0 = 0.0;
    /* Chemistry for level 0 */
    {
      {
        int hi_part,  lo_part;
        hi_part = __shfl(__double2hiint(real_constants[0]), 0, 32);
        lo_part = __shfl(__double2loint(real_constants[0]), 0, 32);
        double arrhenius = __hiloint2double(hi_part, lo_part) * vlntemp;
        hi_part = __shfl(__double2hiint(real_constants[0]), 1, 32);
        lo_part = __shfl(__double2loint(real_constants[0]), 1, 32);
  arrhenius = __fma_rn(__hiloint2double(hi_part, lo_part),  ortc,  arrhenius); 
        arrhenius = exp(arrhenius);
        hi_part = __shfl(__double2hiint(real_constants[0]), 2, 32);
        lo_part = __shfl(__double2loint(real_constants[0]), 2, 32);
        rr_f_0 = __hiloint2double(hi_part, lo_part) * arrhenius;
      }
      {
        int hi_part,  lo_part;
        hi_part = __shfl(__double2hiint(real_constants[0]), 3, 32);
        lo_part = __shfl(__double2loint(real_constants[0]), 3, 32);
        double arrhenius = __hiloint2double(hi_part, lo_part) * vlntemp;
        hi_part = __shfl(__double2hiint(real_constants[0]), 4, 32);
        lo_part = __shfl(__double2loint(real_constants[0]), 4, 32);
  arrhenius = __fma_rn(__hiloint2double(hi_part, lo_part),  ortc,  arrhenius); 
        arrhenius = exp(arrhenius);
        hi_part = __shfl(__double2hiint(real_constants[0]), 5, 32);
        lo_part = __shfl(__double2loint(real_constants[0]), 5, 32);
        rr_r_0 = __hiloint2double(hi_part, lo_part) * arrhenius;
      }
      if (wid == 0)
      {
        double rr_k0 = rr_f_0;
        double rr_kinf = rr_r_0;
        double pr = rr_k0 / rr_kinf * scratch[32][tid];
        double fcent = log10(0.2 * exp(-1.2e+32 * temperature) + 0.8 * 
          exp(-1.2e-28 * temperature)); 
        double flogpr = log10(pr) - 0.4 - 0.67 * fcent;
        double fdenom = 0.75 - 1.27 * fcent - 0.14 * flogpr;
        double fquan = flogpr / fdenom;
        fquan = fcent / (1.0 + fquan * fquan);
        rr_f_0 = rr_kinf * pr/(1.0 + pr) * exp(fquan*DLn10);
        double xik = -scratch[37][tid] - scratch[56][tid] + scratch[57][tid];
        rr_r_0 = rr_f_0 * exp(xik*otc) * prt;
      }
      else if (wid == 1)
      {
  double xik = scratch[56][tid] - 2.0 * scratch[57][tid] + scratch[58][tid]; 
        rr_r_0 = rr_f_0 * exp(xik*otc);
      }
      else if (wid == 2)
      {
  double xik = scratch[56][tid] - 2.0 * scratch[57][tid] + scratch[58][tid]; 
        rr_r_0 = rr_f_0 * exp(xik*otc);
      }
      else if (wid == 3)
      {
        double rr_k0 = rr_f_0;
        double rr_kinf = rr_r_0;
        double pr = rr_k0 / rr_kinf * scratch[31][tid];
        double fcent = log10(0.5 * exp(-1.2e+32 * temperature) + 0.5 * 
          exp(-1.2e-28 * temperature)); 
        double flogpr = log10(pr) - 0.4 - 0.67 * fcent;
        double fdenom = 0.75 - 1.27 * fcent - 0.14 * flogpr;
        double fquan = flogpr / fdenom;
        fquan = fcent / (1.0 + fquan * fquan);
        rr_f_0 = rr_kinf * pr/(1.0 + pr) * exp(fquan*DLn10);
        double xik = 2.0 * scratch[44][tid] - scratch[58][tid];
        rr_r_0 = rr_f_0 * exp(xik*otc) * oprt;
      }
      else if (wid == 4)
      {
        double xik = -scratch[44][tid] + scratch[45][tid] + scratch[57][tid] - 
          scratch[58][tid]; 
        rr_r_0 = rr_f_0 * exp(xik*otc);
      }
      else if (wid == 5)
      {
        double xik = -scratch[44][tid] + scratch[45][tid] + scratch[57][tid] - 
          scratch[58][tid]; 
        rr_r_0 = rr_f_0 * exp(xik*otc);
      }
      else if (wid == 6)
      {
        double rr_k0 = rr_f_0;
        double rr_kinf = rr_r_0;
        double pr = rr_k0 / rr_kinf * scratch[31][tid];
        rr_f_0 = rr_kinf * pr/(1.0 + pr);
        double xik = -scratch[42][tid] - scratch[48][tid] + scratch[59][tid];
        rr_r_0 = rr_f_0 * exp(xik*otc) * prt;
      }
      else if (wid == 7)
      {
        double rr_k0 = rr_f_0;
        double rr_kinf = rr_r_0;
        double pr = rr_k0 / rr_kinf * scratch[34][tid];
        double fcent = log10(1.0 * exp(-0.2105263157894736 * temperature) + 
          exp(-8.333333333333336e+27 * otc)); 
        double flogpr = log10(pr) - 0.4 - 0.67 * fcent;
        double fdenom = 0.75 - 1.27 * fcent - 0.14 * flogpr;
        double fquan = flogpr / fdenom;
        fquan = fcent / (1.0 + fquan * fquan);
        rr_f_0 = rr_kinf * pr/(1.0 + pr) * exp(fquan*DLn10);
        double xik = -2.0 * scratch[41][tid] + scratch[53][tid];
        rr_r_0 = rr_f_0 * exp(xik*otc) * prt;
      }
    }
    if (wid == 0)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_0 *= mole_frac_NC_H;
      double mole_frac_NC_O2 = scratch[14][tid];
      rr_f_0 *= mole_frac_NC_O2;
      double mole_frac_NC_HO2 = scratch[15][tid];
      rr_r_0 *= mole_frac_NC_HO2;
    }
    else if (wid == 1)
    {
      double mole_frac_NC_HO2 = scratch[15][tid];
      rr_f_0 *= mole_frac_NC_HO2;
      rr_f_0 *= mole_frac_NC_HO2;
      double mole_frac_NC_O2 = scratch[14][tid];
      rr_r_0 *= mole_frac_NC_O2;
      double mole_frac_NC_H2O2 = scratch[16][tid];
      rr_r_0 *= mole_frac_NC_H2O2;
    }
    else if (wid == 2)
    {
      double mole_frac_NC_HO2 = scratch[15][tid];
      rr_f_0 *= mole_frac_NC_HO2;
      rr_f_0 *= mole_frac_NC_HO2;
      double mole_frac_NC_O2 = scratch[14][tid];
      rr_r_0 *= mole_frac_NC_O2;
      double mole_frac_NC_H2O2 = scratch[16][tid];
      rr_r_0 *= mole_frac_NC_H2O2;
    }
    else if (wid == 3)
    {
      double mole_frac_NC_H2O2 = scratch[16][tid];
      rr_f_0 *= mole_frac_NC_H2O2;
      double mole_frac_NC_OH = scratch[5][tid];
      rr_r_0 *= mole_frac_NC_OH;
      rr_r_0 *= mole_frac_NC_OH;
    }
    else if (wid == 4)
    {
      double mole_frac_NC_OH = scratch[5][tid];
      rr_f_0 *= mole_frac_NC_OH;
      double mole_frac_NC_H2O2 = scratch[16][tid];
      rr_f_0 *= mole_frac_NC_H2O2;
      double mole_frac_NC_H2O = scratch[6][tid];
      rr_r_0 *= mole_frac_NC_H2O;
      double mole_frac_NC_HO2 = scratch[15][tid];
      rr_r_0 *= mole_frac_NC_HO2;
    }
    else if (wid == 5)
    {
      double mole_frac_NC_OH = scratch[5][tid];
      rr_f_0 *= mole_frac_NC_OH;
      double mole_frac_NC_H2O2 = scratch[16][tid];
      rr_f_0 *= mole_frac_NC_H2O2;
      double mole_frac_NC_H2O = scratch[6][tid];
      rr_r_0 *= mole_frac_NC_H2O;
      double mole_frac_NC_HO2 = scratch[15][tid];
      rr_r_0 *= mole_frac_NC_HO2;
    }
    else if (wid == 6)
    {
      double mole_frac_NC_O = scratch[3][tid];
      rr_f_0 *= mole_frac_NC_O;
      double mole_frac_NC_CO = scratch[8][tid];
      rr_f_0 *= mole_frac_NC_CO;
      double mole_frac_NC_CO2 = scratch[17][tid];
      rr_r_0 *= mole_frac_NC_CO2;
    }
    else if (wid == 7)
    {
      double mole_frac_NC_CH3 = scratch[2][tid];
      rr_f_0 *= mole_frac_NC_CH3;
      rr_f_0 *= mole_frac_NC_CH3;
      double mole_frac_NC_C2H6 = scratch[12][tid];
      rr_r_0 *= mole_frac_NC_C2H6;
    }
    scratch[wid+75][tid] = rr_f_0;
    scratch[wid+83][tid] = rr_r_0;
    asm volatile("bar.sync 0, 256;" : : : "memory");
    if (wid == 0)
    {
    }
    else if (wid == 1)
    {
    }
    else if (wid == 2)
    {
    }
    else if (wid == 3)
    {
    }
    else if (wid == 4)
    {
    }
    else if (wid == 5)
    {
    }
    else if (wid == 6)
    {
    }
    else if (wid == 7)
    {
    }
    asm volatile("bar.sync 0, 256;" : : : "memory");
    double rr_f_1 = rr_f_0,  rr_r_1 = rr_r_0;
    /* Chemistry for level 1 */
    {
      {
        int hi_part,  lo_part;
        hi_part = __shfl(__double2hiint(real_constants[0]), 6, 32);
        lo_part = __shfl(__double2loint(real_constants[0]), 6, 32);
        double arrhenius = __hiloint2double(hi_part, lo_part) * vlntemp;
        hi_part = __shfl(__double2hiint(real_constants[0]), 7, 32);
        lo_part = __shfl(__double2loint(real_constants[0]), 7, 32);
  arrhenius = __fma_rn(__hiloint2double(hi_part, lo_part),  ortc,  arrhenius); 
        arrhenius = exp(arrhenius);
        hi_part = __shfl(__double2hiint(real_constants[0]), 8, 32);
        lo_part = __shfl(__double2loint(real_constants[0]), 8, 32);
        rr_f_1 = __hiloint2double(hi_part, lo_part) * arrhenius;
      }
      {
        int hi_part,  lo_part;
        hi_part = __shfl(__double2hiint(real_constants[0]), 9, 32);
        lo_part = __shfl(__double2loint(real_constants[0]), 9, 32);
        double arrhenius = __hiloint2double(hi_part, lo_part) * vlntemp;
        hi_part = __shfl(__double2hiint(real_constants[0]), 10, 32);
        lo_part = __shfl(__double2loint(real_constants[0]), 10, 32);
  arrhenius = __fma_rn(__hiloint2double(hi_part, lo_part),  ortc,  arrhenius); 
        arrhenius = exp(arrhenius);
        hi_part = __shfl(__double2hiint(real_constants[0]), 11, 32);
        lo_part = __shfl(__double2loint(real_constants[0]), 11, 32);
        rr_r_1 = __hiloint2double(hi_part, lo_part) * arrhenius;
      }
      if (wid == 0)
      {
        double rr_k0 = rr_f_1;
        double rr_kinf = rr_r_1;
        double pr = rr_k0 / rr_kinf * scratch[35][tid];
  double fcent = log10(0.217 * exp(-1.621621621621621 * temperature) + 0.783 
          * exp(-0.0408024481468888 * temperature) + exp(-58.03333333333335 * 
          otc)); 
        double flogpr = log10(pr) - 0.4 - 0.67 * fcent;
        double fdenom = 0.75 - 1.27 * fcent - 0.14 * flogpr;
        double fquan = flogpr / fdenom;
        fquan = fcent / (1.0 + fquan * fquan);
        rr_f_1 = rr_kinf * pr/(1.0 + pr) * exp(fquan*DLn10);
        double xik = -scratch[37][tid] - scratch[41][tid] + scratch[43][tid];
        rr_r_1 = rr_f_1 * exp(xik*otc) * prt;
      }
      else if (wid == 1)
      {
        double xik = scratch[52][tid] - scratch[54][tid] - scratch[56][tid] + 
          scratch[57][tid]; 
        rr_r_1 = rr_f_1 * exp(xik*otc);
      }
      else if (wid == 2)
      {
        double xik = scratch[52][tid] - scratch[54][tid] - scratch[56][tid] + 
          scratch[57][tid]; 
        rr_r_1 = rr_f_1 * exp(xik*otc);
      }
      else if (wid == 3)
      {
        double xik = scratch[52][tid] - scratch[55][tid] - scratch[56][tid] + 
          scratch[57][tid]; 
        rr_r_1 = rr_f_1 * exp(xik*otc);
      }
      else if (wid == 4)
      {
        double xik = scratch[52][tid] - scratch[55][tid] - scratch[56][tid] + 
          scratch[57][tid]; 
        rr_r_1 = rr_f_1 * exp(xik*otc);
      }
      else if (wid == 5)
      {
        double rr_k0 = rr_f_1;
        double rr_kinf = rr_r_1;
        double pr = rr_k0 / rr_kinf * scratch[35][tid];
        double fcent = log10(0.1578000000000001 * exp(-0.9599999999999997 * 
          temperature) + 0.8421999999999999 * exp(-0.05407841369986479 * 
          temperature) + exp(-57.35000000000002 * otc)); 
        double flogpr = log10(pr) - 0.4 - 0.67 * fcent;
        double fdenom = 0.75 - 1.27 * fcent - 0.14 * flogpr;
        double fquan = flogpr / fdenom;
        fquan = fcent / (1.0 + fquan * fquan);
        rr_f_1 = rr_kinf * pr/(1.0 + pr) * exp(fquan*DLn10);
        double xik = -scratch[37][tid] - scratch[51][tid] + scratch[53][tid];
        rr_r_1 = rr_f_1 * exp(xik*otc) * prt;
      }
      else if (wid == 6)
      {
        double rr_k0 = rr_f_1;
        double rr_kinf = rr_r_1;
        double pr = rr_k0 / rr_kinf * scratch[35][tid];
        double fcent = log10(0.2655 * exp(-0.6666666666666665 * temperature) + 
  0.7345 * exp(-0.1159420289855072 * temperature) + exp(-45.14166666666668 
          * otc)); 
        double flogpr = log10(pr) - 0.4 - 0.67 * fcent;
        double fdenom = 0.75 - 1.27 * fcent - 0.14 * flogpr;
        double fquan = flogpr / fdenom;
        fquan = fcent / (1.0 + fquan * fquan);
        rr_f_1 = rr_kinf * pr/(1.0 + pr) * exp(fquan*DLn10);
        double xik = scratch[38][tid] + scratch[46][tid] - scratch[49][tid];
        rr_r_1 = rr_f_1 * exp(xik*otc) * oprt;
      }
      else if (wid == 7)
      {
        double rr_k0 = rr_f_1;
        double rr_kinf = rr_r_1;
        double pr = rr_k0 / rr_kinf * scratch[35][tid];
        double fcent = log10(0.02470000000000006 * exp(-0.5714285714285713 * 
          temperature) + 0.9752999999999999 * exp(-0.1219512195121951 * 
          temperature) + exp(-36.45000000000001 * otc)); 
        double flogpr = log10(pr) - 0.4 - 0.67 * fcent;
        double fdenom = 0.75 - 1.27 * fcent - 0.14 * flogpr;
        double fquan = flogpr / fdenom;
        fquan = fcent / (1.0 + fquan * fquan);
        rr_f_1 = rr_kinf * pr/(1.0 + pr) * exp(fquan*DLn10);
        double xik = -scratch[37][tid] - scratch[49][tid] + scratch[51][tid];
        rr_r_1 = rr_f_1 * exp(xik*otc) * prt;
      }
    }
    if (wid == 0)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_1 *= mole_frac_NC_H;
      double mole_frac_NC_CH3 = scratch[2][tid];
      rr_f_1 *= mole_frac_NC_CH3;
      double mole_frac_NC_CH4 = scratch[4][tid];
      rr_r_1 *= mole_frac_NC_CH4;
    }
    else if (wid == 1)
    {
      double mole_frac_NC_O2 = scratch[14][tid];
      rr_f_1 *= mole_frac_NC_O2;
      double mole_frac_NC_CH2O = scratch[11][tid];
      rr_r_1 *= mole_frac_NC_CH2O;
      double mole_frac_NC_HO2 = scratch[15][tid];
      rr_r_1 *= mole_frac_NC_HO2;
    }
    else if (wid == 2)
    {
      double mole_frac_NC_O2 = scratch[14][tid];
      rr_f_1 *= mole_frac_NC_O2;
      double mole_frac_NC_CH2O = scratch[11][tid];
      rr_r_1 *= mole_frac_NC_CH2O;
      double mole_frac_NC_HO2 = scratch[15][tid];
      rr_r_1 *= mole_frac_NC_HO2;
    }
    else if (wid == 3)
    {
      double mole_frac_NC_CH3O = scratch[13][tid];
      rr_f_1 *= mole_frac_NC_CH3O;
      double mole_frac_NC_O2 = scratch[14][tid];
      rr_f_1 *= mole_frac_NC_O2;
      double mole_frac_NC_CH2O = scratch[11][tid];
      rr_r_1 *= mole_frac_NC_CH2O;
      double mole_frac_NC_HO2 = scratch[15][tid];
      rr_r_1 *= mole_frac_NC_HO2;
    }
    else if (wid == 4)
    {
      double mole_frac_NC_CH3O = scratch[13][tid];
      rr_f_1 *= mole_frac_NC_CH3O;
      double mole_frac_NC_O2 = scratch[14][tid];
      rr_f_1 *= mole_frac_NC_O2;
      double mole_frac_NC_CH2O = scratch[11][tid];
      rr_r_1 *= mole_frac_NC_CH2O;
      double mole_frac_NC_HO2 = scratch[15][tid];
      rr_r_1 *= mole_frac_NC_HO2;
    }
    else if (wid == 5)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_1 *= mole_frac_NC_H;
      double mole_frac_NC_C2H5 = scratch[10][tid];
      rr_f_1 *= mole_frac_NC_C2H5;
      double mole_frac_NC_C2H6 = scratch[12][tid];
      rr_r_1 *= mole_frac_NC_C2H6;
    }
    else if (wid == 6)
    {
      double mole_frac_NC_C2H4 = scratch[9][tid];
      rr_f_1 *= mole_frac_NC_C2H4;
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_r_1 *= mole_frac_NC_H2;
      double mole_frac_NC_C2H2 = scratch[7][tid];
      rr_r_1 *= mole_frac_NC_C2H2;
    }
    else if (wid == 7)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_1 *= mole_frac_NC_H;
      double mole_frac_NC_C2H4 = scratch[9][tid];
      rr_f_1 *= mole_frac_NC_C2H4;
      double mole_frac_NC_C2H5 = scratch[10][tid];
      rr_r_1 *= mole_frac_NC_C2H5;
    }
    scratch[wid+75][tid] = rr_f_1;
    scratch[wid+83][tid] = rr_r_1;
    asm volatile("bar.sync 0, 256;" : : : "memory");
    if (wid == 0)
    {
    }
    else if (wid == 1)
    {
    }
    else if (wid == 2)
    {
    }
    else if (wid == 3)
    {
    }
    else if (wid == 4)
    {
    }
    else if (wid == 5)
    {
    }
    else if (wid == 6)
    {
      double rate_84 = scratch[84][tid];
      avals[0] += rate_84;
      double rate_85 = scratch[85][tid];
      avals[0] += rate_85;
      double rate_76 = scratch[76][tid];
      denoms[0] += rate_76;
      double rate_77 = scratch[77][tid];
      denoms[0] += rate_77;
    }
    else if (wid == 7)
    {
    }
    asm volatile("bar.sync 0, 256;" : : : "memory");
    double rr_f_2 = rr_f_1,  rr_r_2 = rr_r_1;
    /* Chemistry for level 2 */
    {
      {
        int hi_part,  lo_part;
        hi_part = __shfl(__double2hiint(real_constants[0]), 12, 32);
        lo_part = __shfl(__double2loint(real_constants[0]), 12, 32);
        double arrhenius = __hiloint2double(hi_part, lo_part) * vlntemp;
        hi_part = __shfl(__double2hiint(real_constants[0]), 13, 32);
        lo_part = __shfl(__double2loint(real_constants[0]), 13, 32);
  arrhenius = __fma_rn(__hiloint2double(hi_part, lo_part),  ortc,  arrhenius); 
        arrhenius = exp(arrhenius);
        hi_part = __shfl(__double2hiint(real_constants[0]), 14, 32);
        lo_part = __shfl(__double2loint(real_constants[0]), 14, 32);
        rr_f_2 = __hiloint2double(hi_part, lo_part) * arrhenius;
      }
      {
        int hi_part,  lo_part;
        hi_part = __shfl(__double2hiint(real_constants[0]), 15, 32);
        lo_part = __shfl(__double2loint(real_constants[0]), 15, 32);
        double arrhenius = __hiloint2double(hi_part, lo_part) * vlntemp;
        hi_part = __shfl(__double2hiint(real_constants[0]), 16, 32);
        lo_part = __shfl(__double2loint(real_constants[0]), 16, 32);
  arrhenius = __fma_rn(__hiloint2double(hi_part, lo_part),  ortc,  arrhenius); 
        arrhenius = exp(arrhenius);
        hi_part = __shfl(__double2hiint(real_constants[0]), 17, 32);
        lo_part = __shfl(__double2loint(real_constants[0]), 17, 32);
        rr_r_2 = __hiloint2double(hi_part, lo_part) * arrhenius;
      }
      if (wid == 0)
      {
        double rr_k0 = rr_f_2;
        double rr_kinf = rr_r_2;
        double pr = rr_k0 / rr_kinf * scratch[35][tid];
        double fcent = log10(0.218 * exp(-0.5783132530120481 * temperature) + 
  0.782 * exp(-0.04506196019526848 * temperature) + exp(-50.79166666666668 
          * otc)); 
        double flogpr = log10(pr) - 0.4 - 0.67 * fcent;
        double fdenom = 0.75 - 1.27 * fcent - 0.14 * flogpr;
        double fquan = flogpr / fdenom;
        fquan = fcent / (1.0 + fquan * fquan);
        rr_f_2 = rr_kinf * pr/(1.0 + pr) * exp(fquan*DLn10);
        double xik = -scratch[37][tid] - scratch[47][tid] + scratch[49][tid];
        rr_r_2 = rr_f_2 * exp(xik*otc) * prt;
      }
      else if (wid == 1)
      {
        double rr_k0 = rr_f_2;
        double rr_kinf = rr_r_2;
        double pr = rr_k0 / rr_kinf * scratch[35][tid];
        double fcent = log10(0.2493 * exp(-1.218274111675127 * temperature) + 
  0.7507 * exp(-0.0921658986175115 * temperature) + exp(-34.72500000000001 
          * otc)); 
        double flogpr = log10(pr) - 0.4 - 0.67 * fcent;
        double fdenom = 0.75 - 1.27 * fcent - 0.14 * flogpr;
        double fquan = flogpr / fdenom;
        fquan = fcent / (1.0 + fquan * fquan);
        rr_f_2 = rr_kinf * pr/(1.0 + pr) * exp(fquan*DLn10);
        double xik = -scratch[37][tid] - scratch[46][tid] + scratch[47][tid];
        rr_r_2 = rr_f_2 * exp(xik*otc) * prt;
      }
      else if (wid == 2)
      {
        double rr_k0 = rr_f_2;
        double rr_kinf = rr_r_2;
        double pr = rr_k0 / rr_kinf * scratch[35][tid];
  double fcent = log10(0.32 * exp(-1.538461538461538 * temperature) + 0.68 * 
          exp(-0.06015037593984961 * temperature) + exp(-46.58333333333334 * 
          otc)); 
        double flogpr = log10(pr) - 0.4 - 0.67 * fcent;
        double fdenom = 0.75 - 1.27 * fcent - 0.14 * flogpr;
        double fquan = flogpr / fdenom;
        fquan = fcent / (1.0 + fquan * fquan);
        rr_f_2 = rr_kinf * pr/(1.0 + pr) * exp(fquan*DLn10);
        double xik = -scratch[37][tid] - scratch[39][tid] + scratch[41][tid];
        rr_r_2 = rr_f_2 * exp(xik*otc) * prt;
      }
    }
    if (wid == 0)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_2 *= mole_frac_NC_H;
      double mole_frac_NC_C2H4 = scratch[9][tid];
      rr_r_2 *= mole_frac_NC_C2H4;
    }
    else if (wid == 1)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_2 *= mole_frac_NC_H;
      double mole_frac_NC_C2H2 = scratch[7][tid];
      rr_f_2 *= mole_frac_NC_C2H2;
    }
    else if (wid == 2)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_2 *= mole_frac_NC_H;
      double mole_frac_NC_CH3 = scratch[2][tid];
      rr_r_2 *= mole_frac_NC_CH3;
    }
    else if (wid == 3)
    {
      double thb_3 = scratch[33][tid];
      rr_f_2 *= thb_3;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_2 *= mole_frac_NC_H;
      double mole_frac_NC_CO = scratch[8][tid];
      rr_r_2 *= mole_frac_NC_CO;
      rr_r_2 *= thb_3;
    }
    else if (wid == 4)
    {
      double mole_frac_NC_O2 = scratch[14][tid];
      rr_f_2 *= mole_frac_NC_O2;
      double mole_frac_NC_CO = scratch[8][tid];
      rr_r_2 *= mole_frac_NC_CO;
      double mole_frac_NC_HO2 = scratch[15][tid];
      rr_r_2 *= mole_frac_NC_HO2;
    }
    else if (wid == 5)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_2 *= mole_frac_NC_H;
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_r_2 *= mole_frac_NC_H2;
      double mole_frac_NC_CO = scratch[8][tid];
      rr_r_2 *= mole_frac_NC_CO;
    }
    else if (wid == 6)
    {
      double mole_frac_NC_O = scratch[3][tid];
      rr_f_2 *= mole_frac_NC_O;
      double mole_frac_NC_OH = scratch[5][tid];
      rr_r_2 *= mole_frac_NC_OH;
      double mole_frac_NC_CO = scratch[8][tid];
      rr_r_2 *= mole_frac_NC_CO;
    }
    else if (wid == 7)
    {
      double mole_frac_NC_OH = scratch[5][tid];
      rr_f_2 *= mole_frac_NC_OH;
      double mole_frac_NC_H2O = scratch[6][tid];
      rr_r_2 *= mole_frac_NC_H2O;
      double mole_frac_NC_CO = scratch[8][tid];
      rr_r_2 *= mole_frac_NC_CO;
    }
    scratch[wid+75][tid] = rr_f_2;
    scratch[wid+83][tid] = rr_r_2;
    asm volatile("bar.sync 0, 256;" : : : "memory");
    if (wid == 0)
    {
      double rate_85 = scratch[85][tid];
      avals[0] += rate_85;
      double rate_77 = scratch[77][tid];
      denoms[0] += rate_77;
    }
    else if (wid == 1)
    {
    }
    else if (wid == 2)
    {
      double rate_76 = scratch[76][tid];
      avals[0] += rate_76;
      double rate_83 = scratch[83][tid];
      avals[0] += rate_83;
      double rate_75 = scratch[75][tid];
      denoms[0] += rate_75;
      double rate_84 = scratch[84][tid];
      denoms[0] += rate_84;
    }
    else if (wid == 3)
    {
      double rate_86 = scratch[86][tid];
      avals[0] += rate_86;
      double rate_87 = scratch[87][tid];
      avals[0] += rate_87;
      double rate_88 = scratch[88][tid];
      avals[0] += rate_88;
      double rate_89 = scratch[89][tid];
      avals[0] += rate_89;
      double rate_90 = scratch[90][tid];
      avals[0] += rate_90;
      double rate_78 = scratch[78][tid];
      denoms[0] += rate_78;
      double rate_79 = scratch[79][tid];
      denoms[0] += rate_79;
      double rate_80 = scratch[80][tid];
      denoms[0] += rate_80;
      double rate_81 = scratch[81][tid];
      denoms[0] += rate_81;
      double rate_82 = scratch[82][tid];
      denoms[0] += rate_82;
    }
    else if (wid == 4)
    {
    }
    else if (wid == 5)
    {
    }
    else if (wid == 6)
    {
    }
    else if (wid == 7)
    {
    }
    asm volatile("bar.sync 0, 256;" : : : "memory");
    double rr_f_3 = rr_f_2,  rr_r_3 = rr_r_2;
    /* Chemistry for level 3 */
    {
      {
        int hi_part,  lo_part;
        hi_part = __shfl(__double2hiint(real_constants[0]), 18, 32);
        lo_part = __shfl(__double2loint(real_constants[0]), 18, 32);
        double arrhenius = __hiloint2double(hi_part, lo_part) * vlntemp;
        hi_part = __shfl(__double2hiint(real_constants[0]), 19, 32);
        lo_part = __shfl(__double2loint(real_constants[0]), 19, 32);
  arrhenius = __fma_rn(__hiloint2double(hi_part, lo_part),  ortc,  arrhenius); 
        arrhenius = exp(arrhenius);
        hi_part = __shfl(__double2hiint(real_constants[0]), 20, 32);
        lo_part = __shfl(__double2loint(real_constants[0]), 20, 32);
        rr_f_3 = __hiloint2double(hi_part, lo_part) * arrhenius;
      }
      {
        int hi_part,  lo_part;
        hi_part = __shfl(__double2hiint(real_constants[0]), 21, 32);
        lo_part = __shfl(__double2loint(real_constants[0]), 21, 32);
        double arrhenius = __hiloint2double(hi_part, lo_part) * vlntemp;
        hi_part = __shfl(__double2hiint(real_constants[0]), 22, 32);
        lo_part = __shfl(__double2loint(real_constants[0]), 22, 32);
  arrhenius = __fma_rn(__hiloint2double(hi_part, lo_part),  ortc,  arrhenius); 
        arrhenius = exp(arrhenius);
        hi_part = __shfl(__double2hiint(real_constants[0]), 23, 32);
        lo_part = __shfl(__double2loint(real_constants[0]), 23, 32);
        rr_r_3 = __hiloint2double(hi_part, lo_part) * arrhenius;
      }
    }
    if (wid == 0)
    {
      double mole_frac_NC_O = scratch[3][tid];
      rr_f_3 *= mole_frac_NC_O;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_3 *= mole_frac_NC_H;
      double mole_frac_NC_CO2 = scratch[17][tid];
      rr_r_3 *= mole_frac_NC_CO2;
    }
    else if (wid == 1)
    {
      double mole_frac_NC_HO2 = scratch[15][tid];
      rr_f_3 *= mole_frac_NC_HO2;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_3 *= mole_frac_NC_H;
      double mole_frac_NC_OH = scratch[5][tid];
      rr_r_3 *= mole_frac_NC_OH;
      double mole_frac_NC_CO2 = scratch[17][tid];
      rr_r_3 *= mole_frac_NC_CO2;
    }
    else if (wid == 2)
    {
      rr_f_3 = 0.0;
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_r_3 *= mole_frac_NC_H2;
      double mole_frac_NC_CO = scratch[8][tid];
      rr_r_3 *= mole_frac_NC_CO;
      rr_r_3 *= mole_frac_NC_CO;
    }
    else if (wid == 3)
    {
      double mole_frac_NC_CH3 = scratch[2][tid];
      rr_f_3 *= mole_frac_NC_CH3;
      double mole_frac_NC_CH4 = scratch[4][tid];
      rr_r_3 *= mole_frac_NC_CH4;
      double mole_frac_NC_CO = scratch[8][tid];
      rr_r_3 *= mole_frac_NC_CO;
    }
    else if (wid == 4)
    {
      rr_f_3 = 0.0;
      double mole_frac_NC_CO = scratch[8][tid];
      rr_r_3 *= mole_frac_NC_CO;
      double mole_frac_NC_CH2O = scratch[11][tid];
      rr_r_3 *= mole_frac_NC_CH2O;
    }
    else if (wid == 5)
    {
      double mole_frac_NC_CH2O = scratch[11][tid];
      rr_f_3 *= mole_frac_NC_CH2O;
      double thb_1 = scratch[31][tid];
      rr_f_3 *= thb_1;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_3 *= mole_frac_NC_H;
      rr_r_3 *= thb_1;
    }
    else if (wid == 6)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_3 *= mole_frac_NC_H;
      double mole_frac_NC_CH2O = scratch[11][tid];
      rr_f_3 *= mole_frac_NC_CH2O;
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_r_3 *= mole_frac_NC_H2;
    }
    else if (wid == 7)
    {
      double mole_frac_NC_O = scratch[3][tid];
      rr_f_3 *= mole_frac_NC_O;
      double mole_frac_NC_CH2O = scratch[11][tid];
      rr_f_3 *= mole_frac_NC_CH2O;
      double mole_frac_NC_OH = scratch[5][tid];
      rr_r_3 *= mole_frac_NC_OH;
    }
    scratch[wid+75][tid] = rr_f_3;
    scratch[wid+83][tid] = rr_r_3;
    asm volatile("bar.sync 0, 256;" : : : "memory");
    if (wid == 0)
    {
    }
    else if (wid == 1)
    {
    }
    else if (wid == 2)
    {
    }
    else if (wid == 3)
    {
      double rate_80 = scratch[80][tid];
      avals[0] += rate_80;
      double rate_81 = scratch[81][tid];
      avals[0] += rate_81;
      double rate_82 = scratch[82][tid];
      avals[0] += rate_82;
      double rate_84 = scratch[84][tid];
      avals[0] += rate_84;
      double rate_83 = scratch[83][tid];
      avals[0] += rate_83;
      double rate_85 = scratch[85][tid];
      avals[0] = __fma_rn(2.0, rate_85, avals[0]);
      double rate_86 = scratch[86][tid];
      avals[0] += rate_86;
      double rate_87 = scratch[87][tid];
      avals[0] = __fma_rn(2.0, rate_87, avals[0]);
      double rate_76 = scratch[76][tid];
      denoms[0] += rate_76;
      double rate_75 = scratch[75][tid];
      denoms[0] += rate_75;
      double rate_78 = scratch[78][tid];
      denoms[0] += rate_78;
      double rate_88 = scratch[88][tid];
      denoms[0] += rate_88;
      double rate_89 = scratch[89][tid];
      denoms[0] += rate_89;
      double rate_90 = scratch[90][tid];
      denoms[0] += rate_90;
    }
    else if (wid == 4)
    {
    }
    else if (wid == 5)
    {
    }
    else if (wid == 6)
    {
    }
    else if (wid == 7)
    {
    }
    asm volatile("bar.sync 0, 256;" : : : "memory");
    double rr_f_4 = rr_f_3,  rr_r_4 = rr_r_3;
    /* Chemistry for level 4 */
    {
      {
        int hi_part,  lo_part;
        hi_part = __shfl(__double2hiint(real_constants[0]), 24, 32);
        lo_part = __shfl(__double2loint(real_constants[0]), 24, 32);
        double arrhenius = __hiloint2double(hi_part, lo_part) * vlntemp;
        hi_part = __shfl(__double2hiint(real_constants[0]), 25, 32);
        lo_part = __shfl(__double2loint(real_constants[0]), 25, 32);
  arrhenius = __fma_rn(__hiloint2double(hi_part, lo_part),  ortc,  arrhenius); 
        arrhenius = exp(arrhenius);
        hi_part = __shfl(__double2hiint(real_constants[0]), 26, 32);
        lo_part = __shfl(__double2loint(real_constants[0]), 26, 32);
        rr_f_4 = __hiloint2double(hi_part, lo_part) * arrhenius;
      }
      {
        int hi_part,  lo_part;
        hi_part = __shfl(__double2hiint(real_constants[0]), 27, 32);
        lo_part = __shfl(__double2loint(real_constants[0]), 27, 32);
        double arrhenius = __hiloint2double(hi_part, lo_part) * vlntemp;
        hi_part = __shfl(__double2hiint(real_constants[0]), 28, 32);
        lo_part = __shfl(__double2loint(real_constants[0]), 28, 32);
  arrhenius = __fma_rn(__hiloint2double(hi_part, lo_part),  ortc,  arrhenius); 
        arrhenius = exp(arrhenius);
        hi_part = __shfl(__double2hiint(real_constants[0]), 29, 32);
        lo_part = __shfl(__double2loint(real_constants[0]), 29, 32);
        rr_r_4 = __hiloint2double(hi_part, lo_part) * arrhenius;
      }
    }
    if (wid == 0)
    {
      double mole_frac_NC_OH = scratch[5][tid];
      rr_f_4 *= mole_frac_NC_OH;
      double mole_frac_NC_CH2O = scratch[11][tid];
      rr_f_4 *= mole_frac_NC_CH2O;
      double mole_frac_NC_H2O = scratch[6][tid];
      rr_r_4 *= mole_frac_NC_H2O;
    }
    else if (wid == 1)
    {
      double mole_frac_NC_CH2O = scratch[11][tid];
      rr_f_4 *= mole_frac_NC_CH2O;
      double mole_frac_NC_O2 = scratch[14][tid];
      rr_f_4 *= mole_frac_NC_O2;
      double mole_frac_NC_HO2 = scratch[15][tid];
      rr_r_4 *= mole_frac_NC_HO2;
    }
    else if (wid == 2)
    {
      double mole_frac_NC_CH2O = scratch[11][tid];
      rr_f_4 *= mole_frac_NC_CH2O;
      double mole_frac_NC_HO2 = scratch[15][tid];
      rr_f_4 *= mole_frac_NC_HO2;
      double mole_frac_NC_H2O2 = scratch[16][tid];
      rr_r_4 *= mole_frac_NC_H2O2;
    }
    else if (wid == 3)
    {
      double mole_frac_NC_CH3 = scratch[2][tid];
      rr_f_4 *= mole_frac_NC_CH3;
      double mole_frac_NC_CH2O = scratch[11][tid];
      rr_f_4 *= mole_frac_NC_CH2O;
      double mole_frac_NC_CH4 = scratch[4][tid];
      rr_r_4 *= mole_frac_NC_CH4;
    }
    else if (wid == 4)
    {
      double thb_0 = scratch[30][tid];
      rr_f_4 *= thb_0;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_4 *= mole_frac_NC_H;
      double mole_frac_NC_CH2O = scratch[11][tid];
      rr_r_4 *= mole_frac_NC_CH2O;
      rr_r_4 *= thb_0;
    }
    else if (wid == 5)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_4 *= mole_frac_NC_H;
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_r_4 *= mole_frac_NC_H2;
      double mole_frac_NC_CH2O = scratch[11][tid];
      rr_r_4 *= mole_frac_NC_CH2O;
    }
    else if (wid == 6)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_4 *= mole_frac_NC_H;
      double mole_frac_NC_CH3 = scratch[2][tid];
      rr_r_4 *= mole_frac_NC_CH3;
      double mole_frac_NC_OH = scratch[5][tid];
      rr_r_4 *= mole_frac_NC_OH;
    }
    else if (wid == 7)
    {
      double mole_frac_NC_O = scratch[3][tid];
      rr_f_4 *= mole_frac_NC_O;
      double mole_frac_NC_OH = scratch[5][tid];
      rr_r_4 *= mole_frac_NC_OH;
      double mole_frac_NC_CH2O = scratch[11][tid];
      rr_r_4 *= mole_frac_NC_CH2O;
    }
    scratch[wid+75][tid] = rr_f_4;
    scratch[wid+83][tid] = rr_r_4;
    asm volatile("bar.sync 0, 256;" : : : "memory");
    if (wid == 0)
    {
    }
    else if (wid == 1)
    {
    }
    else if (wid == 2)
    {
    }
    else if (wid == 3)
    {
      double rate_75 = scratch[75][tid];
      avals[0] += rate_75;
      double rate_76 = scratch[76][tid];
      avals[0] += rate_76;
      double rate_77 = scratch[77][tid];
      avals[0] += rate_77;
      double rate_78 = scratch[78][tid];
      avals[0] += rate_78;
      double rate_83 = scratch[83][tid];
      denoms[0] += rate_83;
      double rate_84 = scratch[84][tid];
      denoms[0] += rate_84;
      double rate_85 = scratch[85][tid];
      denoms[0] += rate_85;
      double rate_86 = scratch[86][tid];
      denoms[0] += rate_86;
    }
    else if (wid == 4)
    {
    }
    else if (wid == 5)
    {
    }
    else if (wid == 6)
    {
      double rate_87 = scratch[87][tid];
      avals[0] += rate_87;
      double rate_88 = scratch[88][tid];
      avals[0] += rate_88;
      double rate_89 = scratch[89][tid];
      avals[0] += rate_89;
      double rate_90 = scratch[90][tid];
      avals[0] += rate_90;
      double rate_79 = scratch[79][tid];
      denoms[0] += rate_79;
      double rate_80 = scratch[80][tid];
      denoms[0] += rate_80;
      double rate_81 = scratch[81][tid];
      denoms[0] += rate_81;
      double rate_82 = scratch[82][tid];
      denoms[0] += rate_82;
    }
    else if (wid == 7)
    {
    }
    asm volatile("bar.sync 0, 256;" : : : "memory");
    double rr_f_5 = rr_f_4,  rr_r_5 = rr_r_4;
    /* Chemistry for level 5 */
    {
      {
        int hi_part,  lo_part;
        hi_part = __shfl(__double2hiint(real_constants[0]), 30, 32);
        lo_part = __shfl(__double2loint(real_constants[0]), 30, 32);
        double arrhenius = __hiloint2double(hi_part, lo_part) * vlntemp;
        hi_part = __shfl(__double2hiint(real_constants[0]), 31, 32);
        lo_part = __shfl(__double2loint(real_constants[0]), 31, 32);
  arrhenius = __fma_rn(__hiloint2double(hi_part, lo_part),  ortc,  arrhenius); 
        arrhenius = exp(arrhenius);
        hi_part = __shfl(__double2hiint(real_constants[1]), 0, 32);
        lo_part = __shfl(__double2loint(real_constants[1]), 0, 32);
        rr_f_5 = __hiloint2double(hi_part, lo_part) * arrhenius;
      }
      {
        int hi_part,  lo_part;
        hi_part = __shfl(__double2hiint(real_constants[1]), 1, 32);
        lo_part = __shfl(__double2loint(real_constants[1]), 1, 32);
        double arrhenius = __hiloint2double(hi_part, lo_part) * vlntemp;
        hi_part = __shfl(__double2hiint(real_constants[1]), 2, 32);
        lo_part = __shfl(__double2loint(real_constants[1]), 2, 32);
  arrhenius = __fma_rn(__hiloint2double(hi_part, lo_part),  ortc,  arrhenius); 
        arrhenius = exp(arrhenius);
        hi_part = __shfl(__double2hiint(real_constants[1]), 3, 32);
        lo_part = __shfl(__double2loint(real_constants[1]), 3, 32);
        rr_r_5 = __hiloint2double(hi_part, lo_part) * arrhenius;
      }
    }
    if (wid == 0)
    {
      double mole_frac_NC_OH = scratch[5][tid];
      rr_f_5 *= mole_frac_NC_OH;
      double mole_frac_NC_H2O = scratch[6][tid];
      rr_r_5 *= mole_frac_NC_H2O;
      double mole_frac_NC_CH2O = scratch[11][tid];
      rr_r_5 *= mole_frac_NC_CH2O;
    }
    else if (wid == 1)
    {
      double mole_frac_NC_HO2 = scratch[15][tid];
      rr_f_5 *= mole_frac_NC_HO2;
      double mole_frac_NC_CH2O = scratch[11][tid];
      rr_r_5 *= mole_frac_NC_CH2O;
      double mole_frac_NC_H2O2 = scratch[16][tid];
      rr_r_5 *= mole_frac_NC_H2O2;
    }
    else if (wid == 2)
    {
      rr_f_5 = 0.0;
      double mole_frac_NC_CH2O = scratch[11][tid];
      rr_r_5 *= mole_frac_NC_CH2O;
      rr_r_5 *= mole_frac_NC_CH2O;
    }
    else if (wid == 3)
    {
      double mole_frac_NC_CH4 = scratch[4][tid];
      rr_f_5 *= mole_frac_NC_CH4;
      double mole_frac_NC_CH3 = scratch[2][tid];
      rr_r_5 *= mole_frac_NC_CH3;
      rr_r_5 *= mole_frac_NC_CH3;
    }
    else if (wid == 4)
    {
      double mole_frac_NC_CH4 = scratch[4][tid];
      rr_f_5 *= mole_frac_NC_CH4;
      double mole_frac_NC_CH3 = scratch[2][tid];
      rr_r_5 *= mole_frac_NC_CH3;
      rr_r_5 *= mole_frac_NC_CH3;
    }
    else if (wid == 5)
    {
      double mole_frac_NC_CH3 = scratch[2][tid];
      rr_f_5 *= mole_frac_NC_CH3;
      double mole_frac_NC_OH = scratch[5][tid];
      rr_f_5 *= mole_frac_NC_OH;
      double mole_frac_NC_H2O = scratch[6][tid];
      rr_r_5 *= mole_frac_NC_H2O;
    }
    else if (wid == 6)
    {
      double mole_frac_NC_CH3 = scratch[2][tid];
      rr_f_5 *= mole_frac_NC_CH3;
      double mole_frac_NC_OH = scratch[5][tid];
      rr_f_5 *= mole_frac_NC_OH;
      double mole_frac_NC_H2O = scratch[6][tid];
      rr_r_5 *= mole_frac_NC_H2O;
    }
    else if (wid == 7)
    {
      double mole_frac_NC_CH3 = scratch[2][tid];
      rr_f_5 *= mole_frac_NC_CH3;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_5 *= mole_frac_NC_H;
      double mole_frac_NC_C2H4 = scratch[9][tid];
      rr_r_5 *= mole_frac_NC_C2H4;
    }
    scratch[wid+75][tid] = rr_f_5;
    scratch[wid+83][tid] = rr_r_5;
    asm volatile("bar.sync 0, 256;" : : : "memory");
    if (wid == 0)
    {
      double rate_80 = scratch[80][tid];
      avals[0] += rate_80;
      double rate_86 = scratch[86][tid];
      avals[0] += rate_86;
      double rate_90 = scratch[90][tid];
      avals[0] += rate_90;
      double rate_78 = scratch[78][tid];
      denoms[0] += rate_78;
      double rate_82 = scratch[82][tid];
      denoms[0] += rate_82;
      double rate_88 = scratch[88][tid];
      denoms[0] += rate_88;
    }
    else if (wid == 1)
    {
      double rate_81 = scratch[81][tid];
      avals[0] += rate_81;
      double rate_87 = scratch[87][tid];
      avals[0] += rate_87;
      double rate_79 = scratch[79][tid];
      denoms[0] += rate_79;
      double rate_89 = scratch[89][tid];
      denoms[0] += rate_89;
    }
    else if (wid == 2)
    {
    }
    else if (wid == 3)
    {
      double rate_85 = scratch[85][tid];
      avals[0] += rate_85;
    }
    else if (wid == 4)
    {
    }
    else if (wid == 5)
    {
    }
    else if (wid == 6)
    {
      double rate_85 = scratch[85][tid];
      avals[0] += rate_85;
      double rate_83 = scratch[83][tid];
      avals[0] += rate_83;
      double rate_84 = scratch[84][tid];
      avals[0] += rate_84;
      double rate_75 = scratch[75][tid];
      denoms[0] += rate_75;
      double rate_76 = scratch[76][tid];
      denoms[0] += rate_76;
    }
    else if (wid == 7)
    {
    }
    asm volatile("bar.sync 0, 256;" : : : "memory");
    double rr_f_6 = rr_f_5,  rr_r_6 = rr_r_5;
    /* Chemistry for level 6 */
    {
      {
        int hi_part,  lo_part;
        hi_part = __shfl(__double2hiint(real_constants[1]), 4, 32);
        lo_part = __shfl(__double2loint(real_constants[1]), 4, 32);
        double arrhenius = __hiloint2double(hi_part, lo_part) * vlntemp;
        hi_part = __shfl(__double2hiint(real_constants[1]), 5, 32);
        lo_part = __shfl(__double2loint(real_constants[1]), 5, 32);
  arrhenius = __fma_rn(__hiloint2double(hi_part, lo_part),  ortc,  arrhenius); 
        arrhenius = exp(arrhenius);
        hi_part = __shfl(__double2hiint(real_constants[1]), 6, 32);
        lo_part = __shfl(__double2loint(real_constants[1]), 6, 32);
        rr_f_6 = __hiloint2double(hi_part, lo_part) * arrhenius;
      }
      {
        int hi_part,  lo_part;
        hi_part = __shfl(__double2hiint(real_constants[1]), 7, 32);
        lo_part = __shfl(__double2loint(real_constants[1]), 7, 32);
        double arrhenius = __hiloint2double(hi_part, lo_part) * vlntemp;
        hi_part = __shfl(__double2hiint(real_constants[1]), 8, 32);
        lo_part = __shfl(__double2loint(real_constants[1]), 8, 32);
  arrhenius = __fma_rn(__hiloint2double(hi_part, lo_part),  ortc,  arrhenius); 
        arrhenius = exp(arrhenius);
        hi_part = __shfl(__double2hiint(real_constants[1]), 9, 32);
        lo_part = __shfl(__double2loint(real_constants[1]), 9, 32);
        rr_r_6 = __hiloint2double(hi_part, lo_part) * arrhenius;
      }
    }
    if (wid == 0)
    {
      double mole_frac_NC_CH3 = scratch[2][tid];
      rr_f_6 *= mole_frac_NC_CH3;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_6 *= mole_frac_NC_H;
      double mole_frac_NC_C2H4 = scratch[9][tid];
      rr_r_6 *= mole_frac_NC_C2H4;
    }
    else if (wid == 1)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_6 *= mole_frac_NC_H;
      double mole_frac_NC_CH3O = scratch[13][tid];
      rr_f_6 *= mole_frac_NC_CH3O;
      double mole_frac_NC_H2O = scratch[6][tid];
      rr_r_6 *= mole_frac_NC_H2O;
    }
    else if (wid == 2)
    {
      double mole_frac_NC_C2H5 = scratch[10][tid];
      rr_f_6 *= mole_frac_NC_C2H5;
      double mole_frac_NC_CO = scratch[8][tid];
      rr_r_6 *= mole_frac_NC_CO;
      double mole_frac_NC_C2H6 = scratch[12][tid];
      rr_r_6 *= mole_frac_NC_C2H6;
    }
    else if (wid == 3)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_6 *= mole_frac_NC_H;
      double mole_frac_NC_C2H4 = scratch[9][tid];
      rr_f_6 *= mole_frac_NC_C2H4;
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_r_6 *= mole_frac_NC_H2;
    }
    else if (wid == 4)
    {
      double mole_frac_NC_OH = scratch[5][tid];
      rr_f_6 *= mole_frac_NC_OH;
      double mole_frac_NC_C2H4 = scratch[9][tid];
      rr_f_6 *= mole_frac_NC_C2H4;
      double mole_frac_NC_H2O = scratch[6][tid];
      rr_r_6 *= mole_frac_NC_H2O;
    }
    else if (wid == 5)
    {
      double mole_frac_NC_CH3 = scratch[2][tid];
      rr_f_6 *= mole_frac_NC_CH3;
      double mole_frac_NC_C2H4 = scratch[9][tid];
      rr_f_6 *= mole_frac_NC_C2H4;
      double mole_frac_NC_CH4 = scratch[4][tid];
      rr_r_6 *= mole_frac_NC_CH4;
    }
    else if (wid == 6)
    {
      double mole_frac_NC_O = scratch[3][tid];
      rr_f_6 *= mole_frac_NC_O;
      double mole_frac_NC_C2H4 = scratch[9][tid];
      rr_f_6 *= mole_frac_NC_C2H4;
      double mole_frac_NC_CH3 = scratch[2][tid];
      rr_r_6 *= mole_frac_NC_CH3;
    }
    else if (wid == 7)
    {
      double mole_frac_NC_OH = scratch[5][tid];
      rr_f_6 *= mole_frac_NC_OH;
      double mole_frac_NC_H2O = scratch[6][tid];
      rr_r_6 *= mole_frac_NC_H2O;
      double mole_frac_NC_C2H2 = scratch[7][tid];
      rr_r_6 *= mole_frac_NC_C2H2;
    }
    scratch[wid+75][tid] = rr_f_6;
    scratch[wid+83][tid] = rr_r_6;
    asm volatile("bar.sync 0, 256;" : : : "memory");
    if (wid == 0)
    {
    }
    else if (wid == 1)
    {
      double rate_76 = scratch[76][tid];
      avals[0] += rate_76;
      double rate_83 = scratch[83][tid];
      avals[0] += rate_83;
      double rate_75 = scratch[75][tid];
      denoms[0] += rate_75;
      double rate_84 = scratch[84][tid];
      denoms[0] += rate_84;
    }
    else if (wid == 2)
    {
      double rate_78 = scratch[78][tid];
      avals[0] += rate_78;
      double rate_79 = scratch[79][tid];
      avals[0] += rate_79;
      double rate_80 = scratch[80][tid];
      avals[0] += rate_80;
      double rate_90 = scratch[90][tid];
      avals[0] += rate_90;
      double rate_82 = scratch[82][tid];
      denoms[0] += rate_82;
      double rate_86 = scratch[86][tid];
      denoms[0] += rate_86;
      double rate_87 = scratch[87][tid];
      denoms[0] += rate_87;
      double rate_88 = scratch[88][tid];
      denoms[0] += rate_88;
    }
    else if (wid == 3)
    {
      double rate_81 = scratch[81][tid];
      avals[0] += rate_81;
      double rate_85 = scratch[85][tid];
      avals[0] += rate_85;
      double rate_77 = scratch[77][tid];
      denoms[0] += rate_77;
      double rate_89 = scratch[89][tid];
      denoms[0] += rate_89;
    }
    else if (wid == 4)
    {
    }
    else if (wid == 5)
    {
    }
    else if (wid == 6)
    {
    }
    else if (wid == 7)
    {
    }
    asm volatile("bar.sync 0, 256;" : : : "memory");
    double rr_f_7 = rr_f_6,  rr_r_7 = rr_r_6;
    /* Chemistry for level 7 */
    {
      {
        int hi_part,  lo_part;
        hi_part = __shfl(__double2hiint(real_constants[1]), 10, 32);
        lo_part = __shfl(__double2loint(real_constants[1]), 10, 32);
        double arrhenius = __hiloint2double(hi_part, lo_part) * vlntemp;
        hi_part = __shfl(__double2hiint(real_constants[1]), 11, 32);
        lo_part = __shfl(__double2loint(real_constants[1]), 11, 32);
  arrhenius = __fma_rn(__hiloint2double(hi_part, lo_part),  ortc,  arrhenius); 
        arrhenius = exp(arrhenius);
        hi_part = __shfl(__double2hiint(real_constants[1]), 12, 32);
        lo_part = __shfl(__double2loint(real_constants[1]), 12, 32);
        rr_f_7 = __hiloint2double(hi_part, lo_part) * arrhenius;
      }
      {
        int hi_part,  lo_part;
        hi_part = __shfl(__double2hiint(real_constants[1]), 13, 32);
        lo_part = __shfl(__double2loint(real_constants[1]), 13, 32);
        double arrhenius = __hiloint2double(hi_part, lo_part) * vlntemp;
        hi_part = __shfl(__double2hiint(real_constants[1]), 14, 32);
        lo_part = __shfl(__double2loint(real_constants[1]), 14, 32);
  arrhenius = __fma_rn(__hiloint2double(hi_part, lo_part),  ortc,  arrhenius); 
        arrhenius = exp(arrhenius);
        hi_part = __shfl(__double2hiint(real_constants[1]), 15, 32);
        lo_part = __shfl(__double2loint(real_constants[1]), 15, 32);
        rr_r_7 = __hiloint2double(hi_part, lo_part) * arrhenius;
      }
    }
    if (wid == 0)
    {
      double mole_frac_NC_O = scratch[3][tid];
      rr_f_7 *= mole_frac_NC_O;
      double mole_frac_NC_C2H4 = scratch[9][tid];
      rr_f_7 *= mole_frac_NC_C2H4;
      double mole_frac_NC_OH = scratch[5][tid];
      rr_r_7 *= mole_frac_NC_OH;
    }
    else if (wid == 1)
    {
      double mole_frac_NC_C2H4 = scratch[9][tid];
      rr_f_7 *= mole_frac_NC_C2H4;
      double mole_frac_NC_O2 = scratch[14][tid];
      rr_f_7 *= mole_frac_NC_O2;
      double mole_frac_NC_HO2 = scratch[15][tid];
      rr_r_7 *= mole_frac_NC_HO2;
    }
    else if (wid == 2)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_7 *= mole_frac_NC_H;
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_r_7 *= mole_frac_NC_H2;
      double mole_frac_NC_C2H2 = scratch[7][tid];
      rr_r_7 *= mole_frac_NC_C2H2;
    }
    else if (wid == 3)
    {
      double mole_frac_NC_H2O2 = scratch[16][tid];
      rr_f_7 *= mole_frac_NC_H2O2;
      double mole_frac_NC_C2H4 = scratch[9][tid];
      rr_r_7 *= mole_frac_NC_C2H4;
      double mole_frac_NC_HO2 = scratch[15][tid];
      rr_r_7 *= mole_frac_NC_HO2;
    }
    else if (wid == 4)
    {
      double mole_frac_NC_CH3 = scratch[2][tid];
      rr_f_7 *= mole_frac_NC_CH3;
      double mole_frac_NC_CH4 = scratch[4][tid];
      rr_r_7 *= mole_frac_NC_CH4;
      double mole_frac_NC_C2H2 = scratch[7][tid];
      rr_r_7 *= mole_frac_NC_C2H2;
    }
    else if (wid == 5)
    {
      rr_f_7 = 0.0;
      double mole_frac_NC_C2H2 = scratch[7][tid];
      rr_r_7 *= mole_frac_NC_C2H2;
      double mole_frac_NC_C2H4 = scratch[9][tid];
      rr_r_7 *= mole_frac_NC_C2H4;
    }
    else if (wid == 6)
    {
      double mole_frac_NC_O2 = scratch[14][tid];
      rr_f_7 *= mole_frac_NC_O2;
      double mole_frac_NC_CH2O = scratch[11][tid];
      rr_r_7 *= mole_frac_NC_CH2O;
    }
    else if (wid == 7)
    {
      double mole_frac_NC_O2 = scratch[14][tid];
      rr_f_7 *= mole_frac_NC_O2;
      double mole_frac_NC_C2H2 = scratch[7][tid];
      rr_r_7 *= mole_frac_NC_C2H2;
      double mole_frac_NC_HO2 = scratch[15][tid];
      rr_r_7 *= mole_frac_NC_HO2;
    }
    scratch[wid+75][tid] = rr_f_7;
    scratch[wid+83][tid] = rr_r_7;
    asm volatile("bar.sync 0, 256;" : : : "memory");
    if (wid == 0)
    {
    }
    else if (wid == 1)
    {
    }
    else if (wid == 2)
    {
      double rate_75 = scratch[75][tid];
      avals[0] += rate_75;
      double rate_76 = scratch[76][tid];
      avals[0] += rate_76;
      double rate_85 = scratch[85][tid];
      avals[0] += rate_85;
      double rate_86 = scratch[86][tid];
      avals[0] += rate_86;
      double rate_87 = scratch[87][tid];
      avals[0] += rate_87;
      double rate_88 = scratch[88][tid];
      avals[0] = __fma_rn(2.0, rate_88, avals[0]);
      double rate_90 = scratch[90][tid];
      avals[0] += rate_90;
      double rate_89 = scratch[89][tid];
      avals[1] += rate_89;
      double rate_77 = scratch[77][tid];
      denoms[0] += rate_77;
      double rate_78 = scratch[78][tid];
      denoms[0] += rate_78;
      double rate_79 = scratch[79][tid];
      denoms[0] += rate_79;
      double rate_81 = scratch[81][tid];
      denoms[0] += rate_81;
      double rate_82 = scratch[82][tid];
      denoms[0] += rate_82;
      double rate_83 = scratch[83][tid];
      denoms[0] += rate_83;
      double rate_84 = scratch[84][tid];
      denoms[0] += rate_84;
    }
    else if (wid == 3)
    {
      double rate_81 = scratch[81][tid];
      avals[3] += rate_81;
      double rate_89 = scratch[89][tid];
      denoms[0] += rate_89;
    }
    else if (wid == 4)
    {
    }
    else if (wid == 5)
    {
    }
    else if (wid == 6)
    {
    }
    else if (wid == 7)
    {
    }
    asm volatile("bar.sync 0, 256;" : : : "memory");
    double rr_f_8 = rr_f_7,  rr_r_8 = rr_r_7;
    /* Chemistry for level 8 */
    {
      {
        int hi_part,  lo_part;
        hi_part = __shfl(__double2hiint(real_constants[1]), 16, 32);
        lo_part = __shfl(__double2loint(real_constants[1]), 16, 32);
        double arrhenius = __hiloint2double(hi_part, lo_part) * vlntemp;
        hi_part = __shfl(__double2hiint(real_constants[1]), 17, 32);
        lo_part = __shfl(__double2loint(real_constants[1]), 17, 32);
  arrhenius = __fma_rn(__hiloint2double(hi_part, lo_part),  ortc,  arrhenius); 
        arrhenius = exp(arrhenius);
        hi_part = __shfl(__double2hiint(real_constants[1]), 18, 32);
        lo_part = __shfl(__double2loint(real_constants[1]), 18, 32);
        rr_f_8 = __hiloint2double(hi_part, lo_part) * arrhenius;
      }
      {
        int hi_part,  lo_part;
        hi_part = __shfl(__double2hiint(real_constants[1]), 19, 32);
        lo_part = __shfl(__double2loint(real_constants[1]), 19, 32);
        double arrhenius = __hiloint2double(hi_part, lo_part) * vlntemp;
        hi_part = __shfl(__double2hiint(real_constants[1]), 20, 32);
        lo_part = __shfl(__double2loint(real_constants[1]), 20, 32);
  arrhenius = __fma_rn(__hiloint2double(hi_part, lo_part),  ortc,  arrhenius); 
        arrhenius = exp(arrhenius);
        hi_part = __shfl(__double2hiint(real_constants[1]), 21, 32);
        lo_part = __shfl(__double2loint(real_constants[1]), 21, 32);
        rr_r_8 = __hiloint2double(hi_part, lo_part) * arrhenius;
      }
    }
    if (wid == 0)
    {
      double mole_frac_NC_O = scratch[3][tid];
      rr_f_8 *= mole_frac_NC_O;
      double mole_frac_NC_C2H2 = scratch[7][tid];
      rr_f_8 *= mole_frac_NC_C2H2;
      double mole_frac_NC_CO = scratch[8][tid];
      rr_r_8 *= mole_frac_NC_CO;
    }
    else if (wid == 1)
    {
      double mole_frac_NC_O = scratch[3][tid];
      rr_f_8 *= mole_frac_NC_O;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_8 *= mole_frac_NC_H;
    }
    else if (wid == 2)
    {
      double mole_frac_NC_OH = scratch[5][tid];
      rr_f_8 *= mole_frac_NC_OH;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_8 *= mole_frac_NC_H;
      double mole_frac_NC_CH2O = scratch[11][tid];
      rr_r_8 *= mole_frac_NC_CH2O;
    }
    else if (wid == 3)
    {
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_f_8 *= mole_frac_NC_H2;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_8 *= mole_frac_NC_H;
      double mole_frac_NC_CH3 = scratch[2][tid];
      rr_r_8 *= mole_frac_NC_CH3;
    }
    else if (wid == 4)
    {
      double mole_frac_NC_O2 = scratch[14][tid];
      rr_f_8 *= mole_frac_NC_O2;
      double mole_frac_NC_OH = scratch[5][tid];
      rr_r_8 *= mole_frac_NC_OH;
    }
    else if (wid == 5)
    {
      double mole_frac_NC_HO2 = scratch[15][tid];
      rr_f_8 *= mole_frac_NC_HO2;
      double mole_frac_NC_OH = scratch[5][tid];
      rr_r_8 *= mole_frac_NC_OH;
      double mole_frac_NC_CH2O = scratch[11][tid];
      rr_r_8 *= mole_frac_NC_CH2O;
    }
    else if (wid == 6)
    {
      rr_f_8 = 0.0;
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_r_8 *= mole_frac_NC_H2;
      double mole_frac_NC_C2H2 = scratch[7][tid];
      rr_r_8 *= mole_frac_NC_C2H2;
    }
    else if (wid == 7)
    {
      double thb_6 = scratch[36][tid];
      rr_f_8 *= thb_6;
      rr_r_8 *= thb_6;
    }
    scratch[wid+75][tid] = rr_f_8;
    scratch[wid+83][tid] = rr_r_8;
    asm volatile("bar.sync 0, 256;" : : : "memory");
    if (wid == 0)
    {
      double rate_75 = scratch[75][tid];
      avals[0] += rate_75;
      double rate_85 = scratch[85][tid];
      avals[0] += rate_85;
      double rate_86 = scratch[86][tid];
      avals[0] += rate_86;
      double rate_88 = scratch[88][tid];
      avals[0] += rate_88;
      double rate_89 = scratch[89][tid];
      avals[0] = __fma_rn(2.0, rate_89, avals[0]);
      double rate_82 = scratch[82][tid];
      avals[1] += rate_82;
      double rate_84 = scratch[84][tid];
      avals[2] += rate_84;
      double rate_87 = scratch[87][tid];
      avals[2] += rate_87;
      double rate_76 = scratch[76][tid];
      denoms[0] += rate_76;
      double rate_77 = scratch[77][tid];
      denoms[0] += rate_77;
      double rate_78 = scratch[78][tid];
      denoms[0] += rate_78;
      double rate_79 = scratch[79][tid];
      denoms[0] += rate_79;
      double rate_80 = scratch[80][tid];
      denoms[0] += rate_80;
      double rate_83 = scratch[83][tid];
      denoms[0] += rate_83;
      double rate_90 = scratch[90][tid];
      denoms[0] += rate_90;
    }
    else if (wid == 1)
    {
      double rate_90 = scratch[90][tid];
      avals[1] += rate_90;
      double rate_82 = scratch[82][tid];
      denoms[0] += rate_82;
    }
    else if (wid == 2)
    {
    }
    else if (wid == 3)
    {
      double rate_76 = scratch[76][tid];
      avals[1] += rate_76;
      double rate_79 = scratch[79][tid];
      avals[1] += rate_79;
      double rate_84 = scratch[84][tid];
      denoms[0] += rate_84;
      double rate_87 = scratch[87][tid];
      denoms[0] += rate_87;
    }
    else if (wid == 4)
    {
    }
    else if (wid == 5)
    {
    }
    else if (wid == 6)
    {
    }
    else if (wid == 7)
    {
    }
    asm volatile("bar.sync 0, 256;" : : : "memory");
    double rr_f_9 = rr_f_8,  rr_r_9 = rr_r_8;
    /* Chemistry for level 9 */
    {
      {
        int hi_part,  lo_part;
        hi_part = __shfl(__double2hiint(real_constants[1]), 22, 32);
        lo_part = __shfl(__double2loint(real_constants[1]), 22, 32);
        double arrhenius = __hiloint2double(hi_part, lo_part) * vlntemp;
        hi_part = __shfl(__double2hiint(real_constants[1]), 23, 32);
        lo_part = __shfl(__double2loint(real_constants[1]), 23, 32);
  arrhenius = __fma_rn(__hiloint2double(hi_part, lo_part),  ortc,  arrhenius); 
        arrhenius = exp(arrhenius);
        hi_part = __shfl(__double2hiint(real_constants[1]), 24, 32);
        lo_part = __shfl(__double2loint(real_constants[1]), 24, 32);
        rr_f_9 = __hiloint2double(hi_part, lo_part) * arrhenius;
      }
      {
        int hi_part,  lo_part;
        hi_part = __shfl(__double2hiint(real_constants[1]), 25, 32);
        lo_part = __shfl(__double2loint(real_constants[1]), 25, 32);
        double arrhenius = __hiloint2double(hi_part, lo_part) * vlntemp;
        hi_part = __shfl(__double2hiint(real_constants[1]), 26, 32);
        lo_part = __shfl(__double2loint(real_constants[1]), 26, 32);
  arrhenius = __fma_rn(__hiloint2double(hi_part, lo_part),  ortc,  arrhenius); 
        arrhenius = exp(arrhenius);
        hi_part = __shfl(__double2hiint(real_constants[1]), 27, 32);
        lo_part = __shfl(__double2loint(real_constants[1]), 27, 32);
        rr_r_9 = __hiloint2double(hi_part, lo_part) * arrhenius;
      }
    }
    if (wid == 0)
    {
      double mole_frac_NC_H2O = scratch[6][tid];
      rr_f_9 *= mole_frac_NC_H2O;
      rr_r_9 *= mole_frac_NC_H2O;
    }
    else if (wid == 1)
    {
      double mole_frac_NC_CO = scratch[8][tid];
      rr_f_9 *= mole_frac_NC_CO;
      rr_r_9 *= mole_frac_NC_CO;
    }
    else if (wid == 2)
    {
      double mole_frac_NC_CO2 = scratch[17][tid];
      rr_f_9 *= mole_frac_NC_CO2;
      rr_r_9 *= mole_frac_NC_CO2;
    }
    else if (wid == 3)
    {
      double mole_frac_NC_O = scratch[3][tid];
      rr_f_9 *= mole_frac_NC_O;
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_r_9 *= mole_frac_NC_H2;
      double mole_frac_NC_CO = scratch[8][tid];
      rr_r_9 *= mole_frac_NC_CO;
    }
    else if (wid == 4)
    {
      double mole_frac_NC_O = scratch[3][tid];
      rr_f_9 *= mole_frac_NC_O;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_9 *= mole_frac_NC_H;
    }
    else if (wid == 5)
    {
      double mole_frac_NC_OH = scratch[5][tid];
      rr_f_9 *= mole_frac_NC_OH;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_9 *= mole_frac_NC_H;
      double mole_frac_NC_CH2O = scratch[11][tid];
      rr_r_9 *= mole_frac_NC_CH2O;
    }
    else if (wid == 6)
    {
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_f_9 *= mole_frac_NC_H2;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_9 *= mole_frac_NC_H;
      double mole_frac_NC_CH3 = scratch[2][tid];
      rr_r_9 *= mole_frac_NC_CH3;
    }
    else if (wid == 7)
    {
      double mole_frac_NC_O2 = scratch[14][tid];
      rr_f_9 *= mole_frac_NC_O2;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_9 *= mole_frac_NC_H;
      double mole_frac_NC_OH = scratch[5][tid];
      rr_r_9 *= mole_frac_NC_OH;
      double mole_frac_NC_CO = scratch[8][tid];
      rr_r_9 *= mole_frac_NC_CO;
    }
    scratch[wid+75][tid] = rr_f_9;
    scratch[wid+83][tid] = rr_r_9;
    asm volatile("bar.sync 0, 256;" : : : "memory");
    if (wid == 0)
    {
      double rate_75 = scratch[75][tid];
      avals[1] += rate_75;
      double rate_76 = scratch[76][tid];
      avals[1] += rate_76;
      double rate_77 = scratch[77][tid];
      avals[1] += rate_77;
      double rate_83 = scratch[83][tid];
      denoms[0] += rate_83;
      double rate_84 = scratch[84][tid];
      denoms[0] += rate_84;
      double rate_85 = scratch[85][tid];
      denoms[0] += rate_85;
    }
    else if (wid == 1)
    {
      double rate_86 = scratch[86][tid];
      avals[0] += rate_86;
      double rate_88 = scratch[88][tid];
      avals[0] += rate_88;
      double rate_89 = scratch[89][tid];
      avals[0] += rate_89;
      double rate_90 = scratch[90][tid];
      avals[0] += rate_90;
      double rate_83 = scratch[83][tid];
      avals[1] += rate_83;
      double rate_84 = scratch[84][tid];
      avals[1] += rate_84;
      double rate_85 = scratch[85][tid];
      avals[1] += rate_85;
      double rate_87 = scratch[87][tid];
      avals[2] += rate_87;
      double rate_75 = scratch[75][tid];
      denoms[0] += rate_75;
      double rate_76 = scratch[76][tid];
      denoms[0] += rate_76;
      double rate_77 = scratch[77][tid];
      denoms[0] += rate_77;
      double rate_78 = scratch[78][tid];
      denoms[0] += rate_78;
      double rate_79 = scratch[79][tid];
      denoms[0] += rate_79;
      double rate_80 = scratch[80][tid];
      denoms[0] += rate_80;
      double rate_81 = scratch[81][tid];
      denoms[0] += rate_81;
      double rate_82 = scratch[82][tid];
      denoms[0] += rate_82;
    }
    else if (wid == 2)
    {
    }
    else if (wid == 3)
    {
      double rate_79 = scratch[79][tid];
      avals[2] += rate_79;
      double rate_87 = scratch[87][tid];
      denoms[0] += rate_87;
    }
    else if (wid == 4)
    {
    }
    else if (wid == 5)
    {
    }
    else if (wid == 6)
    {
    }
    else if (wid == 7)
    {
    }
    asm volatile("bar.sync 0, 256;" : : : "memory");
    double rr_f_10 = rr_f_9,  rr_r_10 = rr_r_9;
    /* Chemistry for level 10 */
    {
      {
        int hi_part,  lo_part;
        hi_part = __shfl(__double2hiint(real_constants[1]), 28, 32);
        lo_part = __shfl(__double2loint(real_constants[1]), 28, 32);
        double arrhenius = __hiloint2double(hi_part, lo_part) * vlntemp;
        hi_part = __shfl(__double2hiint(real_constants[1]), 29, 32);
        lo_part = __shfl(__double2loint(real_constants[1]), 29, 32);
  arrhenius = __fma_rn(__hiloint2double(hi_part, lo_part),  ortc,  arrhenius); 
        arrhenius = exp(arrhenius);
        hi_part = __shfl(__double2hiint(real_constants[1]), 30, 32);
        lo_part = __shfl(__double2loint(real_constants[1]), 30, 32);
        rr_f_10 = __hiloint2double(hi_part, lo_part) * arrhenius;
      }
      {
        int hi_part,  lo_part;
        hi_part = __shfl(__double2hiint(real_constants[1]), 31, 32);
        lo_part = __shfl(__double2loint(real_constants[1]), 31, 32);
        double arrhenius = __hiloint2double(hi_part, lo_part) * vlntemp;
        hi_part = __shfl(__double2hiint(real_constants[2]), 0, 32);
        lo_part = __shfl(__double2loint(real_constants[2]), 0, 32);
  arrhenius = __fma_rn(__hiloint2double(hi_part, lo_part),  ortc,  arrhenius); 
        arrhenius = exp(arrhenius);
        hi_part = __shfl(__double2hiint(real_constants[2]), 1, 32);
        lo_part = __shfl(__double2loint(real_constants[2]), 1, 32);
        rr_r_10 = __hiloint2double(hi_part, lo_part) * arrhenius;
      }
    }
    if (wid == 0)
    {
      double mole_frac_NC_O2 = scratch[14][tid];
      rr_f_10 *= mole_frac_NC_O2;
      double mole_frac_NC_H2O = scratch[6][tid];
      rr_r_10 *= mole_frac_NC_H2O;
      double mole_frac_NC_CO = scratch[8][tid];
      rr_r_10 *= mole_frac_NC_CO;
    }
    else if (wid == 1)
    {
      double mole_frac_NC_CO2 = scratch[17][tid];
      rr_f_10 *= mole_frac_NC_CO2;
      double mole_frac_NC_CO = scratch[8][tid];
      rr_r_10 *= mole_frac_NC_CO;
      double mole_frac_NC_CH2O = scratch[11][tid];
      rr_r_10 *= mole_frac_NC_CH2O;
    }
    else if (wid == 2)
    {
      double mole_frac_NC_CH3HCO = scratch[18][tid];
      rr_f_10 *= mole_frac_NC_CH3HCO;
      double mole_frac_NC_CH3 = scratch[2][tid];
      rr_r_10 *= mole_frac_NC_CH3;
    }
    else if (wid == 3)
    {
      double mole_frac_NC_OH = scratch[5][tid];
      rr_f_10 *= mole_frac_NC_OH;
      double mole_frac_NC_CH3OCH3 = scratch[20][tid];
      rr_f_10 *= mole_frac_NC_CH3OCH3;
      double mole_frac_NC_H2O = scratch[6][tid];
      rr_r_10 *= mole_frac_NC_H2O;
    }
    else if (wid == 4)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_10 *= mole_frac_NC_H;
      double mole_frac_NC_CH3OCH3 = scratch[20][tid];
      rr_f_10 *= mole_frac_NC_CH3OCH3;
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_r_10 *= mole_frac_NC_H2;
    }
    else if (wid == 5)
    {
      double mole_frac_NC_CH3 = scratch[2][tid];
      rr_f_10 *= mole_frac_NC_CH3;
      double mole_frac_NC_CH3OCH3 = scratch[20][tid];
      rr_f_10 *= mole_frac_NC_CH3OCH3;
      double mole_frac_NC_CH4 = scratch[4][tid];
      rr_r_10 *= mole_frac_NC_CH4;
    }
    else if (wid == 6)
    {
      double mole_frac_NC_O = scratch[3][tid];
      rr_f_10 *= mole_frac_NC_O;
      double mole_frac_NC_CH3OCH3 = scratch[20][tid];
      rr_f_10 *= mole_frac_NC_CH3OCH3;
      double mole_frac_NC_OH = scratch[5][tid];
      rr_r_10 *= mole_frac_NC_OH;
    }
    else if (wid == 7)
    {
      double mole_frac_NC_HO2 = scratch[15][tid];
      rr_f_10 *= mole_frac_NC_HO2;
      double mole_frac_NC_CH3OCH3 = scratch[20][tid];
      rr_f_10 *= mole_frac_NC_CH3OCH3;
      double mole_frac_NC_H2O2 = scratch[16][tid];
      rr_r_10 *= mole_frac_NC_H2O2;
    }
    scratch[wid+75][tid] = rr_f_10;
    scratch[wid+83][tid] = rr_r_10;
    asm volatile("bar.sync 0, 256;" : : : "memory");
    if (wid == 0)
    {
    }
    else if (wid == 1)
    {
      double rate_83 = scratch[83][tid];
      avals[0] += rate_83;
      double rate_84 = scratch[84][tid];
      avals[0] += rate_84;
      double rate_75 = scratch[75][tid];
      denoms[0] += rate_75;
      double rate_76 = scratch[76][tid];
      denoms[0] += rate_76;
    }
    else if (wid == 2)
    {
    }
    else if (wid == 3)
    {
      double rate_77 = scratch[77][tid];
      avals[0] += rate_77;
      double rate_85 = scratch[85][tid];
      denoms[0] += rate_85;
    }
    else if (wid == 4)
    {
      double rate_78 = scratch[78][tid];
      avals[0] += rate_78;
      double rate_79 = scratch[79][tid];
      avals[0] += rate_79;
      double rate_80 = scratch[80][tid];
      avals[0] += rate_80;
      double rate_81 = scratch[81][tid];
      avals[0] += rate_81;
      double rate_82 = scratch[82][tid];
      avals[0] += rate_82;
      double rate_86 = scratch[86][tid];
      denoms[0] += rate_86;
      double rate_87 = scratch[87][tid];
      denoms[0] += rate_87;
      double rate_88 = scratch[88][tid];
      denoms[0] += rate_88;
      double rate_89 = scratch[89][tid];
      denoms[0] += rate_89;
      double rate_90 = scratch[90][tid];
      denoms[0] += rate_90;
    }
    else if (wid == 5)
    {
    }
    else if (wid == 6)
    {
    }
    else if (wid == 7)
    {
    }
    asm volatile("bar.sync 0, 256;" : : : "memory");
    double rr_f_11 = rr_f_10,  rr_r_11 = rr_r_10;
    /* Chemistry for level 11 */
    {
      {
        int hi_part,  lo_part;
        hi_part = __shfl(__double2hiint(real_constants[2]), 2, 32);
        lo_part = __shfl(__double2loint(real_constants[2]), 2, 32);
        double arrhenius = __hiloint2double(hi_part, lo_part) * vlntemp;
        hi_part = __shfl(__double2hiint(real_constants[2]), 3, 32);
        lo_part = __shfl(__double2loint(real_constants[2]), 3, 32);
  arrhenius = __fma_rn(__hiloint2double(hi_part, lo_part),  ortc,  arrhenius); 
        arrhenius = exp(arrhenius);
        hi_part = __shfl(__double2hiint(real_constants[2]), 4, 32);
        lo_part = __shfl(__double2loint(real_constants[2]), 4, 32);
        rr_f_11 = __hiloint2double(hi_part, lo_part) * arrhenius;
      }
      {
        int hi_part,  lo_part;
        hi_part = __shfl(__double2hiint(real_constants[2]), 5, 32);
        lo_part = __shfl(__double2loint(real_constants[2]), 5, 32);
        double arrhenius = __hiloint2double(hi_part, lo_part) * vlntemp;
        hi_part = __shfl(__double2hiint(real_constants[2]), 6, 32);
        lo_part = __shfl(__double2loint(real_constants[2]), 6, 32);
  arrhenius = __fma_rn(__hiloint2double(hi_part, lo_part),  ortc,  arrhenius); 
        arrhenius = exp(arrhenius);
        hi_part = __shfl(__double2hiint(real_constants[2]), 7, 32);
        lo_part = __shfl(__double2loint(real_constants[2]), 7, 32);
        rr_r_11 = __hiloint2double(hi_part, lo_part) * arrhenius;
      }
    }
    if (wid == 0)
    {
      double mole_frac_NC_O2 = scratch[14][tid];
      rr_f_11 *= mole_frac_NC_O2;
      double mole_frac_NC_CH3OCH3 = scratch[20][tid];
      rr_f_11 *= mole_frac_NC_CH3OCH3;
      double mole_frac_NC_HO2 = scratch[15][tid];
      rr_r_11 *= mole_frac_NC_HO2;
    }
    else if (wid == 1)
    {
      double mole_frac_NC_CH3 = scratch[2][tid];
      rr_r_11 *= mole_frac_NC_CH3;
      double mole_frac_NC_CH2O = scratch[11][tid];
      rr_r_11 *= mole_frac_NC_CH2O;
    }
    else if (wid == 2)
    {
      double mole_frac_NC_CH3O = scratch[13][tid];
      rr_f_11 *= mole_frac_NC_CH3O;
      double mole_frac_NC_CH2O = scratch[11][tid];
      rr_r_11 *= mole_frac_NC_CH2O;
      double mole_frac_NC_CH3OCH3 = scratch[20][tid];
      rr_r_11 *= mole_frac_NC_CH3OCH3;
    }
    else if (wid == 3)
    {
      double mole_frac_NC_CH2O = scratch[11][tid];
      rr_f_11 *= mole_frac_NC_CH2O;
      double mole_frac_NC_CH3OCH3 = scratch[20][tid];
      rr_r_11 *= mole_frac_NC_CH3OCH3;
    }
    else if (wid == 4)
    {
      double mole_frac_NC_HO2 = scratch[15][tid];
      rr_f_11 *= mole_frac_NC_HO2;
      double mole_frac_NC_OH = scratch[5][tid];
      rr_r_11 *= mole_frac_NC_OH;
    }
    else if (wid == 5)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_11 *= mole_frac_NC_H;
      double mole_frac_NC_CH3OCHO = scratch[22][tid];
      rr_r_11 *= mole_frac_NC_CH3OCHO;
    }
    else if (wid == 6)
    {
      double mole_frac_NC_O2 = scratch[14][tid];
      rr_f_11 *= mole_frac_NC_O2;
      double mole_frac_NC_CH3OCH2O2 = scratch[26][tid];
      rr_r_11 *= mole_frac_NC_CH3OCH2O2;
    }
    else if (wid == 7)
    {
      double mole_frac_NC_CH3OCH2O2 = scratch[26][tid];
      rr_f_11 *= mole_frac_NC_CH3OCH2O2;
      rr_f_11 *= mole_frac_NC_CH3OCH2O2;
      rr_r_11 = 0.0;
    }
    scratch[wid+75][tid] = rr_f_11;
    scratch[wid+83][tid] = rr_r_11;
    asm volatile("bar.sync 0, 256;" : : : "memory");
    if (wid == 0)
    {
    }
    else if (wid == 1)
    {
    }
    else if (wid == 2)
    {
    }
    else if (wid == 3)
    {
      double rate_78 = scratch[78][tid];
      avals[4] += rate_78;
      double rate_86 = scratch[86][tid];
      denoms[0] += rate_86;
    }
    else if (wid == 4)
    {
      double rate_75 = scratch[75][tid];
      avals[0] += rate_75;
      double rate_84 = scratch[84][tid];
      avals[0] += rate_84;
      double rate_85 = scratch[85][tid];
      avals[0] += rate_85;
      double rate_89 = scratch[89][tid];
      avals[0] += rate_89;
      double rate_86 = scratch[86][tid];
      avals[1] += rate_86;
      double rate_87 = scratch[87][tid];
      avals[2] += rate_87;
      double rate_76 = scratch[76][tid];
      denoms[0] += rate_76;
      double rate_77 = scratch[77][tid];
      denoms[0] += rate_77;
      double rate_78 = scratch[78][tid];
      denoms[0] += rate_78;
      double rate_79 = scratch[79][tid];
      denoms[0] += rate_79;
      double rate_81 = scratch[81][tid];
      denoms[0] += rate_81;
      double rate_83 = scratch[83][tid];
      denoms[0] += rate_83;
    }
    else if (wid == 5)
    {
      double rate_82 = scratch[82][tid];
      avals[0] = __fma_rn(2.0, rate_82, avals[0]);
      double rate_88 = scratch[88][tid];
      avals[0] += rate_88;
      double rate_79 = scratch[79][tid];
      avals[1] += rate_79;
      double rate_80 = scratch[80][tid];
      denoms[0] += rate_80;
      double rate_87 = scratch[87][tid];
      denoms[0] += rate_87;
    }
    else if (wid == 6)
    {
    }
    else if (wid == 7)
    {
    }
    asm volatile("bar.sync 0, 256;" : : : "memory");
    double rr_f_12 = rr_f_11,  rr_r_12 = rr_r_11;
    /* Chemistry for level 12 */
    {
      {
        int hi_part,  lo_part;
        hi_part = __shfl(__double2hiint(real_constants[2]), 8, 32);
        lo_part = __shfl(__double2loint(real_constants[2]), 8, 32);
        double arrhenius = __hiloint2double(hi_part, lo_part) * vlntemp;
        hi_part = __shfl(__double2hiint(real_constants[2]), 9, 32);
        lo_part = __shfl(__double2loint(real_constants[2]), 9, 32);
  arrhenius = __fma_rn(__hiloint2double(hi_part, lo_part),  ortc,  arrhenius); 
        arrhenius = exp(arrhenius);
        hi_part = __shfl(__double2hiint(real_constants[2]), 10, 32);
        lo_part = __shfl(__double2loint(real_constants[2]), 10, 32);
        rr_f_12 = __hiloint2double(hi_part, lo_part) * arrhenius;
      }
      {
        int hi_part,  lo_part;
        hi_part = __shfl(__double2hiint(real_constants[2]), 11, 32);
        lo_part = __shfl(__double2loint(real_constants[2]), 11, 32);
        double arrhenius = __hiloint2double(hi_part, lo_part) * vlntemp;
        hi_part = __shfl(__double2hiint(real_constants[2]), 12, 32);
        lo_part = __shfl(__double2loint(real_constants[2]), 12, 32);
  arrhenius = __fma_rn(__hiloint2double(hi_part, lo_part),  ortc,  arrhenius); 
        arrhenius = exp(arrhenius);
        hi_part = __shfl(__double2hiint(real_constants[2]), 13, 32);
        lo_part = __shfl(__double2loint(real_constants[2]), 13, 32);
        rr_r_12 = __hiloint2double(hi_part, lo_part) * arrhenius;
      }
    }
    if (wid == 0)
    {
      double mole_frac_NC_CH2O = scratch[11][tid];
      rr_r_12 *= mole_frac_NC_CH2O;
      double mole_frac_NC_CH3O = scratch[13][tid];
      rr_r_12 *= mole_frac_NC_CH3O;
    }
    else if (wid == 1)
    {
      double mole_frac_NC_O2 = scratch[14][tid];
      rr_f_12 *= mole_frac_NC_O2;
      double mole_frac_NC_HO2 = scratch[15][tid];
      rr_r_12 *= mole_frac_NC_HO2;
      double mole_frac_NC_CH3OCHO = scratch[22][tid];
      rr_r_12 *= mole_frac_NC_CH3OCHO;
    }
    else if (wid == 2)
    {
      double mole_frac_NC_CH3OCH2O2 = scratch[26][tid];
      rr_f_12 *= mole_frac_NC_CH3OCH2O2;
    }
    else if (wid == 3)
    {
      double mole_frac_NC_OH = scratch[5][tid];
      rr_r_12 *= mole_frac_NC_OH;
      double mole_frac_NC_CH2O = scratch[11][tid];
      rr_r_12 *= mole_frac_NC_CH2O;
      rr_r_12 *= mole_frac_NC_CH2O;
    }
    else if (wid == 4)
    {
      double mole_frac_NC_O2 = scratch[14][tid];
      rr_f_12 *= mole_frac_NC_O2;
      double mole_frac_NC_O2CH2OCH2O2H = scratch[28][tid];
      rr_r_12 *= mole_frac_NC_O2CH2OCH2O2H;
    }
    else if (wid == 5)
    {
      double mole_frac_NC_HOCH2OCO = scratch[25][tid];
      rr_f_12 *= mole_frac_NC_HOCH2OCO;
      double mole_frac_NC_CO = scratch[8][tid];
      rr_r_12 *= mole_frac_NC_CO;
    }
    else if (wid == 6)
    {
      double mole_frac_NC_HOCH2OCO = scratch[25][tid];
      rr_f_12 *= mole_frac_NC_HOCH2OCO;
      double mole_frac_NC_CO2 = scratch[17][tid];
      rr_r_12 *= mole_frac_NC_CO2;
    }
    else if (wid == 7)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_12 *= mole_frac_NC_H;
      double mole_frac_NC_HCOOH = scratch[19][tid];
      rr_r_12 *= mole_frac_NC_HCOOH;
    }
    scratch[wid+75][tid] = rr_f_12;
    scratch[wid+83][tid] = rr_r_12;
    asm volatile("bar.sync 0, 256;" : : : "memory");
    if (wid == 0)
    {
      double rate_77 = scratch[77][tid];
      avals[3] += rate_77;
      double rate_86 = scratch[86][tid];
      avals[3] += rate_86;
      double rate_87 = scratch[87][tid];
      avals[3] += rate_87;
      double rate_78 = scratch[78][tid];
      denoms[1] += rate_78;
      double rate_79 = scratch[79][tid];
      denoms[1] += rate_79;
      double rate_85 = scratch[85][tid];
      denoms[1] += rate_85;
    }
    else if (wid == 1)
    {
    }
    else if (wid == 2)
    {
    }
    else if (wid == 3)
    {
    }
    else if (wid == 4)
    {
    }
    else if (wid == 5)
    {
      double rate_83 = scratch[83][tid];
      avals[0] += rate_83;
      double rate_84 = scratch[84][tid];
      avals[0] += rate_84;
      double rate_75 = scratch[75][tid];
      denoms[0] += rate_75;
      double rate_76 = scratch[76][tid];
      denoms[0] += rate_76;
    }
    else if (wid == 6)
    {
      double rate_81 = scratch[81][tid];
      avals[0] += rate_81;
      double rate_89 = scratch[89][tid];
      denoms[0] += rate_89;
    }
    else if (wid == 7)
    {
      double rate_80 = scratch[80][tid];
      avals[0] += rate_80;
      double rate_90 = scratch[90][tid];
      avals[0] += rate_90;
      double rate_82 = scratch[82][tid];
      denoms[0] += rate_82;
      double rate_88 = scratch[88][tid];
      denoms[0] += rate_88;
    }
    asm volatile("bar.sync 0, 256;" : : : "memory");
    double rr_f_13 = rr_f_12,  rr_r_13 = rr_r_12;
    /* Chemistry for level 13 */
    {
      {
        int hi_part,  lo_part;
        hi_part = __shfl(__double2hiint(real_constants[2]), 14, 32);
        lo_part = __shfl(__double2loint(real_constants[2]), 14, 32);
        double arrhenius = __hiloint2double(hi_part, lo_part) * vlntemp;
        hi_part = __shfl(__double2hiint(real_constants[2]), 15, 32);
        lo_part = __shfl(__double2loint(real_constants[2]), 15, 32);
  arrhenius = __fma_rn(__hiloint2double(hi_part, lo_part),  ortc,  arrhenius); 
        arrhenius = exp(arrhenius);
        hi_part = __shfl(__double2hiint(real_constants[2]), 16, 32);
        lo_part = __shfl(__double2loint(real_constants[2]), 16, 32);
        rr_f_13 = __hiloint2double(hi_part, lo_part) * arrhenius;
      }
      {
        int hi_part,  lo_part;
        hi_part = __shfl(__double2hiint(real_constants[2]), 17, 32);
        lo_part = __shfl(__double2loint(real_constants[2]), 17, 32);
        double arrhenius = __hiloint2double(hi_part, lo_part) * vlntemp;
        hi_part = __shfl(__double2hiint(real_constants[2]), 18, 32);
        lo_part = __shfl(__double2loint(real_constants[2]), 18, 32);
  arrhenius = __fma_rn(__hiloint2double(hi_part, lo_part),  ortc,  arrhenius); 
        arrhenius = exp(arrhenius);
        hi_part = __shfl(__double2hiint(real_constants[2]), 19, 32);
        lo_part = __shfl(__double2loint(real_constants[2]), 19, 32);
        rr_r_13 = __hiloint2double(hi_part, lo_part) * arrhenius;
      }
    }
    if (wid == 0)
    {
      double mole_frac_NC_OH = scratch[5][tid];
      rr_f_13 *= mole_frac_NC_OH;
      double mole_frac_NC_CH2O = scratch[11][tid];
      rr_f_13 *= mole_frac_NC_CH2O;
    }
    else if (wid == 1)
    {
      double mole_frac_NC_HCOOH = scratch[19][tid];
      rr_f_13 *= mole_frac_NC_HCOOH;
      double mole_frac_NC_OH = scratch[5][tid];
      rr_r_13 *= mole_frac_NC_OH;
    }
    else if (wid == 2)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_13 *= mole_frac_NC_H;
      double mole_frac_NC_O2 = scratch[14][tid];
      rr_f_13 *= mole_frac_NC_O2;
      double mole_frac_NC_O = scratch[3][tid];
      rr_r_13 *= mole_frac_NC_O;
      double mole_frac_NC_OH = scratch[5][tid];
      rr_r_13 *= mole_frac_NC_OH;
    }
    else if (wid == 3)
    {
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_f_13 *= mole_frac_NC_H2;
      double mole_frac_NC_O = scratch[3][tid];
      rr_f_13 *= mole_frac_NC_O;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_13 *= mole_frac_NC_H;
      double mole_frac_NC_OH = scratch[5][tid];
      rr_r_13 *= mole_frac_NC_OH;
    }
    else if (wid == 4)
    {
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_f_13 *= mole_frac_NC_H2;
      double mole_frac_NC_OH = scratch[5][tid];
      rr_f_13 *= mole_frac_NC_OH;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_13 *= mole_frac_NC_H;
      double mole_frac_NC_H2O = scratch[6][tid];
      rr_r_13 *= mole_frac_NC_H2O;
    }
    else if (wid == 5)
    {
      double mole_frac_NC_O = scratch[3][tid];
      rr_f_13 *= mole_frac_NC_O;
      double mole_frac_NC_H2O = scratch[6][tid];
      rr_f_13 *= mole_frac_NC_H2O;
      double mole_frac_NC_OH = scratch[5][tid];
      rr_r_13 *= mole_frac_NC_OH;
      rr_r_13 *= mole_frac_NC_OH;
    }
    else if (wid == 6)
    {
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_f_13 *= mole_frac_NC_H2;
      double thb_1 = scratch[31][tid];
      rr_f_13 *= thb_1;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_13 *= mole_frac_NC_H;
      rr_r_13 *= mole_frac_NC_H;
      rr_r_13 *= thb_1;
    }
    else if (wid == 7)
    {
      double mole_frac_NC_O = scratch[3][tid];
      rr_f_13 *= mole_frac_NC_O;
      rr_f_13 *= mole_frac_NC_O;
      double thb_1 = scratch[31][tid];
      rr_f_13 *= thb_1;
      double mole_frac_NC_O2 = scratch[14][tid];
      rr_r_13 *= mole_frac_NC_O2;
      rr_r_13 *= thb_1;
    }
    scratch[wid+75][tid] = rr_f_13;
    scratch[wid+83][tid] = rr_r_13;
    asm volatile("bar.sync 0, 256;" : : : "memory");
    if (wid == 0)
    {
    }
    else if (wid == 1)
    {
    }
    else if (wid == 2)
    {
    }
    else if (wid == 3)
    {
      double rate_76 = scratch[76][tid];
      avals[0] += rate_76;
      double rate_84 = scratch[84][tid];
      denoms[0] += rate_84;
    }
    else if (wid == 4)
    {
    }
    else if (wid == 5)
    {
    }
    else if (wid == 6)
    {
    }
    else if (wid == 7)
    {
      double rate_75 = scratch[75][tid];
      avals[0] += rate_75;
      double rate_83 = scratch[83][tid];
      denoms[0] += rate_83;
    }
    asm volatile("bar.sync 0, 256;" : : : "memory");
    if (wid == 0)
    {
      denoms[0] = 1.0/denoms[0];
      scratch[75][tid] = avals[0]*denoms[0];
      scratch[76][tid] = avals[1]*denoms[0];
      scratch[77][tid] = avals[2]*denoms[0];
      denoms[1] = 1.0/denoms[1];
      scratch[78][tid] = avals[3]*denoms[1];
      asm volatile("bar.arrive 1, 256;" : : : "memory");
    }
    else if (wid == 1)
    {
      denoms[0] = 1.0/denoms[0];
      scratch[79][tid] = avals[0]*denoms[0];
      scratch[80][tid] = avals[1]*denoms[0];
      scratch[81][tid] = avals[2]*denoms[0];
      asm volatile("bar.arrive 1, 256;" : : : "memory");
    }
    else if (wid == 2)
    {
      denoms[0] = 1.0/denoms[0];
      scratch[82][tid] = avals[0]*denoms[0];
      scratch[83][tid] = avals[1]*denoms[0];
      asm volatile("bar.arrive 1, 256;" : : : "memory");
    }
    else if (wid == 3)
    {
      denoms[0] = 1.0/denoms[0];
      scratch[84][tid] = avals[0]*denoms[0];
      scratch[85][tid] = avals[1]*denoms[0];
      scratch[86][tid] = avals[2]*denoms[0];
      scratch[87][tid] = avals[3]*denoms[0];
      scratch[88][tid] = avals[4]*denoms[0];
      asm volatile("bar.arrive 1, 256;" : : : "memory");
    }
    else if (wid == 4)
    {
      denoms[0] = 1.0/denoms[0];
      scratch[89][tid] = avals[0]*denoms[0];
      scratch[90][tid] = avals[1]*denoms[0];
      scratch[91][tid] = avals[2]*denoms[0];
      asm volatile("bar.sync 1, 256;" : : : "memory");
      double a4_0 = scratch[84][tid];
      double a4_1 = scratch[85][tid];
      double a4_2 = scratch[86][tid];
      double a4_3 = scratch[87][tid];
      double a4_6 = scratch[88][tid];
      double a3_0 = scratch[82][tid];
      double a3_4 = scratch[83][tid];
      double a9_0 = scratch[78][tid];
      double den;
      // QSS 3
      // QSS 4
      asm volatile("bar.sync 2, 64;" : : : "memory");
      asm volatile("bar.sync 4, 64;" : : : "memory");
      asm volatile("bar.sync 6, 64;" : : : "memory");
      a4_0 = a4_0 + a4_3 * a3_0;
      den = 1.0/(1.0 - a3_4*a4_3);
      a4_0 = a4_0*den;
      a4_1 = a4_1*den;
      a4_2 = a4_2*den;
      a4_6 = a4_6*den;
      double a6_0 = scratch[84][tid];
      a4_0 = a4_0 + a4_6 * a6_0;
      double a6_4 = scratch[85][tid];
      den = 1.0/(1.0 - a6_4*a4_6);
      a4_0 = a4_0*den;
      a4_1 = a4_1*den;
      a4_2 = a4_2*den;
      double a2_0 = scratch[86][tid];
      a4_0 = a4_0 + a4_2 * a2_0;
      double a2_4 = scratch[87][tid];
      den = 1.0/(1.0 - a2_4*a4_2);
      double a2_1 = scratch[88][tid];
      a4_1 = a4_1 + a4_2 * a2_1;
      a4_0 = a4_0*den;
      a4_1 = a4_1*den;
      double a1_0 = scratch[89][tid];
      a4_0 = a4_0 + a4_1 * a1_0;
      double a1_4 = scratch[90][tid];
      den = 1.0/(1.0 - a1_4*a4_1);
      a4_0 = a4_0*den;
      // QSS 9
      // Xstat 4
      double xq_4;
      xq_4 = a4_0;
      scratch[78][tid] = xq_4;
      asm volatile("bar.arrive 3, 64;" : : : "memory");
      asm volatile("bar.arrive 5, 64;" : : : "memory");
      asm volatile("bar.arrive 7, 64;" : : : "memory");
      // Xstat 3
      double xq_3;
      xq_3 = a3_0 + a3_4*xq_4;
      scratch[77][tid] = xq_3;
      // Xstat 9
      double xq_9;
      xq_9 = a9_0;
      scratch[83][tid] = xq_9;
    }
    else if (wid == 5)
    {
      denoms[0] = 1.0/denoms[0];
      scratch[92][tid] = avals[0]*denoms[0];
      scratch[93][tid] = avals[1]*denoms[0];
      asm volatile("bar.sync 1, 256;" : : : "memory");
      double a1_0 = scratch[75][tid];
      double a1_2 = scratch[76][tid];
      double a1_4 = scratch[77][tid];
      double a5_0 = scratch[94][tid];
      double den;
      // QSS 1
      asm volatile("bar.sync 8, 64;" : : : "memory");
      double a2_0 = scratch[86][tid];
      a1_0 = a1_0 + a1_2 * a2_0;
      double a2_1 = scratch[88][tid];
      den = 1.0/(1.0 - a2_1*a1_2);
      double a2_4 = scratch[87][tid];
      a1_4 = a1_4 + a1_2 * a2_4;
      a1_0 = a1_0*den;
      a1_4 = a1_4*den;
      scratch[89][tid] = a1_0;
      scratch[90][tid] = a1_4;
      asm volatile("bar.arrive 2, 64;" : : : "memory");
      // QSS 5
      // Xstat 1
      double xq_1;
      asm volatile("bar.sync 3, 64;" : : : "memory");
      double xq_4 = scratch[78][tid];
      xq_1 = a1_0 + a1_4*xq_4;
      scratch[75][tid] = xq_1;
      asm volatile("bar.arrive 9, 64;" : : : "memory");
      // Xstat 5
      double xq_5;
      xq_5 = a5_0;
      scratch[79][tid] = xq_5;
    }
    else if (wid == 6)
    {
      denoms[0] = 1.0/denoms[0];
      scratch[94][tid] = avals[0]*denoms[0];
      asm volatile("bar.sync 1, 256;" : : : "memory");
      double a6_0 = scratch[89][tid];
      double a6_4 = scratch[90][tid];
      double a6_8 = scratch[91][tid];
      double a8_0 = scratch[92][tid];
      double a8_6 = scratch[93][tid];
      double den;
      // QSS 8
      // QSS 6
      a6_0 = a6_0 + a6_8 * a8_0;
      den = 1.0/(1.0 - a8_6*a6_8);
      a6_0 = a6_0*den;
      a6_4 = a6_4*den;
      scratch[84][tid] = a6_0;
      scratch[85][tid] = a6_4;
      asm volatile("bar.arrive 6, 64;" : : : "memory");
      // Xstat 6
      double xq_6;
      asm volatile("bar.sync 7, 64;" : : : "memory");
      double xq_4 = scratch[78][tid];
      xq_6 = a6_0 + a6_4*xq_4;
      scratch[80][tid] = xq_6;
      // Xstat 8
      double xq_8;
      xq_8 = a8_0 + a8_6*xq_6;
      scratch[82][tid] = xq_8;
    }
    else if (wid == 7)
    {
      denoms[0] = 1.0/denoms[0];
      scratch[95][tid] = avals[0]*denoms[0];
      asm volatile("bar.sync 1, 256;" : : : "memory");
      double a2_0 = scratch[79][tid];
      double a2_1 = scratch[80][tid];
      double a2_4 = scratch[81][tid];
      double a7_0 = scratch[95][tid];
      // QSS 2
      scratch[86][tid] = a2_0;
      scratch[88][tid] = a2_1;
      scratch[87][tid] = a2_4;
      asm volatile("bar.arrive 4, 64;" : : : "memory");
      asm volatile("bar.arrive 8, 64;" : : : "memory");
      // QSS 7
      // Xstat 2
      double xq_2;
      asm volatile("bar.sync 5, 64;" : : : "memory");
      asm volatile("bar.sync 9, 64;" : : : "memory");
      double xq_1 = scratch[75][tid];
      double xq_4 = scratch[78][tid];
      xq_2 = a2_0 + a2_1*xq_1 + a2_4*xq_4;
      scratch[76][tid] = xq_2;
      // Xstat 7
      double xq_7;
      xq_7 = a7_0;
      scratch[81][tid] = xq_7;
    }
    double rr_f_14 = rr_f_13,  rr_r_14 = rr_r_13;
    /* Chemistry for level 14 */
    {
      {
        int hi_part,  lo_part;
        hi_part = __shfl(__double2hiint(real_constants[2]), 20, 32);
        lo_part = __shfl(__double2loint(real_constants[2]), 20, 32);
        double arrhenius = __hiloint2double(hi_part, lo_part) * vlntemp;
        hi_part = __shfl(__double2hiint(real_constants[2]), 21, 32);
        lo_part = __shfl(__double2loint(real_constants[2]), 21, 32);
  arrhenius = __fma_rn(__hiloint2double(hi_part, lo_part),  ortc,  arrhenius); 
        arrhenius = exp(arrhenius);
        hi_part = __shfl(__double2hiint(real_constants[2]), 22, 32);
        lo_part = __shfl(__double2loint(real_constants[2]), 22, 32);
        rr_f_14 = __hiloint2double(hi_part, lo_part) * arrhenius;
      }
      {
        int hi_part,  lo_part;
        hi_part = __shfl(__double2hiint(real_constants[2]), 23, 32);
        lo_part = __shfl(__double2loint(real_constants[2]), 23, 32);
        double arrhenius = __hiloint2double(hi_part, lo_part) * vlntemp;
        hi_part = __shfl(__double2hiint(real_constants[2]), 24, 32);
        lo_part = __shfl(__double2loint(real_constants[2]), 24, 32);
  arrhenius = __fma_rn(__hiloint2double(hi_part, lo_part),  ortc,  arrhenius); 
        arrhenius = exp(arrhenius);
        hi_part = __shfl(__double2hiint(real_constants[2]), 25, 32);
        lo_part = __shfl(__double2loint(real_constants[2]), 25, 32);
        rr_r_14 = __hiloint2double(hi_part, lo_part) * arrhenius;
      }
    }
    if (wid == 0)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_14 *= mole_frac_NC_H;
      double mole_frac_NC_O = scratch[3][tid];
      rr_f_14 *= mole_frac_NC_O;
      double thb_1 = scratch[31][tid];
      rr_f_14 *= thb_1;
      double mole_frac_NC_OH = scratch[5][tid];
      rr_r_14 *= mole_frac_NC_OH;
      rr_r_14 *= thb_1;
    }
    else if (wid == 1)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_14 *= mole_frac_NC_H;
      double mole_frac_NC_OH = scratch[5][tid];
      rr_f_14 *= mole_frac_NC_OH;
      double thb_1 = scratch[31][tid];
      rr_f_14 *= thb_1;
      double mole_frac_NC_H2O = scratch[6][tid];
      rr_r_14 *= mole_frac_NC_H2O;
      rr_r_14 *= thb_1;
    }
    else if (wid == 2)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_14 *= mole_frac_NC_H;
      double mole_frac_NC_HO2 = scratch[15][tid];
      rr_f_14 *= mole_frac_NC_HO2;
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_r_14 *= mole_frac_NC_H2;
      double mole_frac_NC_O2 = scratch[14][tid];
      rr_r_14 *= mole_frac_NC_O2;
    }
    else if (wid == 3)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_14 *= mole_frac_NC_H;
      double mole_frac_NC_HO2 = scratch[15][tid];
      rr_f_14 *= mole_frac_NC_HO2;
      double mole_frac_NC_OH = scratch[5][tid];
      rr_r_14 *= mole_frac_NC_OH;
      rr_r_14 *= mole_frac_NC_OH;
    }
    else if (wid == 4)
    {
      double mole_frac_NC_O = scratch[3][tid];
      rr_f_14 *= mole_frac_NC_O;
      double mole_frac_NC_HO2 = scratch[15][tid];
      rr_f_14 *= mole_frac_NC_HO2;
      double mole_frac_NC_OH = scratch[5][tid];
      rr_r_14 *= mole_frac_NC_OH;
      double mole_frac_NC_O2 = scratch[14][tid];
      rr_r_14 *= mole_frac_NC_O2;
    }
    else if (wid == 5)
    {
      double mole_frac_NC_OH = scratch[5][tid];
      rr_f_14 *= mole_frac_NC_OH;
      double mole_frac_NC_HO2 = scratch[15][tid];
      rr_f_14 *= mole_frac_NC_HO2;
      double mole_frac_NC_H2O = scratch[6][tid];
      rr_r_14 *= mole_frac_NC_H2O;
      double mole_frac_NC_O2 = scratch[14][tid];
      rr_r_14 *= mole_frac_NC_O2;
    }
    else if (wid == 6)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_14 *= mole_frac_NC_H;
      double mole_frac_NC_H2O2 = scratch[16][tid];
      rr_f_14 *= mole_frac_NC_H2O2;
      double mole_frac_NC_OH = scratch[5][tid];
      rr_r_14 *= mole_frac_NC_OH;
      double mole_frac_NC_H2O = scratch[6][tid];
      rr_r_14 *= mole_frac_NC_H2O;
    }
    else if (wid == 7)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_14 *= mole_frac_NC_H;
      double mole_frac_NC_H2O2 = scratch[16][tid];
      rr_f_14 *= mole_frac_NC_H2O2;
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_r_14 *= mole_frac_NC_H2;
      double mole_frac_NC_HO2 = scratch[15][tid];
      rr_r_14 *= mole_frac_NC_HO2;
    }
    double rr_f_15 = rr_f_14,  rr_r_15 = rr_r_14;
    /* Chemistry for level 15 */
    {
      {
        int hi_part,  lo_part;
        hi_part = __shfl(__double2hiint(real_constants[2]), 26, 32);
        lo_part = __shfl(__double2loint(real_constants[2]), 26, 32);
        double arrhenius = __hiloint2double(hi_part, lo_part) * vlntemp;
        hi_part = __shfl(__double2hiint(real_constants[2]), 27, 32);
        lo_part = __shfl(__double2loint(real_constants[2]), 27, 32);
  arrhenius = __fma_rn(__hiloint2double(hi_part, lo_part),  ortc,  arrhenius); 
        arrhenius = exp(arrhenius);
        hi_part = __shfl(__double2hiint(real_constants[2]), 28, 32);
        lo_part = __shfl(__double2loint(real_constants[2]), 28, 32);
        rr_f_15 = __hiloint2double(hi_part, lo_part) * arrhenius;
      }
      {
        int hi_part,  lo_part;
        hi_part = __shfl(__double2hiint(real_constants[2]), 29, 32);
        lo_part = __shfl(__double2loint(real_constants[2]), 29, 32);
        double arrhenius = __hiloint2double(hi_part, lo_part) * vlntemp;
        hi_part = __shfl(__double2hiint(real_constants[2]), 30, 32);
        lo_part = __shfl(__double2loint(real_constants[2]), 30, 32);
  arrhenius = __fma_rn(__hiloint2double(hi_part, lo_part),  ortc,  arrhenius); 
        arrhenius = exp(arrhenius);
        hi_part = __shfl(__double2hiint(real_constants[2]), 31, 32);
        lo_part = __shfl(__double2loint(real_constants[2]), 31, 32);
        rr_r_15 = __hiloint2double(hi_part, lo_part) * arrhenius;
      }
    }
    if (wid == 0)
    {
      double mole_frac_NC_O = scratch[3][tid];
      rr_f_15 *= mole_frac_NC_O;
      double mole_frac_NC_H2O2 = scratch[16][tid];
      rr_f_15 *= mole_frac_NC_H2O2;
      double mole_frac_NC_OH = scratch[5][tid];
      rr_r_15 *= mole_frac_NC_OH;
      double mole_frac_NC_HO2 = scratch[15][tid];
      rr_r_15 *= mole_frac_NC_HO2;
    }
    else if (wid == 1)
    {
      double mole_frac_NC_CO = scratch[8][tid];
      rr_f_15 *= mole_frac_NC_CO;
      double mole_frac_NC_O2 = scratch[14][tid];
      rr_f_15 *= mole_frac_NC_O2;
      double mole_frac_NC_O = scratch[3][tid];
      rr_r_15 *= mole_frac_NC_O;
      double mole_frac_NC_CO2 = scratch[17][tid];
      rr_r_15 *= mole_frac_NC_CO2;
    }
    else if (wid == 2)
    {
      double mole_frac_NC_CO = scratch[8][tid];
      rr_f_15 *= mole_frac_NC_CO;
      double mole_frac_NC_HO2 = scratch[15][tid];
      rr_f_15 *= mole_frac_NC_HO2;
      double mole_frac_NC_OH = scratch[5][tid];
      rr_r_15 *= mole_frac_NC_OH;
      double mole_frac_NC_CO2 = scratch[17][tid];
      rr_r_15 *= mole_frac_NC_CO2;
    }
    else if (wid == 3)
    {
      double mole_frac_NC_OH = scratch[5][tid];
      rr_f_15 *= mole_frac_NC_OH;
      double mole_frac_NC_CO = scratch[8][tid];
      rr_f_15 *= mole_frac_NC_CO;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_15 *= mole_frac_NC_H;
      double mole_frac_NC_CO2 = scratch[17][tid];
      rr_r_15 *= mole_frac_NC_CO2;
    }
    else if (wid == 4)
    {
      double mole_frac_NC_CH2O = scratch[11][tid];
      rr_f_15 *= mole_frac_NC_CH2O;
      double thb_1 = scratch[31][tid];
      rr_f_15 *= thb_1;
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_r_15 *= mole_frac_NC_H2;
      double mole_frac_NC_CO = scratch[8][tid];
      rr_r_15 *= mole_frac_NC_CO;
      rr_r_15 *= thb_1;
    }
    else if (wid == 5)
    {
      double mole_frac_NC_CH3 = scratch[2][tid];
      rr_f_15 *= mole_frac_NC_CH3;
      double mole_frac_NC_O = scratch[3][tid];
      rr_f_15 *= mole_frac_NC_O;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_15 *= mole_frac_NC_H;
      double mole_frac_NC_CH2O = scratch[11][tid];
      rr_r_15 *= mole_frac_NC_CH2O;
    }
    else if (wid == 6)
    {
      double mole_frac_NC_CH3 = scratch[2][tid];
      rr_f_15 *= mole_frac_NC_CH3;
      double mole_frac_NC_O2 = scratch[14][tid];
      rr_f_15 *= mole_frac_NC_O2;
      double mole_frac_NC_O = scratch[3][tid];
      rr_r_15 *= mole_frac_NC_O;
      double mole_frac_NC_CH3O = scratch[13][tid];
      rr_r_15 *= mole_frac_NC_CH3O;
    }
    else if (wid == 7)
    {
      double mole_frac_NC_CH3 = scratch[2][tid];
      rr_f_15 *= mole_frac_NC_CH3;
      double mole_frac_NC_O2 = scratch[14][tid];
      rr_f_15 *= mole_frac_NC_O2;
      double mole_frac_NC_OH = scratch[5][tid];
      rr_r_15 *= mole_frac_NC_OH;
      double mole_frac_NC_CH2O = scratch[11][tid];
      rr_r_15 *= mole_frac_NC_CH2O;
    }
    double rr_f_16 = rr_f_15,  rr_r_16 = rr_r_15;
    /* Chemistry for level 16 */
    {
      {
        int hi_part,  lo_part;
        hi_part = __shfl(__double2hiint(real_constants[3]), 0, 32);
        lo_part = __shfl(__double2loint(real_constants[3]), 0, 32);
        double arrhenius = __hiloint2double(hi_part, lo_part) * vlntemp;
        hi_part = __shfl(__double2hiint(real_constants[3]), 1, 32);
        lo_part = __shfl(__double2loint(real_constants[3]), 1, 32);
  arrhenius = __fma_rn(__hiloint2double(hi_part, lo_part),  ortc,  arrhenius); 
        arrhenius = exp(arrhenius);
        hi_part = __shfl(__double2hiint(real_constants[3]), 2, 32);
        lo_part = __shfl(__double2loint(real_constants[3]), 2, 32);
        rr_f_16 = __hiloint2double(hi_part, lo_part) * arrhenius;
      }
      {
        int hi_part,  lo_part;
        hi_part = __shfl(__double2hiint(real_constants[3]), 3, 32);
        lo_part = __shfl(__double2loint(real_constants[3]), 3, 32);
        double arrhenius = __hiloint2double(hi_part, lo_part) * vlntemp;
        hi_part = __shfl(__double2hiint(real_constants[3]), 4, 32);
        lo_part = __shfl(__double2loint(real_constants[3]), 4, 32);
  arrhenius = __fma_rn(__hiloint2double(hi_part, lo_part),  ortc,  arrhenius); 
        arrhenius = exp(arrhenius);
        hi_part = __shfl(__double2hiint(real_constants[3]), 5, 32);
        lo_part = __shfl(__double2loint(real_constants[3]), 5, 32);
        rr_r_16 = __hiloint2double(hi_part, lo_part) * arrhenius;
      }
    }
    if (wid == 0)
    {
      double mole_frac_NC_CH3 = scratch[2][tid];
      rr_f_16 *= mole_frac_NC_CH3;
      double mole_frac_NC_HO2 = scratch[15][tid];
      rr_f_16 *= mole_frac_NC_HO2;
      double mole_frac_NC_OH = scratch[5][tid];
      rr_r_16 *= mole_frac_NC_OH;
      double mole_frac_NC_CH3O = scratch[13][tid];
      rr_r_16 *= mole_frac_NC_CH3O;
    }
    else if (wid == 1)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_16 *= mole_frac_NC_H;
      double mole_frac_NC_CH4 = scratch[4][tid];
      rr_f_16 *= mole_frac_NC_CH4;
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_r_16 *= mole_frac_NC_H2;
      double mole_frac_NC_CH3 = scratch[2][tid];
      rr_r_16 *= mole_frac_NC_CH3;
    }
    else if (wid == 2)
    {
      double mole_frac_NC_O = scratch[3][tid];
      rr_f_16 *= mole_frac_NC_O;
      double mole_frac_NC_CH4 = scratch[4][tid];
      rr_f_16 *= mole_frac_NC_CH4;
      double mole_frac_NC_CH3 = scratch[2][tid];
      rr_r_16 *= mole_frac_NC_CH3;
      double mole_frac_NC_OH = scratch[5][tid];
      rr_r_16 *= mole_frac_NC_OH;
    }
    else if (wid == 3)
    {
      double mole_frac_NC_CH4 = scratch[4][tid];
      rr_f_16 *= mole_frac_NC_CH4;
      double mole_frac_NC_OH = scratch[5][tid];
      rr_f_16 *= mole_frac_NC_OH;
      double mole_frac_NC_CH3 = scratch[2][tid];
      rr_r_16 *= mole_frac_NC_CH3;
      double mole_frac_NC_H2O = scratch[6][tid];
      rr_r_16 *= mole_frac_NC_H2O;
    }
    else if (wid == 4)
    {
      double mole_frac_NC_CH3 = scratch[2][tid];
      rr_f_16 *= mole_frac_NC_CH3;
      double mole_frac_NC_HO2 = scratch[15][tid];
      rr_f_16 *= mole_frac_NC_HO2;
      double mole_frac_NC_CH4 = scratch[4][tid];
      rr_r_16 *= mole_frac_NC_CH4;
      double mole_frac_NC_O2 = scratch[14][tid];
      rr_r_16 *= mole_frac_NC_O2;
    }
    else if (wid == 5)
    {
      double mole_frac_NC_CH4 = scratch[4][tid];
      rr_f_16 *= mole_frac_NC_CH4;
      double mole_frac_NC_HO2 = scratch[15][tid];
      rr_f_16 *= mole_frac_NC_HO2;
      double mole_frac_NC_CH3 = scratch[2][tid];
      rr_r_16 *= mole_frac_NC_CH3;
      double mole_frac_NC_H2O2 = scratch[16][tid];
      rr_r_16 *= mole_frac_NC_H2O2;
    }
    else if (wid == 6)
    {
      double mole_frac_NC_CH3O = scratch[13][tid];
      rr_f_16 *= mole_frac_NC_CH3O;
      double thb_0 = scratch[30][tid];
      rr_f_16 *= thb_0;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_16 *= mole_frac_NC_H;
      double mole_frac_NC_CH2O = scratch[11][tid];
      rr_r_16 *= mole_frac_NC_CH2O;
      rr_r_16 *= thb_0;
    }
    else if (wid == 7)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_16 *= mole_frac_NC_H;
      double mole_frac_NC_CH3O = scratch[13][tid];
      rr_f_16 *= mole_frac_NC_CH3O;
      double mole_frac_NC_CH3 = scratch[2][tid];
      rr_r_16 *= mole_frac_NC_CH3;
      double mole_frac_NC_OH = scratch[5][tid];
      rr_r_16 *= mole_frac_NC_OH;
    }
    double rr_f_17 = rr_f_16,  rr_r_17 = rr_r_16;
    /* Chemistry for level 17 */
    {
      {
        int hi_part,  lo_part;
        hi_part = __shfl(__double2hiint(real_constants[3]), 6, 32);
        lo_part = __shfl(__double2loint(real_constants[3]), 6, 32);
        double arrhenius = __hiloint2double(hi_part, lo_part) * vlntemp;
        hi_part = __shfl(__double2hiint(real_constants[3]), 7, 32);
        lo_part = __shfl(__double2loint(real_constants[3]), 7, 32);
  arrhenius = __fma_rn(__hiloint2double(hi_part, lo_part),  ortc,  arrhenius); 
        arrhenius = exp(arrhenius);
        hi_part = __shfl(__double2hiint(real_constants[3]), 8, 32);
        lo_part = __shfl(__double2loint(real_constants[3]), 8, 32);
        rr_f_17 = __hiloint2double(hi_part, lo_part) * arrhenius;
      }
      {
        int hi_part,  lo_part;
        hi_part = __shfl(__double2hiint(real_constants[3]), 9, 32);
        lo_part = __shfl(__double2loint(real_constants[3]), 9, 32);
        double arrhenius = __hiloint2double(hi_part, lo_part) * vlntemp;
        hi_part = __shfl(__double2hiint(real_constants[3]), 10, 32);
        lo_part = __shfl(__double2loint(real_constants[3]), 10, 32);
  arrhenius = __fma_rn(__hiloint2double(hi_part, lo_part),  ortc,  arrhenius); 
        arrhenius = exp(arrhenius);
        hi_part = __shfl(__double2hiint(real_constants[3]), 11, 32);
        lo_part = __shfl(__double2loint(real_constants[3]), 11, 32);
        rr_r_17 = __hiloint2double(hi_part, lo_part) * arrhenius;
      }
    }
    if (wid == 0)
    {
      double mole_frac_NC_O = scratch[3][tid];
      rr_f_17 *= mole_frac_NC_O;
      double mole_frac_NC_CH3O = scratch[13][tid];
      rr_f_17 *= mole_frac_NC_CH3O;
      double mole_frac_NC_OH = scratch[5][tid];
      rr_r_17 *= mole_frac_NC_OH;
      double mole_frac_NC_CH2O = scratch[11][tid];
      rr_r_17 *= mole_frac_NC_CH2O;
    }
    else if (wid == 1)
    {
      double mole_frac_NC_OH = scratch[5][tid];
      rr_f_17 *= mole_frac_NC_OH;
      double mole_frac_NC_CH3O = scratch[13][tid];
      rr_f_17 *= mole_frac_NC_CH3O;
      double mole_frac_NC_H2O = scratch[6][tid];
      rr_r_17 *= mole_frac_NC_H2O;
      double mole_frac_NC_CH2O = scratch[11][tid];
      rr_r_17 *= mole_frac_NC_CH2O;
    }
    else if (wid == 2)
    {
      double mole_frac_NC_CH3O = scratch[13][tid];
      rr_f_17 *= mole_frac_NC_CH3O;
      double mole_frac_NC_HO2 = scratch[15][tid];
      rr_f_17 *= mole_frac_NC_HO2;
      double mole_frac_NC_CH2O = scratch[11][tid];
      rr_r_17 *= mole_frac_NC_CH2O;
      double mole_frac_NC_H2O2 = scratch[16][tid];
      rr_r_17 *= mole_frac_NC_H2O2;
    }
    else if (wid == 3)
    {
      double mole_frac_NC_CO = scratch[8][tid];
      rr_f_17 *= mole_frac_NC_CO;
      double mole_frac_NC_CH3O = scratch[13][tid];
      rr_f_17 *= mole_frac_NC_CH3O;
      double mole_frac_NC_CH3 = scratch[2][tid];
      rr_r_17 *= mole_frac_NC_CH3;
      double mole_frac_NC_CO2 = scratch[17][tid];
      rr_r_17 *= mole_frac_NC_CO2;
    }
    else if (wid == 4)
    {
      double mole_frac_NC_CH3 = scratch[2][tid];
      rr_f_17 *= mole_frac_NC_CH3;
      rr_f_17 *= mole_frac_NC_CH3;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_17 *= mole_frac_NC_H;
      double mole_frac_NC_C2H5 = scratch[10][tid];
      rr_r_17 *= mole_frac_NC_C2H5;
    }
    else if (wid == 5)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_17 *= mole_frac_NC_H;
      double mole_frac_NC_C2H6 = scratch[12][tid];
      rr_f_17 *= mole_frac_NC_C2H6;
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_r_17 *= mole_frac_NC_H2;
      double mole_frac_NC_C2H5 = scratch[10][tid];
      rr_r_17 *= mole_frac_NC_C2H5;
    }
    else if (wid == 6)
    {
      double mole_frac_NC_O = scratch[3][tid];
      rr_f_17 *= mole_frac_NC_O;
      double mole_frac_NC_C2H6 = scratch[12][tid];
      rr_f_17 *= mole_frac_NC_C2H6;
      double mole_frac_NC_OH = scratch[5][tid];
      rr_r_17 *= mole_frac_NC_OH;
      double mole_frac_NC_C2H5 = scratch[10][tid];
      rr_r_17 *= mole_frac_NC_C2H5;
    }
    else if (wid == 7)
    {
      double mole_frac_NC_OH = scratch[5][tid];
      rr_f_17 *= mole_frac_NC_OH;
      double mole_frac_NC_C2H6 = scratch[12][tid];
      rr_f_17 *= mole_frac_NC_C2H6;
      double mole_frac_NC_H2O = scratch[6][tid];
      rr_r_17 *= mole_frac_NC_H2O;
      double mole_frac_NC_C2H5 = scratch[10][tid];
      rr_r_17 *= mole_frac_NC_C2H5;
    }
    double rr_f_18 = rr_f_17,  rr_r_18 = rr_r_17;
    /* Chemistry for level 18 */
    {
      {
        int hi_part,  lo_part;
        hi_part = __shfl(__double2hiint(real_constants[3]), 12, 32);
        lo_part = __shfl(__double2loint(real_constants[3]), 12, 32);
        double arrhenius = __hiloint2double(hi_part, lo_part) * vlntemp;
        hi_part = __shfl(__double2hiint(real_constants[3]), 13, 32);
        lo_part = __shfl(__double2loint(real_constants[3]), 13, 32);
  arrhenius = __fma_rn(__hiloint2double(hi_part, lo_part),  ortc,  arrhenius); 
        arrhenius = exp(arrhenius);
        hi_part = __shfl(__double2hiint(real_constants[3]), 14, 32);
        lo_part = __shfl(__double2loint(real_constants[3]), 14, 32);
        rr_f_18 = __hiloint2double(hi_part, lo_part) * arrhenius;
      }
      {
        int hi_part,  lo_part;
        hi_part = __shfl(__double2hiint(real_constants[3]), 15, 32);
        lo_part = __shfl(__double2loint(real_constants[3]), 15, 32);
        double arrhenius = __hiloint2double(hi_part, lo_part) * vlntemp;
        hi_part = __shfl(__double2hiint(real_constants[3]), 16, 32);
        lo_part = __shfl(__double2loint(real_constants[3]), 16, 32);
  arrhenius = __fma_rn(__hiloint2double(hi_part, lo_part),  ortc,  arrhenius); 
        arrhenius = exp(arrhenius);
        hi_part = __shfl(__double2hiint(real_constants[3]), 17, 32);
        lo_part = __shfl(__double2loint(real_constants[3]), 17, 32);
        rr_r_18 = __hiloint2double(hi_part, lo_part) * arrhenius;
      }
    }
    if (wid == 0)
    {
      double mole_frac_NC_C2H6 = scratch[12][tid];
      rr_f_18 *= mole_frac_NC_C2H6;
      double mole_frac_NC_O2 = scratch[14][tid];
      rr_f_18 *= mole_frac_NC_O2;
      double mole_frac_NC_C2H5 = scratch[10][tid];
      rr_r_18 *= mole_frac_NC_C2H5;
      double mole_frac_NC_HO2 = scratch[15][tid];
      rr_r_18 *= mole_frac_NC_HO2;
    }
    else if (wid == 1)
    {
      double mole_frac_NC_C2H6 = scratch[12][tid];
      rr_f_18 *= mole_frac_NC_C2H6;
      double mole_frac_NC_HO2 = scratch[15][tid];
      rr_f_18 *= mole_frac_NC_HO2;
      double mole_frac_NC_C2H5 = scratch[10][tid];
      rr_r_18 *= mole_frac_NC_C2H5;
      double mole_frac_NC_H2O2 = scratch[16][tid];
      rr_r_18 *= mole_frac_NC_H2O2;
    }
    else if (wid == 2)
    {
      double mole_frac_NC_CH3 = scratch[2][tid];
      rr_f_18 *= mole_frac_NC_CH3;
      double mole_frac_NC_C2H6 = scratch[12][tid];
      rr_f_18 *= mole_frac_NC_C2H6;
      double mole_frac_NC_CH4 = scratch[4][tid];
      rr_r_18 *= mole_frac_NC_CH4;
      double mole_frac_NC_C2H5 = scratch[10][tid];
      rr_r_18 *= mole_frac_NC_C2H5;
    }
    else if (wid == 3)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_18 *= mole_frac_NC_H;
      double mole_frac_NC_C2H5 = scratch[10][tid];
      rr_f_18 *= mole_frac_NC_C2H5;
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_r_18 *= mole_frac_NC_H2;
      double mole_frac_NC_C2H4 = scratch[9][tid];
      rr_r_18 *= mole_frac_NC_C2H4;
    }
    else if (wid == 4)
    {
      double mole_frac_NC_O = scratch[3][tid];
      rr_f_18 *= mole_frac_NC_O;
      double mole_frac_NC_C2H5 = scratch[10][tid];
      rr_f_18 *= mole_frac_NC_C2H5;
      double mole_frac_NC_CH3 = scratch[2][tid];
      rr_r_18 *= mole_frac_NC_CH3;
      double mole_frac_NC_CH2O = scratch[11][tid];
      rr_r_18 *= mole_frac_NC_CH2O;
    }
    else if (wid == 5)
    {
      double mole_frac_NC_C2H5 = scratch[10][tid];
      rr_f_18 *= mole_frac_NC_C2H5;
      double mole_frac_NC_O2 = scratch[14][tid];
      rr_f_18 *= mole_frac_NC_O2;
      double mole_frac_NC_C2H4 = scratch[9][tid];
      rr_r_18 *= mole_frac_NC_C2H4;
      double mole_frac_NC_HO2 = scratch[15][tid];
      rr_r_18 *= mole_frac_NC_HO2;
    }
    else if (wid == 6)
    {
      double mole_frac_NC_C2H5 = scratch[10][tid];
      rr_f_18 *= mole_frac_NC_C2H5;
      rr_f_18 *= mole_frac_NC_C2H5;
      double mole_frac_NC_C2H4 = scratch[9][tid];
      rr_r_18 *= mole_frac_NC_C2H4;
      double mole_frac_NC_C2H6 = scratch[12][tid];
      rr_r_18 *= mole_frac_NC_C2H6;
    }
    else if (wid == 7)
    {
      double mole_frac_NC_O = scratch[3][tid];
      rr_f_18 *= mole_frac_NC_O;
      double mole_frac_NC_C2H5 = scratch[10][tid];
      rr_f_18 *= mole_frac_NC_C2H5;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_18 *= mole_frac_NC_H;
      double mole_frac_NC_CH3HCO = scratch[18][tid];
      rr_r_18 *= mole_frac_NC_CH3HCO;
    }
    double rr_f_19 = rr_f_18,  rr_r_19 = rr_r_18;
    /* Chemistry for level 19 */
    {
      {
        int hi_part,  lo_part;
        hi_part = __shfl(__double2hiint(real_constants[3]), 18, 32);
        lo_part = __shfl(__double2loint(real_constants[3]), 18, 32);
        double arrhenius = __hiloint2double(hi_part, lo_part) * vlntemp;
        hi_part = __shfl(__double2hiint(real_constants[3]), 19, 32);
        lo_part = __shfl(__double2loint(real_constants[3]), 19, 32);
  arrhenius = __fma_rn(__hiloint2double(hi_part, lo_part),  ortc,  arrhenius); 
        arrhenius = exp(arrhenius);
        hi_part = __shfl(__double2hiint(real_constants[3]), 20, 32);
        lo_part = __shfl(__double2loint(real_constants[3]), 20, 32);
        rr_f_19 = __hiloint2double(hi_part, lo_part) * arrhenius;
      }
      {
        int hi_part,  lo_part;
        hi_part = __shfl(__double2hiint(real_constants[3]), 21, 32);
        lo_part = __shfl(__double2loint(real_constants[3]), 21, 32);
        double arrhenius = __hiloint2double(hi_part, lo_part) * vlntemp;
        hi_part = __shfl(__double2hiint(real_constants[3]), 22, 32);
        lo_part = __shfl(__double2loint(real_constants[3]), 22, 32);
  arrhenius = __fma_rn(__hiloint2double(hi_part, lo_part),  ortc,  arrhenius); 
        arrhenius = exp(arrhenius);
        hi_part = __shfl(__double2hiint(real_constants[3]), 23, 32);
        lo_part = __shfl(__double2loint(real_constants[3]), 23, 32);
        rr_r_19 = __hiloint2double(hi_part, lo_part) * arrhenius;
      }
    }
    if (wid == 0)
    {
      double mole_frac_NC_OH = scratch[5][tid];
      rr_f_19 *= mole_frac_NC_OH;
      double mole_frac_NC_C2H2 = scratch[7][tid];
      rr_f_19 *= mole_frac_NC_C2H2;
      double mole_frac_NC_CH3 = scratch[2][tid];
      rr_r_19 *= mole_frac_NC_CH3;
      double mole_frac_NC_CO = scratch[8][tid];
      rr_r_19 *= mole_frac_NC_CO;
    }
    else if (wid == 1)
    {
      double mole_frac_NC_CH3OCH3 = scratch[20][tid];
      rr_f_19 *= mole_frac_NC_CH3OCH3;
      double mole_frac_NC_CH3 = scratch[2][tid];
      rr_r_19 *= mole_frac_NC_CH3;
      double mole_frac_NC_CH3O = scratch[13][tid];
      rr_r_19 *= mole_frac_NC_CH3O;
    }
    else if (wid == 2)
    {
      double mole_frac_NC_O2 = scratch[14][tid];
      rr_f_19 *= mole_frac_NC_O2;
      double mole_frac_NC_CH3OCHO = scratch[22][tid];
      rr_f_19 *= mole_frac_NC_CH3OCHO;
      double mole_frac_NC_HO2 = scratch[15][tid];
      rr_r_19 *= mole_frac_NC_HO2;
      double mole_frac_NC_CH3OCO = scratch[21][tid];
      rr_r_19 *= mole_frac_NC_CH3OCO;
    }
    else if (wid == 3)
    {
      double mole_frac_NC_OH = scratch[5][tid];
      rr_f_19 *= mole_frac_NC_OH;
      double mole_frac_NC_CH3OCHO = scratch[22][tid];
      rr_f_19 *= mole_frac_NC_CH3OCHO;
      double mole_frac_NC_H2O = scratch[6][tid];
      rr_r_19 *= mole_frac_NC_H2O;
      double mole_frac_NC_CH3OCO = scratch[21][tid];
      rr_r_19 *= mole_frac_NC_CH3OCO;
    }
    else if (wid == 4)
    {
      double mole_frac_NC_HO2 = scratch[15][tid];
      rr_f_19 *= mole_frac_NC_HO2;
      double mole_frac_NC_CH3OCHO = scratch[22][tid];
      rr_f_19 *= mole_frac_NC_CH3OCHO;
      double mole_frac_NC_H2O2 = scratch[16][tid];
      rr_r_19 *= mole_frac_NC_H2O2;
      double mole_frac_NC_CH3OCO = scratch[21][tid];
      rr_r_19 *= mole_frac_NC_CH3OCO;
    }
    else if (wid == 5)
    {
      double mole_frac_NC_O = scratch[3][tid];
      rr_f_19 *= mole_frac_NC_O;
      double mole_frac_NC_CH3OCHO = scratch[22][tid];
      rr_f_19 *= mole_frac_NC_CH3OCHO;
      double mole_frac_NC_OH = scratch[5][tid];
      rr_r_19 *= mole_frac_NC_OH;
      double mole_frac_NC_CH3OCO = scratch[21][tid];
      rr_r_19 *= mole_frac_NC_CH3OCO;
    }
    else if (wid == 6)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_19 *= mole_frac_NC_H;
      double mole_frac_NC_CH3OCHO = scratch[22][tid];
      rr_f_19 *= mole_frac_NC_CH3OCHO;
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_r_19 *= mole_frac_NC_H2;
      double mole_frac_NC_CH3OCO = scratch[21][tid];
      rr_r_19 *= mole_frac_NC_CH3OCO;
    }
    else if (wid == 7)
    {
      double mole_frac_NC_CH3 = scratch[2][tid];
      rr_f_19 *= mole_frac_NC_CH3;
      double mole_frac_NC_CH3OCHO = scratch[22][tid];
      rr_f_19 *= mole_frac_NC_CH3OCHO;
      double mole_frac_NC_CH4 = scratch[4][tid];
      rr_r_19 *= mole_frac_NC_CH4;
      double mole_frac_NC_CH3OCO = scratch[21][tid];
      rr_r_19 *= mole_frac_NC_CH3OCO;
    }
    double rr_f_20 = rr_f_19,  rr_r_20 = rr_r_19;
    /* Chemistry for level 20 */
    {
      {
        int hi_part,  lo_part;
        hi_part = __shfl(__double2hiint(real_constants[3]), 24, 32);
        lo_part = __shfl(__double2loint(real_constants[3]), 24, 32);
        double arrhenius = __hiloint2double(hi_part, lo_part) * vlntemp;
        hi_part = __shfl(__double2hiint(real_constants[3]), 25, 32);
        lo_part = __shfl(__double2loint(real_constants[3]), 25, 32);
  arrhenius = __fma_rn(__hiloint2double(hi_part, lo_part),  ortc,  arrhenius); 
        arrhenius = exp(arrhenius);
        hi_part = __shfl(__double2hiint(real_constants[3]), 26, 32);
        lo_part = __shfl(__double2loint(real_constants[3]), 26, 32);
        rr_f_20 = __hiloint2double(hi_part, lo_part) * arrhenius;
      }
      {
        int hi_part,  lo_part;
        hi_part = __shfl(__double2hiint(real_constants[3]), 27, 32);
        lo_part = __shfl(__double2loint(real_constants[3]), 27, 32);
        double arrhenius = __hiloint2double(hi_part, lo_part) * vlntemp;
        hi_part = __shfl(__double2hiint(real_constants[3]), 28, 32);
        lo_part = __shfl(__double2loint(real_constants[3]), 28, 32);
  arrhenius = __fma_rn(__hiloint2double(hi_part, lo_part),  ortc,  arrhenius); 
        arrhenius = exp(arrhenius);
        hi_part = __shfl(__double2hiint(real_constants[3]), 29, 32);
        lo_part = __shfl(__double2loint(real_constants[3]), 29, 32);
        rr_r_20 = __hiloint2double(hi_part, lo_part) * arrhenius;
      }
    }
    if (wid == 0)
    {
      double mole_frac_NC_CH3OCO = scratch[21][tid];
      rr_f_20 *= mole_frac_NC_CH3OCO;
      double mole_frac_NC_CO = scratch[8][tid];
      rr_r_20 *= mole_frac_NC_CO;
      double mole_frac_NC_CH3O = scratch[13][tid];
      rr_r_20 *= mole_frac_NC_CH3O;
    }
    else if (wid == 1)
    {
      double mole_frac_NC_CH3OCO = scratch[21][tid];
      rr_f_20 *= mole_frac_NC_CH3OCO;
      double mole_frac_NC_CH3 = scratch[2][tid];
      rr_r_20 *= mole_frac_NC_CH3;
      double mole_frac_NC_CO2 = scratch[17][tid];
      rr_r_20 *= mole_frac_NC_CO2;
    }
    else if (wid == 2)
    {
      double mole_frac_NC_CH3OCH2O2 = scratch[26][tid];
      rr_f_20 *= mole_frac_NC_CH3OCH2O2;
      rr_f_20 *= mole_frac_NC_CH3OCH2O2;
      double mole_frac_NC_O2 = scratch[14][tid];
      rr_r_20 *= mole_frac_NC_O2;
      double mole_frac_NC_CH3OCHO = scratch[22][tid];
      rr_r_20 *= mole_frac_NC_CH3OCHO;
      double mole_frac_NC_CH3OCH2OH = scratch[23][tid];
      rr_r_20 *= mole_frac_NC_CH3OCH2OH;
    }
    else if (wid == 3)
    {
      double mole_frac_NC_O2CH2OCH2O2H = scratch[28][tid];
      rr_f_20 *= mole_frac_NC_O2CH2OCH2O2H;
      double mole_frac_NC_OH = scratch[5][tid];
      rr_r_20 *= mole_frac_NC_OH;
      double mole_frac_NC_HO2CH2OCHO = scratch[27][tid];
      rr_r_20 *= mole_frac_NC_HO2CH2OCHO;
    }
    else if (wid == 4)
    {
      double mole_frac_NC_HO2CH2OCHO = scratch[27][tid];
      rr_f_20 *= mole_frac_NC_HO2CH2OCHO;
      double mole_frac_NC_OH = scratch[5][tid];
      rr_r_20 *= mole_frac_NC_OH;
      double mole_frac_NC_OCH2OCHO = scratch[24][tid];
      rr_r_20 *= mole_frac_NC_OCH2OCHO;
    }
    else if (wid == 5)
    {
      double mole_frac_NC_OCH2OCHO = scratch[24][tid];
      rr_f_20 *= mole_frac_NC_OCH2OCHO;
      double mole_frac_NC_HOCH2OCO = scratch[25][tid];
      rr_r_20 *= mole_frac_NC_HOCH2OCO;
    }
    else if (wid == 6)
    {
      double mole_frac_NC_HCOOH = scratch[19][tid];
      rr_f_20 *= mole_frac_NC_HCOOH;
      double thb_0 = scratch[30][tid];
      rr_f_20 *= thb_0;
      double mole_frac_NC_H2O = scratch[6][tid];
      rr_r_20 *= mole_frac_NC_H2O;
      double mole_frac_NC_CO = scratch[8][tid];
      rr_r_20 *= mole_frac_NC_CO;
      rr_r_20 *= thb_0;
    }
    else if (wid == 7)
    {
      double mole_frac_NC_HCOOH = scratch[19][tid];
      rr_f_20 *= mole_frac_NC_HCOOH;
      double thb_0 = scratch[30][tid];
      rr_f_20 *= thb_0;
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_r_20 *= mole_frac_NC_H2;
      double mole_frac_NC_CO2 = scratch[17][tid];
      rr_r_20 *= mole_frac_NC_CO2;
      rr_r_20 *= thb_0;
    }
    double rr_f_21 = rr_f_20,  rr_r_21 = rr_r_20;
    /* Chemistry for level 21 */
    if (wid < 7)
    {
      {
        int hi_part,  lo_part;
        hi_part = __shfl(__double2hiint(real_constants[3]), 30, 32);
        lo_part = __shfl(__double2loint(real_constants[3]), 30, 32);
        double arrhenius = __hiloint2double(hi_part, lo_part) * vlntemp;
        hi_part = __shfl(__double2hiint(real_constants[3]), 31, 32);
        lo_part = __shfl(__double2loint(real_constants[3]), 31, 32);
  arrhenius = __fma_rn(__hiloint2double(hi_part, lo_part),  ortc,  arrhenius); 
        arrhenius = exp(arrhenius);
        hi_part = __shfl(__double2hiint(real_constants[4]), 0, 32);
        lo_part = __shfl(__double2loint(real_constants[4]), 0, 32);
        rr_f_21 = __hiloint2double(hi_part, lo_part) * arrhenius;
      }
      {
        int hi_part,  lo_part;
        hi_part = __shfl(__double2hiint(real_constants[4]), 1, 32);
        lo_part = __shfl(__double2loint(real_constants[4]), 1, 32);
        double arrhenius = __hiloint2double(hi_part, lo_part) * vlntemp;
        hi_part = __shfl(__double2hiint(real_constants[4]), 2, 32);
        lo_part = __shfl(__double2loint(real_constants[4]), 2, 32);
  arrhenius = __fma_rn(__hiloint2double(hi_part, lo_part),  ortc,  arrhenius); 
        arrhenius = exp(arrhenius);
        hi_part = __shfl(__double2hiint(real_constants[4]), 3, 32);
        lo_part = __shfl(__double2loint(real_constants[4]), 3, 32);
        rr_r_21 = __hiloint2double(hi_part, lo_part) * arrhenius;
      }
    }
    if (wid == 0)
    {
      double mole_frac_NC_OH = scratch[5][tid];
      rr_f_21 *= mole_frac_NC_OH;
      double mole_frac_NC_HCOOH = scratch[19][tid];
      rr_f_21 *= mole_frac_NC_HCOOH;
      double mole_frac_NC_H = scratch[0][tid];
      rr_r_21 *= mole_frac_NC_H;
      double mole_frac_NC_H2O = scratch[6][tid];
      rr_r_21 *= mole_frac_NC_H2O;
      double mole_frac_NC_CO2 = scratch[17][tid];
      rr_r_21 *= mole_frac_NC_CO2;
    }
    else if (wid == 1)
    {
      double mole_frac_NC_OH = scratch[5][tid];
      rr_f_21 *= mole_frac_NC_OH;
      double mole_frac_NC_HCOOH = scratch[19][tid];
      rr_f_21 *= mole_frac_NC_HCOOH;
      rr_r_21 *= mole_frac_NC_OH;
      double mole_frac_NC_H2O = scratch[6][tid];
      rr_r_21 *= mole_frac_NC_H2O;
      double mole_frac_NC_CO = scratch[8][tid];
      rr_r_21 *= mole_frac_NC_CO;
    }
    else if (wid == 2)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_21 *= mole_frac_NC_H;
      double mole_frac_NC_HCOOH = scratch[19][tid];
      rr_f_21 *= mole_frac_NC_HCOOH;
      rr_r_21 *= mole_frac_NC_H;
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_r_21 *= mole_frac_NC_H2;
      double mole_frac_NC_CO2 = scratch[17][tid];
      rr_r_21 *= mole_frac_NC_CO2;
    }
    else if (wid == 3)
    {
      double mole_frac_NC_H = scratch[0][tid];
      rr_f_21 *= mole_frac_NC_H;
      double mole_frac_NC_HCOOH = scratch[19][tid];
      rr_f_21 *= mole_frac_NC_HCOOH;
      double mole_frac_NC_H2 = scratch[1][tid];
      rr_r_21 *= mole_frac_NC_H2;
      double mole_frac_NC_OH = scratch[5][tid];
      rr_r_21 *= mole_frac_NC_OH;
      double mole_frac_NC_CO = scratch[8][tid];
      rr_r_21 *= mole_frac_NC_CO;
    }
    else if (wid == 4)
    {
      double mole_frac_NC_CH3 = scratch[2][tid];
      rr_f_21 *= mole_frac_NC_CH3;
      double mole_frac_NC_HCOOH = scratch[19][tid];
      rr_f_21 *= mole_frac_NC_HCOOH;
      double mole_frac_NC_CH4 = scratch[4][tid];
      rr_r_21 *= mole_frac_NC_CH4;
      double mole_frac_NC_OH = scratch[5][tid];
      rr_r_21 *= mole_frac_NC_OH;
      double mole_frac_NC_CO = scratch[8][tid];
      rr_r_21 *= mole_frac_NC_CO;
    }
    else if (wid == 5)
    {
      double mole_frac_NC_HO2 = scratch[15][tid];
      rr_f_21 *= mole_frac_NC_HO2;
      double mole_frac_NC_HCOOH = scratch[19][tid];
      rr_f_21 *= mole_frac_NC_HCOOH;
      double mole_frac_NC_OH = scratch[5][tid];
      rr_r_21 *= mole_frac_NC_OH;
      double mole_frac_NC_CO = scratch[8][tid];
      rr_r_21 *= mole_frac_NC_CO;
      double mole_frac_NC_H2O2 = scratch[16][tid];
      rr_r_21 *= mole_frac_NC_H2O2;
    }
    else if (wid == 6)
    {
      double mole_frac_NC_O = scratch[3][tid];
      rr_f_21 *= mole_frac_NC_O;
      double mole_frac_NC_HCOOH = scratch[19][tid];
      rr_f_21 *= mole_frac_NC_HCOOH;
      double mole_frac_NC_OH = scratch[5][tid];
      rr_r_21 *= mole_frac_NC_OH;
      rr_r_21 *= mole_frac_NC_OH;
      double mole_frac_NC_CO = scratch[8][tid];
      rr_r_21 *= mole_frac_NC_CO;
    }
    else if (wid == 7)
    {
    }
    /* QSSA scaling */
    asm volatile("bar.sync 0, 256;" : : : "memory");
    if (wid == 0)
    {
      double xq_2 = scratch[77][tid];
      rr_f_2 *= xq_2;
      double xq_3 = scratch[78][tid];
      rr_f_3 *= xq_3;
      rr_r_4 *= xq_3;
      double xq_4 = scratch[79][tid];
      rr_f_5 *= xq_4;
      double xq_1 = scratch[76][tid];
      rr_f_6 *= xq_1;
      rr_r_7 *= xq_2;
      double xq_0 = scratch[75][tid];
      rr_r_8 *= xq_0;
      rr_f_9 *= xq_1;
      rr_r_9 *= xq_0;
      rr_f_10 *= xq_1;
      double xq_5 = scratch[80][tid];
      rr_r_11 *= xq_5;
      double xq_7 = scratch[82][tid];
      rr_f_12 *= xq_7;
      double xq_6 = scratch[81][tid];
      rr_r_13 *= xq_6;
    }
    else if (wid == 1)
    {
      double xq_4 = scratch[79][tid];
      rr_f_1 *= xq_4;
      double xq_2 = scratch[77][tid];
      rr_r_2 *= xq_2;
      double xq_3 = scratch[78][tid];
      rr_f_3 *= xq_3;
      rr_r_4 *= xq_3;
      rr_f_5 *= xq_4;
      double xq_1 = scratch[76][tid];
      rr_r_6 *= xq_1;
      rr_r_7 *= xq_2;
      double xq_0 = scratch[75][tid];
      rr_f_8 *= xq_0;
      rr_r_8 *= xq_3;
      rr_f_9 *= xq_1;
      rr_r_9 *= xq_0;
      rr_f_10 *= xq_1;
      double xq_5 = scratch[80][tid];
      rr_f_11 *= xq_5;
      double xq_7 = scratch[82][tid];
      rr_f_12 *= xq_7;
      rr_r_13 *= xq_3;
    }
    else if (wid == 2)
    {
      double xq_4 = scratch[79][tid];
      rr_f_1 *= xq_4;
      double xq_0 = scratch[75][tid];
      rr_f_2 *= xq_0;
      double xq_3 = scratch[78][tid];
      rr_r_4 *= xq_3;
      rr_f_6 *= xq_3;
      double xq_2 = scratch[77][tid];
      rr_f_7 *= xq_2;
      rr_f_8 *= xq_0;
      double xq_1 = scratch[76][tid];
      rr_f_9 *= xq_1;
      rr_r_9 *= xq_0;
      rr_r_10 *= xq_3;
      double xq_5 = scratch[80][tid];
      rr_f_11 *= xq_5;
      double xq_8 = scratch[83][tid];
      rr_r_12 *= xq_8;
    }
    else if (wid == 3)
    {
      double xq_3 = scratch[78][tid];
      rr_f_2 *= xq_3;
      rr_f_3 *= xq_3;
      rr_r_4 *= xq_3;
      double xq_0 = scratch[75][tid];
      rr_f_5 *= xq_0;
      double xq_2 = scratch[77][tid];
      rr_r_6 *= xq_2;
      rr_f_7 *= xq_2;
      rr_f_8 *= xq_0;
      double xq_1 = scratch[76][tid];
      rr_f_9 *= xq_1;
      double xq_5 = scratch[80][tid];
      rr_r_10 *= xq_5;
      rr_f_11 *= xq_5;
      rr_r_11 *= xq_3;
      double xq_8 = scratch[83][tid];
      rr_f_12 *= xq_8;
    }
    else if (wid == 4)
    {
      double xq_3 = scratch[78][tid];
      rr_f_2 *= xq_3;
      double xq_4 = scratch[79][tid];
      rr_f_4 *= xq_4;
      double xq_1 = scratch[76][tid];
      rr_f_5 *= xq_1;
      double xq_2 = scratch[77][tid];
      rr_r_6 *= xq_2;
      rr_f_7 *= xq_2;
      double xq_0 = scratch[75][tid];
      rr_f_8 *= xq_0;
      rr_r_8 *= xq_3;
      rr_f_9 *= xq_1;
      rr_r_9 *= xq_3;
      double xq_5 = scratch[80][tid];
      rr_r_10 *= xq_5;
      rr_f_11 *= xq_5;
      double xq_7 = scratch[82][tid];
      rr_r_11 *= xq_7;
      double xq_8 = scratch[83][tid];
      rr_f_12 *= xq_8;
    }
    else if (wid == 5)
    {
      double xq_3 = scratch[78][tid];
      rr_f_2 *= xq_3;
      rr_r_3 *= xq_3;
      double xq_4 = scratch[79][tid];
      rr_f_4 *= xq_4;
      double xq_0 = scratch[75][tid];
      rr_r_5 *= xq_0;
      double xq_2 = scratch[77][tid];
      rr_r_6 *= xq_2;
      rr_f_8 *= xq_0;
      double xq_1 = scratch[76][tid];
      rr_f_9 *= xq_1;
      double xq_5 = scratch[80][tid];
      rr_r_10 *= xq_5;
      double xq_7 = scratch[82][tid];
      rr_f_11 *= xq_7;
      double xq_6 = scratch[81][tid];
      rr_r_12 *= xq_6;
    }
    else if (wid == 6)
    {
      double xq_3 = scratch[78][tid];
      rr_f_2 *= xq_3;
      rr_r_3 *= xq_3;
      double xq_4 = scratch[79][tid];
      rr_f_4 *= xq_4;
      double xq_1 = scratch[76][tid];
      rr_r_5 *= xq_1;
      rr_r_6 *= xq_3;
      double xq_2 = scratch[77][tid];
      rr_f_7 *= xq_2;
      rr_r_7 *= xq_3;
      rr_f_9 *= xq_1;
      double xq_5 = scratch[80][tid];
      rr_r_10 *= xq_5;
      rr_f_11 *= xq_5;
      rr_r_12 *= xq_4;
    }
    else if (wid == 7)
    {
      double xq_3 = scratch[78][tid];
      rr_f_2 *= xq_3;
      rr_r_3 *= xq_3;
      double xq_4 = scratch[79][tid];
      rr_f_4 *= xq_4;
      double xq_0 = scratch[75][tid];
      rr_f_5 *= xq_0;
      double xq_2 = scratch[77][tid];
      rr_f_6 *= xq_2;
      rr_f_7 *= xq_2;
      double xq_1 = scratch[76][tid];
      rr_f_8 *= xq_1;
      rr_r_8 *= xq_0;
      rr_f_9 *= xq_1;
      double xq_5 = scratch[80][tid];
      rr_r_10 *= xq_5;
      double xq_6 = scratch[81][tid];
      rr_f_12 *= xq_6;
    }
    /* Stiffness */
    double stif_diffusion_0;
    double stif_mole_frac_0;
    {
      int index = __shfl(index_constants[0], 0, 32);
      asm volatile("ld.global.nc.cg.f64 %0,  [%1];" : "=d"(stif_diffusion_0) : 
        "l"(diffusion_array+index*spec_stride) : "memory"); 
      stif_mole_frac_0 = scratch[index][tid];
    }
    double stif_diffusion_1;
    double stif_mole_frac_1;
    {
      int index = __shfl(index_constants[0], 1, 32);
      asm volatile("ld.global.nc.cg.f64 %0,  [%1];" : "=d"(stif_diffusion_1) : 
        "l"(diffusion_array+index*spec_stride) : "memory"); 
      stif_mole_frac_1 = scratch[index][tid];
    }
    double stif_diffusion_2;
    double stif_mole_frac_2;
    {
      int index = __shfl(index_constants[0], 2, 32);
      asm volatile("ld.global.nc.cg.f64 %0,  [%1];" : "=d"(stif_diffusion_2) : 
        "l"(diffusion_array+index*spec_stride) : "memory"); 
      stif_mole_frac_2 = scratch[index][tid];
    }
    double ddot_0 = 0.0;
    double cdot_0 = 0.0;
    double ddot_1 = 0.0;
    double cdot_1 = 0.0;
    double ddot_2 = 0.0;
    double cdot_2 = 0.0;
    asm volatile("bar.sync 0, 256;" : : : "memory");
    scratch[wid+0][tid] = rr_f_0;
    scratch[wid+8][tid] = rr_r_0;
    scratch[wid+16][tid] = rr_f_1;
    scratch[wid+24][tid] = rr_r_1;
    scratch[wid+32][tid] = rr_f_2;
    scratch[wid+40][tid] = rr_r_2;
    scratch[wid+48][tid] = rr_f_3;
    scratch[wid+56][tid] = rr_r_3;
    scratch[wid+64][tid] = rr_f_4;
    scratch[wid+72][tid] = rr_r_4;
    scratch[wid+80][tid] = rr_f_5;
    scratch[wid+88][tid] = rr_r_5;
    asm volatile("bar.sync 0, 256;" : : : "memory");
    if (wid == 0)
    {
      double forward_15 = scratch[3][tid];
      ddot_0 += forward_15;
      double forward_19 = scratch[4][tid];
      ddot_0 += forward_19;
      double forward_20 = scratch[5][tid];
      ddot_0 += forward_20;
      double backward_13 = scratch[9][tid];
      ddot_0 += backward_13;
      double backward_14 = scratch[10][tid];
      ddot_0 += backward_14;
      double backward_41 = scratch[74][tid];
      ddot_0 += backward_41;
      double backward_61 = scratch[89][tid];
      ddot_0 += backward_61;
      double forward_13 = scratch[1][tid];
      cdot_0 += forward_13;
      double forward_14 = scratch[2][tid];
      cdot_0 += forward_14;
      double forward_41 = scratch[66][tid];
      cdot_0 += forward_41;
      double forward_61 = scratch[81][tid];
      cdot_0 += forward_61;
      double backward_15 = scratch[11][tid];
      cdot_0 += backward_15;
      double backward_19 = scratch[12][tid];
      cdot_0 += backward_19;
      double backward_20 = scratch[13][tid];
      cdot_0 += backward_20;
      double forward_72 = scratch[83][tid];
      ddot_1 += forward_72;
      double forward_73 = scratch[84][tid];
      ddot_1 += forward_73;
      double backward_33 = scratch[59][tid];
      ddot_1 += backward_33;
      double backward_42 = scratch[75][tid];
      ddot_1 += backward_42;
      double backward_48 = scratch[24][tid];
      ddot_1 += backward_48;
      double forward_33 = scratch[51][tid];
      cdot_1 += forward_33;
      double forward_42 = scratch[67][tid];
      cdot_1 += forward_42;
      double forward_48 = scratch[16][tid];
      cdot_1 += forward_48;
      double backward_72 = scratch[91][tid];
      cdot_1 += backward_72;
      double backward_73 = scratch[92][tid];
      cdot_1 += backward_73;
    }
    else if (wid == 1)
    {
      double backward_27 = scratch[45][tid];
      ddot_0 += backward_27;
      double backward_32 = scratch[58][tid];
      ddot_0 += backward_32;
      double backward_37 = scratch[62][tid];
      ddot_0 += backward_37;
      double backward_55 = scratch[77][tid];
      ddot_0 += backward_55;
      double backward_92 = scratch[30][tid];
      ddot_0 += backward_92;
      double forward_27 = scratch[37][tid];
      cdot_0 += forward_27;
      double forward_32 = scratch[50][tid];
      cdot_0 += forward_32;
      double forward_37 = scratch[54][tid];
      cdot_0 += forward_37;
      double forward_55 = scratch[69][tid];
      cdot_0 += forward_55;
      double forward_92 = scratch[22][tid];
      cdot_0 += forward_92;
      ddot_1 += forward_92;
      double forward_93 = scratch[23][tid];
      ddot_1 += forward_93;
      double backward_76 = scratch[95][tid];
      ddot_1 += backward_76;
      double backward_94 = scratch[40][tid];
      ddot_1 += backward_94;
      double forward_76 = scratch[87][tid];
      cdot_1 += forward_76;
      double forward_94 = scratch[32][tid];
      cdot_1 += forward_94;
      cdot_1 += backward_92;
      double backward_93 = scratch[31][tid];
      cdot_1 += backward_93;
    }
    else if (wid == 2)
    {
      double forward_21 = scratch[6][tid];
      ddot_0 += forward_21;
      double forward_28 = scratch[38][tid];
      ddot_0 += forward_28;
      double forward_30 = scratch[48][tid];
      ddot_0 += forward_30;
      double forward_38 = scratch[55][tid];
      ddot_0 += forward_38;
      double forward_57 = scratch[71][tid];
      ddot_0 += forward_57;
      double backward_21 = scratch[14][tid];
      cdot_0 += backward_21;
      double backward_28 = scratch[46][tid];
      cdot_0 += backward_28;
      double backward_30 = scratch[56][tid];
      cdot_0 += backward_30;
      double backward_38 = scratch[63][tid];
      cdot_0 += backward_38;
      double backward_57 = scratch[79][tid];
      cdot_0 += backward_57;
      double forward_85 = scratch[21][tid];
      ddot_1 += forward_85;
      double backward_93 = scratch[31][tid];
      ddot_1 += backward_93;
      double forward_93 = scratch[23][tid];
      cdot_1 += forward_93;
      double backward_85 = scratch[29][tid];
      cdot_1 += backward_85;
    }
    else if (wid == 3)
    {
      double forward_35 = scratch[53][tid];
      ddot_0 += forward_35;
      double forward_37 = scratch[54][tid];
      ddot_0 += forward_37;
      double forward_38 = scratch[55][tid];
      ddot_0 += forward_38;
      double forward_39 = scratch[64][tid];
      ddot_0 += forward_39;
      double forward_40 = scratch[65][tid];
      ddot_0 += forward_40;
      double forward_41 = scratch[66][tid];
      ddot_0 += forward_41;
      double forward_42 = scratch[67][tid];
      ddot_0 += forward_42;
      double backward_62 = scratch[90][tid];
      ddot_0 = __fma_rn(2.0, backward_62, ddot_0);
      double backward_34 = scratch[60][tid];
      ddot_0 += backward_34;
      double backward_54 = scratch[76][tid];
      ddot_0 += backward_54;
      double backward_55 = scratch[77][tid];
      ddot_0 += backward_55;
      double backward_57 = scratch[79][tid];
      ddot_0 += backward_57;
      double backward_58 = scratch[88][tid];
      ddot_0 += backward_58;
      double backward_59 = scratch[25][tid];
      ddot_0 += backward_59;
      double backward_60 = scratch[26][tid];
      ddot_0 += backward_60;
      double backward_61 = scratch[89][tid];
      ddot_0 += backward_61;
      double backward_67 = scratch[27][tid];
      ddot_0 += backward_67;
      double backward_68 = scratch[28][tid];
      ddot_0 += backward_68;
      double forward_62 = scratch[82][tid];
      cdot_0 = __fma_rn(2.0, forward_62, cdot_0);
      double forward_34 = scratch[52][tid];
      cdot_0 += forward_34;
      double forward_54 = scratch[68][tid];
      cdot_0 += forward_54;
      double forward_55 = scratch[69][tid];
      cdot_0 += forward_55;
      double forward_57 = scratch[71][tid];
      cdot_0 += forward_57;
      double forward_58 = scratch[80][tid];
      cdot_0 += forward_58;
      double forward_59 = scratch[17][tid];
      cdot_0 += forward_59;
      double forward_60 = scratch[18][tid];
      cdot_0 += forward_60;
      double forward_61 = scratch[81][tid];
      cdot_0 += forward_61;
      double forward_67 = scratch[19][tid];
      cdot_0 += forward_67;
      double forward_68 = scratch[20][tid];
      cdot_0 += forward_68;
      double backward_35 = scratch[61][tid];
      cdot_0 += backward_35;
      double backward_37 = scratch[62][tid];
      cdot_0 += backward_37;
      double backward_38 = scratch[63][tid];
      cdot_0 += backward_38;
      double backward_39 = scratch[72][tid];
      cdot_0 += backward_39;
      double backward_40 = scratch[73][tid];
      cdot_0 += backward_40;
      double backward_41 = scratch[74][tid];
      cdot_0 += backward_41;
      double backward_42 = scratch[75][tid];
      cdot_0 += backward_42;
      ddot_1 += forward_67;
      ddot_1 += forward_68;
      cdot_1 += backward_67;
      cdot_1 += backward_68;
    }
    else if (wid == 4)
    {
      double forward_13 = scratch[1][tid];
      ddot_0 = __fma_rn(2.0, forward_13, ddot_0);
      double forward_14 = scratch[2][tid];
      ddot_0 = __fma_rn(2.0, forward_14, ddot_0);
      double forward_31 = scratch[49][tid];
      ddot_0 += forward_31;
      double forward_41 = scratch[66][tid];
      ddot_0 += forward_41;
      double forward_61 = scratch[81][tid];
      ddot_0 += forward_61;
      double backward_8 = scratch[8][tid];
      ddot_0 += backward_8;
      double backward_19 = scratch[12][tid];
      ddot_0 += backward_19;
      double backward_20 = scratch[13][tid];
      ddot_0 += backward_20;
      double backward_26 = scratch[44][tid];
      ddot_0 += backward_26;
      double backward_40 = scratch[73][tid];
      ddot_0 += backward_40;
      double backward_59 = scratch[25][tid];
      ddot_0 += backward_59;
      double backward_60 = scratch[26][tid];
      ddot_0 += backward_60;
      double backward_67 = scratch[27][tid];
      ddot_0 += backward_67;
      double backward_68 = scratch[28][tid];
      ddot_0 += backward_68;
      double forward_8 = scratch[0][tid];
      cdot_0 += forward_8;
      double forward_19 = scratch[4][tid];
      cdot_0 += forward_19;
      double forward_20 = scratch[5][tid];
      cdot_0 += forward_20;
      double forward_26 = scratch[36][tid];
      cdot_0 += forward_26;
      double forward_40 = scratch[65][tid];
      cdot_0 += forward_40;
      double forward_59 = scratch[17][tid];
      cdot_0 += forward_59;
      double forward_60 = scratch[18][tid];
      cdot_0 += forward_60;
      double forward_67 = scratch[19][tid];
      cdot_0 += forward_67;
      double forward_68 = scratch[20][tid];
      cdot_0 += forward_68;
      double backward_13 = scratch[9][tid];
      cdot_0 = __fma_rn(2.0, backward_13, cdot_0);
      double backward_14 = scratch[10][tid];
      cdot_0 = __fma_rn(2.0, backward_14, cdot_0);
      double backward_31 = scratch[57][tid];
      cdot_0 += backward_31;
      double backward_41 = scratch[74][tid];
      cdot_0 += backward_41;
      double backward_61 = scratch[89][tid];
      cdot_0 += backward_61;
    }
    else if (wid == 5)
    {
      double forward_33 = scratch[51][tid];
      ddot_0 += forward_33;
      double forward_42 = scratch[67][tid];
      ddot_0 += forward_42;
      double forward_47 = scratch[7][tid];
      ddot_0 = __fma_rn(2.0, forward_47, ddot_0);
      double forward_48 = scratch[16][tid];
      ddot_0 += forward_48;
      double forward_74 = scratch[85][tid];
      ddot_0 += forward_74;
      double forward_75 = scratch[86][tid];
      ddot_0 += forward_75;
      double forward_76 = scratch[87][tid];
      ddot_0 += forward_76;
      double backward_56 = scratch[78][tid];
      ddot_0 += backward_56;
      double backward_72 = scratch[91][tid];
      ddot_0 = __fma_rn(2.0, backward_72, ddot_0);
      double backward_73 = scratch[92][tid];
      ddot_0 = __fma_rn(2.0, backward_73, ddot_0);
      double backward_111 = scratch[42][tid];
      ddot_0 += backward_111;
      double forward_56 = scratch[70][tid];
      cdot_0 += forward_56;
      double forward_72 = scratch[83][tid];
      cdot_0 = __fma_rn(2.0, forward_72, cdot_0);
      double forward_73 = scratch[84][tid];
      cdot_0 = __fma_rn(2.0, forward_73, cdot_0);
      double forward_111 = scratch[34][tid];
      cdot_0 += forward_111;
      double backward_33 = scratch[59][tid];
      cdot_0 += backward_33;
      double backward_42 = scratch[75][tid];
      cdot_0 += backward_42;
      double backward_47 = scratch[15][tid];
      cdot_0 = __fma_rn(2.0, backward_47, cdot_0);
      double backward_48 = scratch[24][tid];
      cdot_0 += backward_48;
      double backward_74 = scratch[93][tid];
      cdot_0 += backward_74;
      double backward_75 = scratch[94][tid];
      cdot_0 += backward_75;
      double backward_76 = scratch[95][tid];
      cdot_0 += backward_76;
      ddot_1 += backward_47;
      double backward_85 = scratch[29][tid];
      ddot_1 += backward_85;
      cdot_1 += forward_47;
      double forward_85 = scratch[21][tid];
      cdot_1 += forward_85;
    }
    else if (wid == 6)
    {
      double forward_8 = scratch[0][tid];
      ddot_0 += forward_8;
      double forward_27 = scratch[37][tid];
      ddot_0 += forward_27;
      double forward_37 = scratch[54][tid];
      ddot_0 += forward_37;
      double forward_48 = scratch[16][tid];
      ddot_0 += forward_48;
      double forward_55 = scratch[69][tid];
      ddot_0 += forward_55;
      double forward_56 = scratch[70][tid];
      ddot_0 += forward_56;
      double forward_85 = scratch[21][tid];
      ddot_0 += forward_85;
      double forward_93 = scratch[23][tid];
      ddot_0 += forward_93;
      double forward_94 = scratch[32][tid];
      ddot_0 += forward_94;
      double forward_108 = scratch[33][tid];
      ddot_0 += forward_108;
      double forward_111 = scratch[34][tid];
      ddot_0 += forward_111;
      double backward_31 = scratch[57][tid];
      ddot_0 += backward_31;
      double backward_25 = scratch[43][tid];
      ddot_0 += backward_25;
      double backward_30 = scratch[56][tid];
      ddot_0 += backward_30;
      double backward_35 = scratch[61][tid];
      ddot_0 += backward_35;
      double backward_54 = scratch[76][tid];
      ddot_0 += backward_54;
      double backward_76 = scratch[95][tid];
      ddot_0 += backward_76;
      double forward_31 = scratch[49][tid];
      cdot_0 += forward_31;
      double forward_25 = scratch[35][tid];
      cdot_0 += forward_25;
      double forward_30 = scratch[48][tid];
      cdot_0 += forward_30;
      double forward_35 = scratch[53][tid];
      cdot_0 += forward_35;
      double forward_54 = scratch[68][tid];
      cdot_0 += forward_54;
      double forward_76 = scratch[87][tid];
      cdot_0 += forward_76;
      double backward_8 = scratch[8][tid];
      cdot_0 += backward_8;
      double backward_27 = scratch[45][tid];
      cdot_0 += backward_27;
      double backward_37 = scratch[62][tid];
      cdot_0 += backward_37;
      double backward_48 = scratch[24][tid];
      cdot_0 += backward_48;
      double backward_55 = scratch[77][tid];
      cdot_0 += backward_55;
      double backward_56 = scratch[78][tid];
      cdot_0 += backward_56;
      double backward_85 = scratch[29][tid];
      cdot_0 += backward_85;
      double backward_93 = scratch[31][tid];
      cdot_0 += backward_93;
      double backward_94 = scratch[40][tid];
      cdot_0 += backward_94;
      double backward_108 = scratch[41][tid];
      cdot_0 += backward_108;
      double backward_111 = scratch[42][tid];
      cdot_0 += backward_111;
    }
    else if (wid == 7)
    {
      double forward_19 = scratch[4][tid];
      ddot_0 += forward_19;
      double forward_20 = scratch[5][tid];
      ddot_0 += forward_20;
      double forward_29 = scratch[39][tid];
      ddot_0 += forward_29;
      double forward_39 = scratch[64][tid];
      ddot_0 += forward_39;
      double forward_58 = scratch[80][tid];
      ddot_0 += forward_58;
      double forward_74 = scratch[85][tid];
      ddot_0 += forward_74;
      double forward_75 = scratch[86][tid];
      ddot_0 += forward_75;
      double backward_31 = scratch[57][tid];
      ddot_0 += backward_31;
      double backward_15 = scratch[11][tid];
      ddot_0 = __fma_rn(2.0, backward_15, ddot_0);
      double backward_28 = scratch[46][tid];
      ddot_0 += backward_28;
      double backward_38 = scratch[63][tid];
      ddot_0 += backward_38;
      double backward_56 = scratch[78][tid];
      ddot_0 += backward_56;
      double backward_57 = scratch[79][tid];
      ddot_0 += backward_57;
      double forward_31 = scratch[49][tid];
      cdot_0 += forward_31;
      double forward_15 = scratch[3][tid];
      cdot_0 = __fma_rn(2.0, forward_15, cdot_0);
      double forward_28 = scratch[38][tid];
      cdot_0 += forward_28;
      double forward_38 = scratch[55][tid];
      cdot_0 += forward_38;
      double forward_56 = scratch[70][tid];
      cdot_0 += forward_56;
      double forward_57 = scratch[71][tid];
      cdot_0 += forward_57;
      double backward_19 = scratch[12][tid];
      cdot_0 += backward_19;
      double backward_20 = scratch[13][tid];
      cdot_0 += backward_20;
      double backward_29 = scratch[47][tid];
      cdot_0 += backward_29;
      double backward_39 = scratch[72][tid];
      cdot_0 += backward_39;
      double backward_58 = scratch[88][tid];
      cdot_0 += backward_58;
      double backward_74 = scratch[93][tid];
      cdot_0 += backward_74;
      double backward_75 = scratch[94][tid];
      cdot_0 += backward_75;
    }
    asm volatile("bar.sync 0, 256;" : : : "memory");
    scratch[wid+0][tid] = rr_f_6;
    scratch[wid+8][tid] = rr_r_6;
    scratch[wid+16][tid] = rr_f_7;
    scratch[wid+24][tid] = rr_r_7;
    scratch[wid+32][tid] = rr_f_8;
    scratch[wid+40][tid] = rr_r_8;
    scratch[wid+48][tid] = rr_f_9;
    scratch[wid+56][tid] = rr_r_9;
    scratch[wid+64][tid] = rr_f_10;
    scratch[wid+72][tid] = rr_r_10;
    scratch[wid+80][tid] = rr_f_11;
    scratch[wid+88][tid] = rr_r_11;
    asm volatile("bar.sync 0, 256;" : : : "memory");
    if (wid == 0)
    {
      double forward_103 = scratch[19][tid];
      ddot_0 += forward_103;
      double backward_135 = scratch[79][tid];
      ddot_0 += backward_135;
      double forward_135 = scratch[71][tid];
      cdot_0 += forward_135;
      double backward_103 = scratch[27][tid];
      cdot_0 += backward_103;
      double backward_97 = scratch[13][tid];
      ddot_1 += backward_97;
      double backward_104 = scratch[28][tid];
      ddot_1 += backward_104;
      double backward_133 = scratch[77][tid];
      ddot_1 += backward_133;
      double forward_97 = scratch[5][tid];
      cdot_1 += forward_97;
      double forward_104 = scratch[20][tid];
      cdot_1 += forward_104;
      double forward_133 = scratch[69][tid];
      cdot_1 += forward_133;
    }
    else if (wid == 1)
    {
      double forward_114 = scratch[35][tid];
      ddot_0 += forward_114;
      double forward_125 = scratch[54][tid];
      ddot_0 += forward_125;
      double backward_95 = scratch[11][tid];
      ddot_0 += backward_95;
      double backward_102 = scratch[26][tid];
      ddot_0 += backward_102;
      double backward_117 = scratch[46][tid];
      ddot_0 += backward_117;
      double backward_122 = scratch[59][tid];
      ddot_0 += backward_122;
      double backward_132 = scratch[76][tid];
      ddot_0 += backward_132;
      double forward_95 = scratch[3][tid];
      cdot_0 += forward_95;
      double forward_102 = scratch[18][tid];
      cdot_0 += forward_102;
      double forward_117 = scratch[38][tid];
      cdot_0 += forward_117;
      double forward_122 = scratch[51][tid];
      cdot_0 += forward_122;
      double forward_132 = scratch[68][tid];
      cdot_0 += forward_132;
      double backward_114 = scratch[43][tid];
      cdot_0 += backward_114;
      double backward_125 = scratch[62][tid];
      cdot_0 += backward_125;
      ddot_1 += forward_95;
      double forward_96 = scratch[4][tid];
      ddot_1 += forward_96;
      double forward_97 = scratch[5][tid];
      ddot_1 += forward_97;
      double forward_98 = scratch[6][tid];
      ddot_1 += forward_98;
      double forward_100 = scratch[16][tid];
      ddot_1 += forward_100;
      double forward_101 = scratch[17][tid];
      ddot_1 += forward_101;
      double backward_77 = scratch[8][tid];
      ddot_1 += backward_77;
      double backward_103 = scratch[27][tid];
      ddot_1 += backward_103;
      double backward_105 = scratch[29][tid];
      ddot_1 += backward_105;
      double forward_77 = scratch[0][tid];
      cdot_1 += forward_77;
      double forward_103 = scratch[19][tid];
      cdot_1 += forward_103;
      double forward_105 = scratch[21][tid];
      cdot_1 += forward_105;
      cdot_1 += backward_95;
      double backward_96 = scratch[12][tid];
      cdot_1 += backward_96;
      double backward_97 = scratch[13][tid];
      cdot_1 += backward_97;
      double backward_98 = scratch[14][tid];
      cdot_1 += backward_98;
      double backward_100 = scratch[24][tid];
      cdot_1 += backward_100;
      double backward_101 = scratch[25][tid];
      cdot_1 += backward_101;
    }
    else if (wid == 2)
    {
      double forward_98 = scratch[6][tid];
      ddot_0 += forward_98;
      double forward_100 = scratch[16][tid];
      ddot_0 += forward_100;
      double forward_109 = scratch[32][tid];
      ddot_0 += forward_109;
      double forward_112 = scratch[33][tid];
      ddot_0 += forward_112;
      double forward_122 = scratch[51][tid];
      ddot_0 += forward_122;
      double forward_123 = scratch[52][tid];
      ddot_0 += forward_123;
      double forward_134 = scratch[70][tid];
      ddot_0 += forward_134;
      double backward_98 = scratch[14][tid];
      cdot_0 += backward_98;
      double backward_100 = scratch[24][tid];
      cdot_0 += backward_100;
      double backward_109 = scratch[40][tid];
      cdot_0 += backward_109;
      double backward_112 = scratch[41][tid];
      cdot_0 += backward_112;
      double backward_122 = scratch[59][tid];
      cdot_0 += backward_122;
      double backward_123 = scratch[60][tid];
      cdot_0 += backward_123;
      double backward_134 = scratch[78][tid];
      cdot_0 += backward_134;
      double forward_90 = scratch[2][tid];
      ddot_1 += forward_90;
      double backward_90 = scratch[10][tid];
      cdot_1 += backward_90;
    }
    else if (wid == 3)
    {
      double forward_139 = scratch[83][tid];
      ddot_0 += forward_139;
      double backward_128 = scratch[73][tid];
      ddot_0 += backward_128;
      double backward_106 = scratch[30][tid];
      ddot_0 += backward_106;
      double backward_113 = scratch[42][tid];
      ddot_0 += backward_113;
      double backward_116 = scratch[45][tid];
      ddot_0 += backward_116;
      double backward_124 = scratch[61][tid];
      ddot_0 += backward_124;
      double backward_137 = scratch[89][tid];
      ddot_0 += backward_137;
      double backward_138 = scratch[90][tid];
      ddot_0 += backward_138;
      double forward_128 = scratch[65][tid];
      cdot_0 += forward_128;
      double forward_106 = scratch[22][tid];
      cdot_0 += forward_106;
      double forward_113 = scratch[34][tid];
      cdot_0 += forward_113;
      double forward_116 = scratch[37][tid];
      cdot_0 += forward_116;
      double forward_124 = scratch[53][tid];
      cdot_0 += forward_124;
      double forward_137 = scratch[81][tid];
      cdot_0 += forward_137;
      double forward_138 = scratch[82][tid];
      cdot_0 += forward_138;
      double backward_139 = scratch[91][tid];
      cdot_0 += backward_139;
      double forward_78 = scratch[1][tid];
      ddot_1 += forward_78;
      ddot_1 += forward_138;
      double backward_78 = scratch[9][tid];
      cdot_1 += backward_78;
      cdot_1 += backward_138;
      double forward_129 = scratch[66][tid];
      ddot_2 += forward_129;
      double backward_129 = scratch[74][tid];
      cdot_2 += backward_129;
    }
    else if (wid == 4)
    {
      double forward_116 = scratch[37][tid];
      ddot_0 += forward_116;
      double forward_135 = scratch[71][tid];
      ddot_0 += forward_135;
      double forward_140 = scratch[84][tid];
      ddot_0 += forward_140;
      double backward_101 = scratch[25][tid];
      ddot_0 += backward_101;
      double backward_103 = scratch[27][tid];
      ddot_0 += backward_103;
      double backward_107 = scratch[31][tid];
      ddot_0 += backward_107;
      double backward_136 = scratch[88][tid];
      ddot_0 += backward_136;
      double forward_101 = scratch[17][tid];
      cdot_0 += forward_101;
      double forward_103 = scratch[19][tid];
      cdot_0 += forward_103;
      double forward_107 = scratch[23][tid];
      cdot_0 += forward_107;
      double forward_136 = scratch[80][tid];
      cdot_0 += forward_136;
      double backward_116 = scratch[45][tid];
      cdot_0 += backward_116;
      double backward_135 = scratch[79][tid];
      cdot_0 += backward_135;
      double backward_140 = scratch[92][tid];
      cdot_0 += backward_140;
    }
    else if (wid == 5)
    {
      double forward_77 = scratch[0][tid];
      ddot_0 += forward_77;
      double forward_97 = scratch[5][tid];
      ddot_0 += forward_97;
      double forward_104 = scratch[20][tid];
      ddot_0 += forward_104;
      double forward_133 = scratch[69][tid];
      ddot_0 += forward_133;
      double backward_129 = scratch[74][tid];
      ddot_0 += backward_129;
      double backward_98 = scratch[14][tid];
      ddot_0 += backward_98;
      double backward_114 = scratch[43][tid];
      ddot_0 += backward_114;
      double backward_125 = scratch[62][tid];
      ddot_0 += backward_125;
      double backward_137 = scratch[89][tid];
      ddot_0 += backward_137;
      double forward_129 = scratch[66][tid];
      cdot_0 += forward_129;
      double forward_98 = scratch[6][tid];
      cdot_0 += forward_98;
      double forward_114 = scratch[35][tid];
      cdot_0 += forward_114;
      double forward_125 = scratch[54][tid];
      cdot_0 += forward_125;
      double forward_137 = scratch[81][tid];
      cdot_0 += forward_137;
      double backward_77 = scratch[8][tid];
      cdot_0 += backward_77;
      double backward_97 = scratch[13][tid];
      cdot_0 += backward_97;
      double backward_104 = scratch[28][tid];
      cdot_0 += backward_104;
      double backward_133 = scratch[77][tid];
      cdot_0 += backward_133;
      double backward_90 = scratch[10][tid];
      ddot_1 += backward_90;
      double forward_90 = scratch[2][tid];
      cdot_1 += forward_90;
      double forward_151 = scratch[87][tid];
      ddot_2 = __fma_rn(2.0, forward_151, ddot_2);
      double backward_150 = scratch[94][tid];
      ddot_2 += backward_150;
      double forward_150 = scratch[86][tid];
      cdot_2 += forward_150;
      double backward_151 = scratch[95][tid];
      cdot_2 = __fma_rn(2.0, backward_151, cdot_2);
    }
    else if (wid == 6)
    {
      double forward_78 = scratch[1][tid];
      ddot_0 += forward_78;
      double forward_95 = scratch[3][tid];
      ddot_0 += forward_95;
      double forward_102 = scratch[18][tid];
      ddot_0 += forward_102;
      double forward_132 = scratch[68][tid];
      ddot_0 += forward_132;
      double backward_77 = scratch[8][tid];
      ddot_0 += backward_77;
      double backward_112 = scratch[41][tid];
      ddot_0 += backward_112;
      double backward_113 = scratch[42][tid];
      ddot_0 += backward_113;
      double backward_114 = scratch[43][tid];
      ddot_0 += backward_114;
      double backward_123 = scratch[60][tid];
      ddot_0 += backward_123;
      double backward_124 = scratch[61][tid];
      ddot_0 += backward_124;
      double backward_125 = scratch[62][tid];
      ddot_0 += backward_125;
      double backward_126 = scratch[63][tid];
      ddot_0 += backward_126;
      double backward_141 = scratch[93][tid];
      ddot_0 += backward_141;
      double forward_77 = scratch[0][tid];
      cdot_0 += forward_77;
      double forward_112 = scratch[33][tid];
      cdot_0 += forward_112;
      double forward_113 = scratch[34][tid];
      cdot_0 += forward_113;
      double forward_114 = scratch[35][tid];
      cdot_0 += forward_114;
      double forward_123 = scratch[52][tid];
      cdot_0 += forward_123;
      double forward_124 = scratch[53][tid];
      cdot_0 += forward_124;
      double forward_125 = scratch[54][tid];
      cdot_0 += forward_125;
      double forward_126 = scratch[55][tid];
      cdot_0 += forward_126;
      double forward_141 = scratch[85][tid];
      cdot_0 += forward_141;
      double backward_78 = scratch[9][tid];
      cdot_0 += backward_78;
      double backward_95 = scratch[11][tid];
      cdot_0 += backward_95;
      double backward_102 = scratch[26][tid];
      cdot_0 += backward_102;
      double backward_132 = scratch[76][tid];
      cdot_0 += backward_132;
      double forward_131 = scratch[67][tid];
      ddot_1 += forward_131;
      ddot_1 += forward_132;
      double forward_133 = scratch[69][tid];
      ddot_1 += forward_133;
      double forward_134 = scratch[70][tid];
      ddot_1 += forward_134;
      double forward_135 = scratch[71][tid];
      ddot_1 += forward_135;
      double forward_136 = scratch[80][tid];
      ddot_1 += forward_136;
      double backward_138 = scratch[90][tid];
      ddot_1 += backward_138;
      double backward_139 = scratch[91][tid];
      ddot_1 += backward_139;
      double forward_138 = scratch[82][tid];
      cdot_1 += forward_138;
      double forward_139 = scratch[83][tid];
      cdot_1 += forward_139;
      double backward_131 = scratch[75][tid];
      cdot_1 += backward_131;
      cdot_1 += backward_132;
      double backward_133 = scratch[77][tid];
      cdot_1 += backward_133;
      double backward_134 = scratch[78][tid];
      cdot_1 += backward_134;
      double backward_135 = scratch[79][tid];
      cdot_1 += backward_135;
      double backward_136 = scratch[88][tid];
      cdot_1 += backward_136;
    }
    else if (wid == 7)
    {
      double forward_96 = scratch[4][tid];
      ddot_0 += forward_96;
      double forward_99 = scratch[7][tid];
      ddot_0 += forward_99;
      double forward_113 = scratch[34][tid];
      ddot_0 += forward_113;
      double forward_124 = scratch[53][tid];
      ddot_0 += forward_124;
      double forward_131 = scratch[67][tid];
      ddot_0 += forward_131;
      double backward_100 = scratch[24][tid];
      ddot_0 += backward_100;
      double backward_115 = scratch[44][tid];
      ddot_0 += backward_115;
      double backward_116 = scratch[45][tid];
      ddot_0 += backward_116;
      double backward_126 = scratch[63][tid];
      ddot_0 += backward_126;
      double backward_134 = scratch[78][tid];
      ddot_0 += backward_134;
      double backward_140 = scratch[92][tid];
      ddot_0 += backward_140;
      double forward_100 = scratch[16][tid];
      cdot_0 += forward_100;
      double forward_115 = scratch[36][tid];
      cdot_0 += forward_115;
      double forward_116 = scratch[37][tid];
      cdot_0 += forward_116;
      double forward_126 = scratch[55][tid];
      cdot_0 += forward_126;
      double forward_134 = scratch[70][tid];
      cdot_0 += forward_134;
      double forward_140 = scratch[84][tid];
      cdot_0 += forward_140;
      double backward_96 = scratch[12][tid];
      cdot_0 += backward_96;
      double backward_99 = scratch[15][tid];
      cdot_0 += backward_99;
      double backward_113 = scratch[42][tid];
      cdot_0 += backward_113;
      double backward_124 = scratch[61][tid];
      cdot_0 += backward_124;
      double backward_131 = scratch[75][tid];
      cdot_0 += backward_131;
      double backward_141 = scratch[93][tid];
      ddot_1 += backward_141;
      double forward_141 = scratch[85][tid];
      cdot_1 += forward_141;
    }
    asm volatile("bar.sync 0, 256;" : : : "memory");
    scratch[wid+0][tid] = rr_f_12;
    scratch[wid+8][tid] = rr_r_12;
    scratch[wid+16][tid] = rr_f_13;
    scratch[wid+24][tid] = rr_r_13;
    scratch[wid+32][tid] = rr_f_14;
    scratch[wid+40][tid] = rr_r_14;
    scratch[wid+48][tid] = rr_f_15;
    scratch[wid+56][tid] = rr_r_15;
    scratch[wid+64][tid] = rr_f_16;
    scratch[wid+72][tid] = rr_r_16;
    scratch[wid+80][tid] = rr_f_17;
    scratch[wid+88][tid] = rr_r_17;
    asm volatile("bar.sync 0, 256;" : : : "memory");
    if (wid == 0)
    {
      double forward_16 = scratch[38][tid];
      ddot_0 += forward_16;
      double forward_17 = scratch[39][tid];
      ddot_0 += forward_17;
      double forward_18 = scratch[48][tid];
      ddot_0 += forward_18;
      double backward_53 = scratch[77][tid];
      ddot_0 += backward_53;
      double backward_69 = scratch[90][tid];
      ddot_0 += backward_69;
      double forward_53 = scratch[69][tid];
      cdot_0 += forward_53;
      double forward_69 = scratch[82][tid];
      cdot_0 += forward_69;
      double backward_16 = scratch[46][tid];
      cdot_0 += backward_16;
      double backward_17 = scratch[47][tid];
      cdot_0 += backward_17;
      double backward_18 = scratch[56][tid];
      cdot_0 += backward_18;
      double forward_49 = scratch[65][tid];
      ddot_1 += forward_49;
      double forward_50 = scratch[66][tid];
      ddot_1 += forward_50;
      double forward_51 = scratch[67][tid];
      ddot_1 += forward_51;
      ddot_1 += forward_53;
      double backward_52 = scratch[76][tid];
      ddot_1 += backward_52;
      double forward_52 = scratch[68][tid];
      cdot_1 += forward_52;
      double backward_49 = scratch[73][tid];
      cdot_1 += backward_49;
      double backward_50 = scratch[74][tid];
      cdot_1 += backward_50;
      double backward_51 = scratch[75][tid];
      cdot_1 += backward_51;
      cdot_1 += backward_53;
      double backward_157 = scratch[12][tid];
      ddot_2 += backward_157;
      double forward_157 = scratch[4][tid];
      cdot_2 += forward_157;
    }
    else if (wid == 1)
    {
      double forward_1 = scratch[19][tid];
      ddot_0 += forward_1;
      double forward_2 = scratch[20][tid];
      ddot_0 += forward_2;
      double forward_4 = scratch[22][tid];
      ddot_0 += forward_4;
      double backward_9 = scratch[42][tid];
      ddot_0 += backward_9;
      double backward_17 = scratch[47][tid];
      ddot_0 += backward_17;
      double backward_36 = scratch[60][tid];
      ddot_0 += backward_36;
      double backward_49 = scratch[73][tid];
      ddot_0 += backward_49;
      double backward_79 = scratch[93][tid];
      ddot_0 += backward_79;
      double forward_9 = scratch[34][tid];
      cdot_0 += forward_9;
      double forward_17 = scratch[39][tid];
      cdot_0 += forward_17;
      double forward_36 = scratch[52][tid];
      cdot_0 += forward_36;
      double forward_49 = scratch[65][tid];
      cdot_0 += forward_49;
      double forward_79 = scratch[85][tid];
      cdot_0 += forward_79;
      double backward_1 = scratch[27][tid];
      cdot_0 += backward_1;
      double backward_2 = scratch[28][tid];
      cdot_0 += backward_2;
      double backward_4 = scratch[30][tid];
      cdot_0 += backward_4;
    }
    else if (wid == 2)
    {
      double forward_1 = scratch[19][tid];
      ddot_0 += forward_1;
      double forward_3 = scratch[21][tid];
      ddot_0 += forward_3;
      double forward_5 = scratch[23][tid];
      ddot_0 = __fma_rn(2.0, forward_5, ddot_0);
      double forward_6 = scratch[32][tid];
      ddot_0 += forward_6;
      double forward_11 = scratch[36][tid];
      ddot_0 += forward_11;
      double forward_18 = scratch[48][tid];
      ddot_0 += forward_18;
      double forward_43 = scratch[53][tid];
      ddot_0 += forward_43;
      double forward_50 = scratch[66][tid];
      ddot_0 += forward_50;
      double forward_65 = scratch[80][tid];
      ddot_0 += forward_65;
      double forward_80 = scratch[86][tid];
      ddot_0 += forward_80;
      double backward_0 = scratch[26][tid];
      ddot_0 += backward_0;
      double backward_22 = scratch[57][tid];
      ddot_0 += backward_22;
      double backward_44 = scratch[62][tid];
      ddot_0 += backward_44;
      double forward_0 = scratch[18][tid];
      cdot_0 += forward_0;
      double forward_22 = scratch[49][tid];
      cdot_0 += forward_22;
      double forward_44 = scratch[54][tid];
      cdot_0 += forward_44;
      double backward_1 = scratch[27][tid];
      cdot_0 += backward_1;
      double backward_3 = scratch[29][tid];
      cdot_0 += backward_3;
      double backward_5 = scratch[31][tid];
      cdot_0 = __fma_rn(2.0, backward_5, cdot_0);
      double backward_6 = scratch[40][tid];
      cdot_0 += backward_6;
      double backward_11 = scratch[44][tid];
      cdot_0 += backward_11;
      double backward_18 = scratch[56][tid];
      cdot_0 += backward_18;
      double backward_43 = scratch[61][tid];
      cdot_0 += backward_43;
      double backward_50 = scratch[74][tid];
      cdot_0 += backward_50;
      double backward_65 = scratch[88][tid];
      cdot_0 += backward_65;
      double backward_80 = scratch[94][tid];
      cdot_0 += backward_80;
      double backward_71 = scratch[92][tid];
      ddot_1 += backward_71;
      double backward_79 = scratch[93][tid];
      ddot_1 += backward_79;
      ddot_1 += backward_80;
      double backward_81 = scratch[95][tid];
      ddot_1 += backward_81;
      double forward_71 = scratch[84][tid];
      cdot_1 += forward_71;
      double forward_79 = scratch[85][tid];
      cdot_1 += forward_79;
      cdot_1 += forward_80;
      double forward_81 = scratch[87][tid];
      cdot_1 += forward_81;
    }
    else if (wid == 3)
    {
      double forward_36 = scratch[52][tid];
      ddot_0 += forward_36;
      double forward_164 = scratch[16][tid];
      ddot_0 += forward_164;
      double backward_43 = scratch[61][tid];
      ddot_0 += backward_43;
      double backward_45 = scratch[63][tid];
      ddot_0 += backward_45;
      double backward_63 = scratch[78][tid];
      ddot_0 += backward_63;
      double backward_65 = scratch[88][tid];
      ddot_0 += backward_65;
      double backward_66 = scratch[89][tid];
      ddot_0 += backward_66;
      double backward_69 = scratch[90][tid];
      ddot_0 += backward_69;
      double backward_153 = scratch[8][tid];
      ddot_0 += backward_153;
      double backward_156 = scratch[11][tid];
      ddot_0 = __fma_rn(2.0, backward_156, ddot_0);
      double forward_43 = scratch[53][tid];
      cdot_0 += forward_43;
      double forward_45 = scratch[55][tid];
      cdot_0 += forward_45;
      double forward_63 = scratch[70][tid];
      cdot_0 += forward_63;
      double forward_65 = scratch[80][tid];
      cdot_0 += forward_65;
      double forward_66 = scratch[81][tid];
      cdot_0 += forward_66;
      double forward_69 = scratch[82][tid];
      cdot_0 += forward_69;
      double forward_153 = scratch[0][tid];
      cdot_0 += forward_153;
      double forward_156 = scratch[3][tid];
      cdot_0 = __fma_rn(2.0, forward_156, cdot_0);
      double backward_36 = scratch[60][tid];
      cdot_0 += backward_36;
      double backward_164 = scratch[24][tid];
      cdot_0 += backward_164;
      ddot_1 += forward_63;
      double forward_64 = scratch[71][tid];
      ddot_1 += forward_64;
      ddot_1 += forward_65;
      ddot_1 += forward_66;
      ddot_1 += forward_69;
      double forward_70 = scratch[83][tid];
      ddot_1 += forward_70;
      double backward_44 = scratch[62][tid];
      ddot_1 += backward_44;
      double backward_46 = scratch[72][tid];
      ddot_1 += backward_46;
      ddot_1 += backward_153;
      double forward_44 = scratch[54][tid];
      cdot_1 += forward_44;
      double forward_46 = scratch[64][tid];
      cdot_1 += forward_46;
      cdot_1 += forward_153;
      cdot_1 += backward_63;
      double backward_64 = scratch[79][tid];
      cdot_1 += backward_64;
      cdot_1 += backward_65;
      cdot_1 += backward_66;
      cdot_1 += backward_69;
      double backward_70 = scratch[91][tid];
      cdot_1 += backward_70;
    }
    else if (wid == 4)
    {
      double forward_9 = scratch[34][tid];
      ddot_0 += forward_9;
      double forward_10 = scratch[35][tid];
      ddot_0 += forward_10;
      double forward_11 = scratch[36][tid];
      ddot_0 += forward_11;
      double forward_12 = scratch[37][tid];
      ddot_0 += forward_12;
      double forward_23 = scratch[50][tid];
      ddot_0 += forward_23;
      double forward_46 = scratch[64][tid];
      ddot_0 += forward_46;
      double forward_52 = scratch[68][tid];
      ddot_0 += forward_52;
      double forward_53 = scratch[69][tid];
      ddot_0 += forward_53;
      double forward_69 = scratch[82][tid];
      ddot_0 += forward_69;
      double backward_17 = scratch[47][tid];
      ddot_0 += backward_17;
      double backward_18 = scratch[56][tid];
      ddot_0 += backward_18;
      double backward_154 = scratch[9][tid];
      ddot_0 += backward_154;
      double forward_17 = scratch[39][tid];
      cdot_0 += forward_17;
      double forward_18 = scratch[48][tid];
      cdot_0 += forward_18;
      double forward_154 = scratch[1][tid];
      cdot_0 += forward_154;
      double backward_9 = scratch[42][tid];
      cdot_0 += backward_9;
      double backward_10 = scratch[43][tid];
      cdot_0 += backward_10;
      double backward_11 = scratch[44][tid];
      cdot_0 += backward_11;
      double backward_12 = scratch[45][tid];
      cdot_0 += backward_12;
      double backward_23 = scratch[58][tid];
      cdot_0 += backward_23;
      double backward_46 = scratch[72][tid];
      cdot_0 += backward_46;
      double backward_52 = scratch[76][tid];
      cdot_0 += backward_52;
      double backward_53 = scratch[77][tid];
      cdot_0 += backward_53;
      double backward_69 = scratch[90][tid];
      cdot_0 += backward_69;
      double forward_167 = scratch[17][tid];
      ddot_1 += forward_167;
      double backward_163 = scratch[15][tid];
      ddot_1 += backward_163;
      double forward_163 = scratch[7][tid];
      cdot_1 += forward_163;
      double backward_167 = scratch[25][tid];
      cdot_1 += backward_167;
      double forward_161 = scratch[5][tid];
      ddot_2 += forward_161;
      double forward_162 = scratch[6][tid];
      ddot_2 += forward_162;
      double backward_161 = scratch[13][tid];
      cdot_2 += backward_161;
      double backward_162 = scratch[14][tid];
      cdot_2 += backward_162;
    }
    else if (wid == 5)
    {
      double forward_43 = scratch[53][tid];
      ddot_0 += forward_43;
      double forward_44 = scratch[54][tid];
      ddot_0 += forward_44;
      double forward_45 = scratch[55][tid];
      ddot_0 += forward_45;
      double forward_46 = scratch[64][tid];
      ddot_0 += forward_46;
      double forward_52 = scratch[68][tid];
      ddot_0 += forward_52;
      double forward_71 = scratch[84][tid];
      ddot_0 = __fma_rn(2.0, forward_71, ddot_0);
      double backward_49 = scratch[73][tid];
      ddot_0 += backward_49;
      double backward_50 = scratch[74][tid];
      ddot_0 += backward_50;
      double backward_51 = scratch[75][tid];
      ddot_0 += backward_51;
      double backward_53 = scratch[77][tid];
      ddot_0 += backward_53;
      double backward_64 = scratch[79][tid];
      ddot_0 += backward_64;
      double backward_70 = scratch[91][tid];
      ddot_0 += backward_70;
      double forward_49 = scratch[65][tid];
      cdot_0 += forward_49;
      double forward_50 = scratch[66][tid];
      cdot_0 += forward_50;
      double forward_51 = scratch[67][tid];
      cdot_0 += forward_51;
      double forward_53 = scratch[69][tid];
      cdot_0 += forward_53;
      double forward_64 = scratch[71][tid];
      cdot_0 += forward_64;
      double forward_70 = scratch[83][tid];
      cdot_0 += forward_70;
      double backward_43 = scratch[61][tid];
      cdot_0 += backward_43;
      double backward_44 = scratch[62][tid];
      cdot_0 += backward_44;
      double backward_45 = scratch[63][tid];
      cdot_0 += backward_45;
      double backward_46 = scratch[72][tid];
      cdot_0 += backward_46;
      double backward_52 = scratch[76][tid];
      cdot_0 += backward_52;
      double backward_71 = scratch[92][tid];
      cdot_0 = __fma_rn(2.0, backward_71, cdot_0);
      double forward_79 = scratch[85][tid];
      ddot_1 += forward_79;
      double forward_80 = scratch[86][tid];
      ddot_1 += forward_80;
      double forward_81 = scratch[87][tid];
      ddot_1 += forward_81;
      double backward_79 = scratch[93][tid];
      cdot_1 += backward_79;
      double backward_80 = scratch[94][tid];
      cdot_1 += backward_80;
      double backward_81 = scratch[95][tid];
      cdot_1 += backward_81;
      double forward_155 = scratch[2][tid];
      ddot_2 += forward_155;
      double backward_155 = scratch[10][tid];
      cdot_2 += backward_155;
    }
    else if (wid == 6)
    {
      double forward_0 = scratch[18][tid];
      ddot_0 += forward_0;
      double forward_6 = scratch[32][tid];
      ddot_0 += forward_6;
      double forward_7 = scratch[33][tid];
      ddot_0 += forward_7;
      double forward_9 = scratch[34][tid];
      ddot_0 += forward_9;
      double forward_10 = scratch[35][tid];
      ddot_0 += forward_10;
      double forward_16 = scratch[38][tid];
      ddot_0 += forward_16;
      double forward_17 = scratch[39][tid];
      ddot_0 += forward_17;
      double forward_49 = scratch[65][tid];
      ddot_0 += forward_49;
      double forward_64 = scratch[71][tid];
      ddot_0 += forward_64;
      double forward_79 = scratch[85][tid];
      ddot_0 += forward_79;
      double backward_1 = scratch[27][tid];
      ddot_0 += backward_1;
      double backward_2 = scratch[28][tid];
      ddot_0 += backward_2;
      double backward_4 = scratch[30][tid];
      ddot_0 = __fma_rn(2.0, backward_4, ddot_0);
      double backward_24 = scratch[59][tid];
      ddot_0 += backward_24;
      double backward_43 = scratch[61][tid];
      ddot_0 += backward_43;
      double backward_63 = scratch[78][tid];
      ddot_0 += backward_63;
      double backward_71 = scratch[92][tid];
      ddot_0 += backward_71;
      double backward_163 = scratch[15][tid];
      ddot_0 += backward_163;
      double forward_1 = scratch[19][tid];
      cdot_0 += forward_1;
      double forward_2 = scratch[20][tid];
      cdot_0 += forward_2;
      double forward_4 = scratch[22][tid];
      cdot_0 = __fma_rn(2.0, forward_4, cdot_0);
      double forward_24 = scratch[51][tid];
      cdot_0 += forward_24;
      double forward_43 = scratch[53][tid];
      cdot_0 += forward_43;
      double forward_63 = scratch[70][tid];
      cdot_0 += forward_63;
      double forward_71 = scratch[84][tid];
      cdot_0 += forward_71;
      double forward_163 = scratch[7][tid];
      cdot_0 += forward_163;
      double backward_0 = scratch[26][tid];
      cdot_0 += backward_0;
      double backward_6 = scratch[40][tid];
      cdot_0 += backward_6;
      double backward_7 = scratch[41][tid];
      cdot_0 += backward_7;
      double backward_9 = scratch[42][tid];
      cdot_0 += backward_9;
      double backward_10 = scratch[43][tid];
      cdot_0 += backward_10;
      double backward_16 = scratch[46][tid];
      cdot_0 += backward_16;
      double backward_17 = scratch[47][tid];
      cdot_0 += backward_17;
      double backward_49 = scratch[73][tid];
      cdot_0 += backward_49;
      double backward_64 = scratch[79][tid];
      cdot_0 += backward_64;
      double backward_79 = scratch[93][tid];
      cdot_0 += backward_79;
    }
    else if (wid == 7)
    {
      double forward_2 = scratch[20][tid];
      ddot_0 += forward_2;
      double forward_7 = scratch[33][tid];
      ddot_0 += forward_7;
      double forward_12 = scratch[37][tid];
      ddot_0 += forward_12;
      double forward_24 = scratch[51][tid];
      ddot_0 += forward_24;
      double forward_51 = scratch[67][tid];
      ddot_0 += forward_51;
      double forward_66 = scratch[81][tid];
      ddot_0 += forward_66;
      double forward_81 = scratch[87][tid];
      ddot_0 += forward_81;
      double forward_164 = scratch[16][tid];
      ddot_0 += forward_164;
      double backward_0 = scratch[26][tid];
      ddot_0 += backward_0;
      double backward_1 = scratch[27][tid];
      ddot_0 += backward_1;
      double backward_3 = scratch[29][tid];
      ddot_0 = __fma_rn(2.0, backward_3, ddot_0);
      double backward_6 = scratch[40][tid];
      ddot_0 += backward_6;
      double backward_10 = scratch[43][tid];
      ddot_0 = __fma_rn(2.0, backward_10, ddot_0);
      double backward_11 = scratch[44][tid];
      ddot_0 += backward_11;
      double backward_16 = scratch[46][tid];
      ddot_0 += backward_16;
      double backward_18 = scratch[56][tid];
      ddot_0 += backward_18;
      double backward_23 = scratch[58][tid];
      ddot_0 += backward_23;
      double backward_45 = scratch[63][tid];
      ddot_0 += backward_45;
      double backward_46 = scratch[72][tid];
      ddot_0 += backward_46;
      double backward_50 = scratch[74][tid];
      ddot_0 += backward_50;
      double backward_64 = scratch[79][tid];
      ddot_0 += backward_64;
      double backward_65 = scratch[88][tid];
      ddot_0 += backward_65;
      double backward_80 = scratch[94][tid];
      ddot_0 += backward_80;
      double backward_156 = scratch[11][tid];
      ddot_0 += backward_156;
      double backward_167 = scratch[25][tid];
      ddot_0 += backward_167;
      double forward_0 = scratch[18][tid];
      cdot_0 += forward_0;
      double forward_1 = scratch[19][tid];
      cdot_0 += forward_1;
      double forward_3 = scratch[21][tid];
      cdot_0 = __fma_rn(2.0, forward_3, cdot_0);
      double forward_6 = scratch[32][tid];
      cdot_0 += forward_6;
      double forward_10 = scratch[35][tid];
      cdot_0 = __fma_rn(2.0, forward_10, cdot_0);
      double forward_11 = scratch[36][tid];
      cdot_0 += forward_11;
      double forward_16 = scratch[38][tid];
      cdot_0 += forward_16;
      double forward_18 = scratch[48][tid];
      cdot_0 += forward_18;
      double forward_23 = scratch[50][tid];
      cdot_0 += forward_23;
      double forward_45 = scratch[55][tid];
      cdot_0 += forward_45;
      double forward_46 = scratch[64][tid];
      cdot_0 += forward_46;
      double forward_50 = scratch[66][tid];
      cdot_0 += forward_50;
      double forward_64 = scratch[71][tid];
      cdot_0 += forward_64;
      double forward_65 = scratch[80][tid];
      cdot_0 += forward_65;
      double forward_80 = scratch[86][tid];
      cdot_0 += forward_80;
      double forward_156 = scratch[3][tid];
      cdot_0 += forward_156;
      double forward_167 = scratch[17][tid];
      cdot_0 += forward_167;
      double backward_2 = scratch[28][tid];
      cdot_0 += backward_2;
      double backward_7 = scratch[41][tid];
      cdot_0 += backward_7;
      double backward_12 = scratch[45][tid];
      cdot_0 += backward_12;
      double backward_24 = scratch[59][tid];
      cdot_0 += backward_24;
      double backward_51 = scratch[75][tid];
      cdot_0 += backward_51;
      double backward_66 = scratch[89][tid];
      cdot_0 += backward_66;
      double backward_81 = scratch[95][tid];
      cdot_0 += backward_81;
      double backward_164 = scratch[24][tid];
      cdot_0 += backward_164;
      double backward_154 = scratch[9][tid];
      ddot_1 += backward_154;
      double forward_154 = scratch[1][tid];
      cdot_1 += forward_154;
    }
    asm volatile("bar.sync 0, 256;" : : : "memory");
    scratch[wid+0][tid] = rr_f_18;
    scratch[wid+8][tid] = rr_r_18;
    scratch[wid+16][tid] = rr_f_19;
    scratch[wid+24][tid] = rr_r_19;
    scratch[wid+32][tid] = rr_f_20;
    scratch[wid+40][tid] = rr_r_20;
    scratch[wid+48][tid] = rr_f_21;
    scratch[wid+56][tid] = rr_r_21;
    asm volatile("bar.sync 0, 256;" : : : "memory");
    if (wid == 0)
    {
      double backward_83 = scratch[9][tid];
      ddot_0 += backward_83;
      double backward_144 = scratch[28][tid];
      ddot_0 += backward_144;
      double backward_173 = scratch[61][tid];
      ddot_0 += backward_173;
      double forward_83 = scratch[1][tid];
      cdot_0 += forward_83;
      double forward_144 = scratch[20][tid];
      cdot_0 += forward_144;
      double forward_173 = scratch[53][tid];
      cdot_0 += forward_173;
      double backward_84 = scratch[10][tid];
      ddot_1 += backward_84;
      double backward_147 = scratch[31][tid];
      ddot_1 += backward_147;
      double backward_172 = scratch[60][tid];
      ddot_1 += backward_172;
      double forward_84 = scratch[2][tid];
      cdot_1 += forward_84;
      double forward_147 = scratch[23][tid];
      cdot_1 += forward_147;
      double forward_172 = scratch[52][tid];
      cdot_1 += forward_172;
      double forward_158 = scratch[35][tid];
      ddot_2 += forward_158;
      double backward_158 = scratch[43][tid];
      cdot_2 += backward_158;
    }
    else if (wid == 1)
    {
      double backward_86 = scratch[11][tid];
      ddot_0 += backward_86;
      double backward_146 = scratch[30][tid];
      ddot_0 += backward_146;
      double backward_166 = scratch[47][tid];
      ddot_0 += backward_166;
      double backward_170 = scratch[58][tid];
      ddot_0 += backward_170;
      double backward_171 = scratch[59][tid];
      ddot_0 += backward_171;
      double forward_86 = scratch[3][tid];
      cdot_0 += forward_86;
      double forward_146 = scratch[22][tid];
      cdot_0 += forward_146;
      double forward_166 = scratch[39][tid];
      cdot_0 += forward_166;
      double forward_170 = scratch[50][tid];
      cdot_0 += forward_170;
      double forward_171 = scratch[51][tid];
      cdot_0 += forward_171;
      ddot_1 += backward_86;
      double backward_88 = scratch[13][tid];
      ddot_1 += backward_88;
      double backward_89 = scratch[14][tid];
      ddot_1 += backward_89;
      cdot_1 += forward_86;
      double forward_88 = scratch[5][tid];
      cdot_1 += forward_88;
      double forward_89 = scratch[6][tid];
      cdot_1 += forward_89;
      double forward_159 = scratch[36][tid];
      ddot_2 += forward_159;
      double backward_158 = scratch[43][tid];
      ddot_2 += backward_158;
      double forward_158 = scratch[35][tid];
      cdot_2 += forward_158;
      double backward_159 = scratch[44][tid];
      cdot_2 += backward_159;
    }
    else if (wid == 2)
    {
      double forward_87 = scratch[4][tid];
      ddot_0 += forward_87;
      double forward_91 = scratch[7][tid];
      ddot_0 += forward_91;
      double forward_145 = scratch[21][tid];
      ddot_0 += forward_145;
      double forward_174 = scratch[54][tid];
      ddot_0 += forward_174;
      double backward_87 = scratch[12][tid];
      cdot_0 += backward_87;
      double backward_91 = scratch[15][tid];
      cdot_0 += backward_91;
      double backward_145 = scratch[29][tid];
      cdot_0 += backward_145;
      double backward_174 = scratch[62][tid];
      cdot_0 += backward_174;
      double forward_86 = scratch[3][tid];
      ddot_1 += forward_86;
      ddot_1 += forward_87;
      double forward_88 = scratch[5][tid];
      ddot_1 += forward_88;
      double forward_89 = scratch[6][tid];
      ddot_1 = __fma_rn(2.0, forward_89, ddot_1);
      ddot_1 += forward_91;
      double backward_82 = scratch[8][tid];
      ddot_1 += backward_82;
      double backward_83 = scratch[9][tid];
      ddot_1 += backward_83;
      double backward_84 = scratch[10][tid];
      ddot_1 += backward_84;
      double forward_82 = scratch[0][tid];
      cdot_1 += forward_82;
      double forward_83 = scratch[1][tid];
      cdot_1 += forward_83;
      double forward_84 = scratch[2][tid];
      cdot_1 += forward_84;
      double backward_86 = scratch[11][tid];
      cdot_1 += backward_86;
      cdot_1 += backward_87;
      double backward_88 = scratch[13][tid];
      cdot_1 += backward_88;
      double backward_89 = scratch[14][tid];
      cdot_1 = __fma_rn(2.0, backward_89, cdot_1);
      cdot_1 += backward_91;
      double forward_160 = scratch[37][tid];
      ddot_2 += forward_160;
      double backward_159 = scratch[44][tid];
      ddot_2 += backward_159;
      double forward_159 = scratch[36][tid];
      cdot_2 += forward_159;
      double backward_160 = scratch[45][tid];
      cdot_2 += backward_160;
    }
    else if (wid == 3)
    {
      double backward_87 = scratch[12][tid];
      ddot_0 += backward_87;
      double forward_87 = scratch[4][tid];
      cdot_0 += forward_87;
      double backward_130 = scratch[25][tid];
      ddot_1 += backward_130;
      double backward_148 = scratch[40][tid];
      ddot_1 += backward_148;
      double forward_130 = scratch[17][tid];
      cdot_1 += forward_130;
      double forward_148 = scratch[32][tid];
      cdot_1 += forward_148;
      double backward_91 = scratch[15][tid];
      ddot_2 += backward_91;
      double forward_91 = scratch[7][tid];
      cdot_2 += forward_91;
    }
    else if (wid == 4)
    {
      double forward_83 = scratch[1][tid];
      ddot_0 += forward_83;
      double forward_144 = scratch[20][tid];
      ddot_0 += forward_144;
      double forward_173 = scratch[53][tid];
      ddot_0 += forward_173;
      double backward_82 = scratch[8][tid];
      ddot_0 += backward_82;
      double backward_88 = scratch[13][tid];
      ddot_0 += backward_88;
      double backward_142 = scratch[26][tid];
      ddot_0 += backward_142;
      double forward_82 = scratch[0][tid];
      cdot_0 += forward_82;
      double forward_88 = scratch[5][tid];
      cdot_0 += forward_88;
      double forward_142 = scratch[18][tid];
      cdot_0 += forward_142;
      double backward_83 = scratch[9][tid];
      cdot_0 += backward_83;
      double backward_144 = scratch[28][tid];
      cdot_0 += backward_144;
      double backward_173 = scratch[61][tid];
      cdot_0 += backward_173;
      double forward_165 = scratch[38][tid];
      ddot_1 += forward_165;
      double forward_166 = scratch[39][tid];
      ddot_1 += forward_166;
      double forward_168 = scratch[48][tid];
      ddot_1 += forward_168;
      double forward_169 = scratch[49][tid];
      ddot_1 += forward_169;
      double forward_170 = scratch[50][tid];
      ddot_1 += forward_170;
      double forward_171 = scratch[51][tid];
      ddot_1 += forward_171;
      double forward_172 = scratch[52][tid];
      ddot_1 += forward_172;
      ddot_1 += forward_173;
      double forward_174 = scratch[54][tid];
      ddot_1 += forward_174;
      double backward_165 = scratch[46][tid];
      cdot_1 += backward_165;
      double backward_166 = scratch[47][tid];
      cdot_1 += backward_166;
      double backward_168 = scratch[56][tid];
      cdot_1 += backward_168;
      double backward_169 = scratch[57][tid];
      cdot_1 += backward_169;
      double backward_170 = scratch[58][tid];
      cdot_1 += backward_170;
      double backward_171 = scratch[59][tid];
      cdot_1 += backward_171;
      double backward_172 = scratch[60][tid];
      cdot_1 += backward_172;
      cdot_1 += backward_173;
      double backward_174 = scratch[62][tid];
      cdot_1 += backward_174;
      double backward_160 = scratch[45][tid];
      ddot_2 += backward_160;
      double forward_160 = scratch[37][tid];
      cdot_2 += forward_160;
    }
    else if (wid == 5)
    {
      double forward_84 = scratch[2][tid];
      ddot_0 += forward_84;
      double forward_147 = scratch[23][tid];
      ddot_0 += forward_147;
      double forward_172 = scratch[52][tid];
      ddot_0 += forward_172;
      double backward_87 = scratch[12][tid];
      ddot_0 += backward_87;
      double backward_110 = scratch[24][tid];
      ddot_0 += backward_110;
      double backward_130 = scratch[25][tid];
      ddot_0 += backward_130;
      double backward_149 = scratch[41][tid];
      ddot_0 += backward_149;
      double forward_87 = scratch[4][tid];
      cdot_0 += forward_87;
      double forward_110 = scratch[16][tid];
      cdot_0 += forward_110;
      double forward_130 = scratch[17][tid];
      cdot_0 += forward_130;
      double forward_149 = scratch[33][tid];
      cdot_0 += forward_149;
      double backward_84 = scratch[10][tid];
      cdot_0 += backward_84;
      double backward_147 = scratch[31][tid];
      cdot_0 += backward_147;
      double backward_172 = scratch[60][tid];
      cdot_0 += backward_172;
      double forward_82 = scratch[0][tid];
      ddot_1 += forward_82;
      double forward_83 = scratch[1][tid];
      ddot_1 += forward_83;
      ddot_1 += forward_84;
      double backward_89 = scratch[14][tid];
      ddot_1 += backward_89;
      double forward_89 = scratch[6][tid];
      cdot_1 += forward_89;
      double backward_82 = scratch[8][tid];
      cdot_1 += backward_82;
      double backward_83 = scratch[9][tid];
      cdot_1 += backward_83;
      cdot_1 += backward_84;
      double forward_152 = scratch[34][tid];
      ddot_2 = __fma_rn(2.0, forward_152, ddot_2);
      double backward_152 = scratch[42][tid];
      cdot_2 = __fma_rn(2.0, backward_152, cdot_2);
    }
    else if (wid == 6)
    {
      double forward_86 = scratch[3][tid];
      ddot_0 += forward_86;
      double forward_146 = scratch[22][tid];
      ddot_0 += forward_146;
      double forward_170 = scratch[50][tid];
      ddot_0 += forward_170;
      double forward_171 = scratch[51][tid];
      ddot_0 += forward_171;
      double backward_91 = scratch[15][tid];
      ddot_0 += backward_91;
      double backward_168 = scratch[56][tid];
      ddot_0 += backward_168;
      double backward_170 = scratch[58][tid];
      ddot_0 += backward_170;
      double forward_91 = scratch[7][tid];
      cdot_0 += forward_91;
      double forward_168 = scratch[48][tid];
      cdot_0 += forward_168;
      cdot_0 += forward_170;
      double backward_86 = scratch[11][tid];
      cdot_0 += backward_86;
      double backward_146 = scratch[30][tid];
      cdot_0 += backward_146;
      cdot_0 += backward_170;
      double backward_171 = scratch[59][tid];
      cdot_0 += backward_171;
      double forward_130 = scratch[17][tid];
      ddot_1 += forward_130;
      double backward_130 = scratch[25][tid];
      cdot_1 += backward_130;
    }
    else if (wid == 7)
    {
      double forward_110 = scratch[16][tid];
      ddot_0 += forward_110;
      double forward_143 = scratch[19][tid];
      ddot_0 += forward_143;
      double forward_168 = scratch[48][tid];
      ddot_0 += forward_168;
      double forward_169 = scratch[49][tid];
      ddot_0 += forward_169;
      double backward_145 = scratch[29][tid];
      ddot_0 += backward_145;
      double backward_158 = scratch[43][tid];
      ddot_0 += backward_158;
      double backward_159 = scratch[44][tid];
      ddot_0 += backward_159;
      double backward_169 = scratch[57][tid];
      ddot_0 += backward_169;
      double backward_171 = scratch[59][tid];
      ddot_0 += backward_171;
      double backward_172 = scratch[60][tid];
      ddot_0 += backward_172;
      double backward_173 = scratch[61][tid];
      ddot_0 += backward_173;
      double backward_174 = scratch[62][tid];
      ddot_0 = __fma_rn(2.0, backward_174, ddot_0);
      double forward_145 = scratch[21][tid];
      cdot_0 += forward_145;
      double forward_158 = scratch[35][tid];
      cdot_0 += forward_158;
      double forward_159 = scratch[36][tid];
      cdot_0 += forward_159;
      cdot_0 += forward_169;
      double forward_171 = scratch[51][tid];
      cdot_0 += forward_171;
      double forward_172 = scratch[52][tid];
      cdot_0 += forward_172;
      double forward_173 = scratch[53][tid];
      cdot_0 += forward_173;
      double forward_174 = scratch[54][tid];
      cdot_0 = __fma_rn(2.0, forward_174, cdot_0);
      double backward_110 = scratch[24][tid];
      cdot_0 += backward_110;
      double backward_143 = scratch[27][tid];
      cdot_0 += backward_143;
      double backward_168 = scratch[56][tid];
      cdot_0 += backward_168;
      cdot_0 += backward_169;
      double forward_142 = scratch[18][tid];
      ddot_1 += forward_142;
      ddot_1 += forward_143;
      double forward_144 = scratch[20][tid];
      ddot_1 += forward_144;
      ddot_1 += forward_145;
      double forward_146 = scratch[22][tid];
      ddot_1 += forward_146;
      double forward_147 = scratch[23][tid];
      ddot_1 += forward_147;
      double backward_152 = scratch[42][tid];
      ddot_1 += backward_152;
      double forward_152 = scratch[34][tid];
      cdot_1 += forward_152;
      double backward_142 = scratch[26][tid];
      cdot_1 += backward_142;
      cdot_1 += backward_143;
      double backward_144 = scratch[28][tid];
      cdot_1 += backward_144;
      cdot_1 += backward_145;
      double backward_146 = scratch[30][tid];
      cdot_1 += backward_146;
      double backward_147 = scratch[31][tid];
      cdot_1 += backward_147;
    }
    asm volatile("bar.sync 0, 256;" : : : "memory");
    {
      double scale = 1.0;
      const bool need_scale = ((ddot_0 * dt * 0.09058503722621332) > 
        stif_mole_frac_0); 
      if (__any(need_scale))
      {
        double recip_ddot = 1.0/ddot_0;
        int index = __shfl(index_constants[0], 0, 32);
        double recip_mass = recip_molecular_masses[index];
        double part_sum = cdot_0 + stif_diffusion_0 * recip_mass;
        double c0 = stif_mole_frac_0 * part_sum * recip_ddot;
  c0 = stif_mole_frac_0 * (part_sum + (stif_mole_frac_0 - c0) * recip_dt) * 
          recip_ddot; 
        if (need_scale)
          scale = c0/stif_mole_frac_0;
      }
      {
        scratch[(threadIdx.x >> 5)+0][tid] = scale;
      }
    }
    {
      double scale = 1.0;
      const bool need_scale = ((ddot_1 * dt * 0.09058503722621332) > 
        stif_mole_frac_1); 
      if (__any(need_scale))
      {
        double recip_ddot = 1.0/ddot_1;
        int index = __shfl(index_constants[0], 1, 32);
        double recip_mass = recip_molecular_masses[index];
        double part_sum = cdot_1 + stif_diffusion_1 * recip_mass;
        double c0 = stif_mole_frac_1 * part_sum * recip_ddot;
  c0 = stif_mole_frac_1 * (part_sum + (stif_mole_frac_1 - c0) * recip_dt) * 
          recip_ddot; 
        if (need_scale)
          scale = c0/stif_mole_frac_1;
      }
      {
        scratch[(threadIdx.x >> 5)+8][tid] = scale;
      }
    }
    {
      double scale = 1.0;
      const bool need_scale = ((ddot_2 * dt * 0.09058503722621332) > 
        stif_mole_frac_2); 
      if (__any(need_scale))
      {
        double recip_ddot = 1.0/ddot_2;
        int index = __shfl(index_constants[0], 2, 32);
        double recip_mass = recip_molecular_masses[index];
        double part_sum = cdot_2 + stif_diffusion_2 * recip_mass;
        double c0 = stif_mole_frac_2 * part_sum * recip_ddot;
  c0 = stif_mole_frac_2 * (part_sum + (stif_mole_frac_2 - c0) * recip_dt) * 
          recip_ddot; 
        if (need_scale)
          scale = c0/stif_mole_frac_2;
      }
      if (((threadIdx.x >> 5)+16) < 22)
      {
        scratch[(threadIdx.x >> 5)+16][tid] = scale;
      }
    }
    asm volatile("bar.sync 0, 256;" : : : "memory");
    if (wid == 0)
    {
      double scale_NC_HO2 = scratch[4][tid];
      rr_r_0 *= scale_NC_HO2;
      double scale_NC_H = scratch[6][tid];
      rr_f_0 *= scale_NC_H;
      double scale_NC_CH4 = scratch[8][tid];
      rr_r_1 *= scale_NC_CH4;
      double scale_NC_CH3 = scratch[5][tid];
      rr_f_1 *= scale_NC_CH3;
      rr_f_1 *= scale_NC_H;
      double scale_NC_C2H4 = scratch[9][tid];
      rr_r_2 *= scale_NC_C2H4;
      rr_f_2 *= scale_NC_H;
      double scale_NC_O = scratch[2][tid];
      rr_f_3 *= scale_NC_O;
      rr_r_3 *= scale_NC_H;
      double scale_NC_CH2O = scratch[3][tid];
      rr_f_4 *= scale_NC_CH2O;
      double scale_NC_OH = scratch[7][tid];
      rr_f_4 *= scale_NC_OH;
      rr_r_5 *= scale_NC_CH2O;
      rr_f_5 *= scale_NC_OH;
      rr_r_6 *= scale_NC_C2H4;
      rr_f_6 *= scale_NC_CH3;
      rr_r_6 *= scale_NC_H;
      rr_f_7 *= scale_NC_C2H4;
      rr_f_7 *= scale_NC_O;
      rr_r_7 *= scale_NC_OH;
      rr_f_8 *= scale_NC_O;
      rr_r_11 *= scale_NC_HO2;
      double scale_NC_CH3OCH3 = scratch[14][tid];
      rr_f_11 *= scale_NC_CH3OCH3;
      rr_r_12 *= scale_NC_CH2O;
      double scale_NC_CH3O = scratch[11][tid];
      rr_r_12 *= scale_NC_CH3O;
      rr_f_13 *= scale_NC_CH2O;
      rr_f_13 *= scale_NC_OH;
      rr_f_14 *= scale_NC_O;
      rr_f_14 *= scale_NC_H;
      rr_r_14 *= scale_NC_OH;
      double scale_NC_H2O2 = scratch[0][tid];
      rr_f_15 *= scale_NC_H2O2;
      rr_f_15 *= scale_NC_O;
      rr_r_15 *= scale_NC_HO2;
      rr_r_15 *= scale_NC_OH;
      rr_r_16 *= scale_NC_CH3O;
      rr_f_16 *= scale_NC_HO2;
      rr_f_16 *= scale_NC_CH3;
      rr_r_16 *= scale_NC_OH;
      rr_f_17 *= scale_NC_O;
      rr_r_17 *= scale_NC_CH2O;
      rr_f_17 *= scale_NC_CH3O;
      rr_r_17 *= scale_NC_OH;
      double scale_NC_C2H5 = scratch[10][tid];
      rr_r_18 *= scale_NC_C2H5;
      rr_r_18 *= scale_NC_HO2;
      double scale_NC_C2H6 = scratch[13][tid];
      rr_f_18 *= scale_NC_C2H6;
      rr_r_19 *= scale_NC_CH3;
      rr_f_19 *= scale_NC_OH;
      rr_r_20 *= scale_NC_CH3O;
      double scale_NC_HCOOH = scratch[12][tid];
      rr_f_21 *= scale_NC_HCOOH;
      rr_r_21 *= scale_NC_H;
      rr_f_21 *= scale_NC_OH;
    }
    else if (wid == 1)
    {
      double scale_NC_H2O2 = scratch[0][tid];
      rr_r_0 *= scale_NC_H2O2;
      double scale_NC_HO2 = scratch[4][tid];
      rr_f_0 *= scale_NC_HO2;
      double scale_NC_CH2O = scratch[3][tid];
      rr_r_1 *= scale_NC_CH2O;
      rr_r_1 *= scale_NC_HO2;
      double scale_NC_H = scratch[6][tid];
      rr_f_2 *= scale_NC_H;
      rr_f_3 *= scale_NC_HO2;
      rr_r_3 *= scale_NC_H;
      double scale_NC_OH = scratch[7][tid];
      rr_r_3 *= scale_NC_OH;
      rr_f_4 *= scale_NC_CH2O;
      rr_r_4 *= scale_NC_HO2;
      rr_r_5 *= scale_NC_H2O2;
      rr_r_5 *= scale_NC_CH2O;
      rr_f_5 *= scale_NC_HO2;
      double scale_NC_CH3O = scratch[11][tid];
      rr_f_6 *= scale_NC_CH3O;
      rr_f_6 *= scale_NC_H;
      double scale_NC_C2H4 = scratch[9][tid];
      rr_f_7 *= scale_NC_C2H4;
      rr_r_7 *= scale_NC_HO2;
      double scale_NC_O = scratch[2][tid];
      rr_f_8 *= scale_NC_O;
      rr_r_8 *= scale_NC_H;
      rr_r_10 *= scale_NC_CH2O;
      rr_r_11 *= scale_NC_CH2O;
      double scale_NC_CH3 = scratch[5][tid];
      rr_r_11 *= scale_NC_CH3;
      rr_r_12 *= scale_NC_HO2;
      double scale_NC_CH3OCHO = scratch[15][tid];
      rr_r_12 *= scale_NC_CH3OCHO;
      double scale_NC_HCOOH = scratch[12][tid];
      rr_f_13 *= scale_NC_HCOOH;
      rr_r_13 *= scale_NC_OH;
      rr_f_14 *= scale_NC_H;
      rr_f_14 *= scale_NC_OH;
      rr_r_15 *= scale_NC_O;
      double scale_NC_CH4 = scratch[8][tid];
      rr_f_16 *= scale_NC_CH4;
      double scale_NC_H2 = scratch[1][tid];
      rr_r_16 *= scale_NC_H2;
      rr_r_16 *= scale_NC_CH3;
      rr_f_16 *= scale_NC_H;
      rr_r_17 *= scale_NC_CH2O;
      rr_f_17 *= scale_NC_CH3O;
      rr_f_17 *= scale_NC_OH;
      rr_r_18 *= scale_NC_H2O2;
      double scale_NC_C2H5 = scratch[10][tid];
      rr_r_18 *= scale_NC_C2H5;
      rr_f_18 *= scale_NC_HO2;
      double scale_NC_C2H6 = scratch[13][tid];
      rr_f_18 *= scale_NC_C2H6;
      rr_r_19 *= scale_NC_CH3O;
      rr_r_19 *= scale_NC_CH3;
      double scale_NC_CH3OCH3 = scratch[14][tid];
      rr_f_19 *= scale_NC_CH3OCH3;
      rr_r_20 *= scale_NC_CH3;
      rr_f_21 *= scale_NC_HCOOH;
      rr_f_21 *= scale_NC_OH;
      rr_r_21 *= scale_NC_OH;
    }
    else if (wid == 2)
    {
      double scale_NC_H2O2 = scratch[0][tid];
      rr_r_0 *= scale_NC_H2O2;
      double scale_NC_HO2 = scratch[4][tid];
      rr_f_0 *= scale_NC_HO2;
      double scale_NC_CH2O = scratch[3][tid];
      rr_r_1 *= scale_NC_CH2O;
      rr_r_1 *= scale_NC_HO2;
      double scale_NC_CH3 = scratch[5][tid];
      rr_r_2 *= scale_NC_CH3;
      double scale_NC_H = scratch[6][tid];
      rr_f_2 *= scale_NC_H;
      double scale_NC_H2 = scratch[1][tid];
      rr_r_3 *= scale_NC_H2;
      rr_r_4 *= scale_NC_H2O2;
      rr_f_4 *= scale_NC_CH2O;
      rr_f_4 *= scale_NC_HO2;
      rr_r_5 *= scale_NC_CH2O;
      double scale_NC_C2H5 = scratch[10][tid];
      rr_f_6 *= scale_NC_C2H5;
      double scale_NC_C2H6 = scratch[13][tid];
      rr_r_6 *= scale_NC_C2H6;
      rr_r_7 *= scale_NC_H2;
      rr_f_7 *= scale_NC_H;
      rr_r_8 *= scale_NC_CH2O;
      rr_r_8 *= scale_NC_H;
      double scale_NC_OH = scratch[7][tid];
      rr_f_8 *= scale_NC_OH;
      double scale_NC_CH3HCO = scratch[19][tid];
      rr_f_10 *= scale_NC_CH3HCO;
      rr_r_10 *= scale_NC_CH3;
      rr_r_11 *= scale_NC_CH2O;
      double scale_NC_CH3O = scratch[11][tid];
      rr_f_11 *= scale_NC_CH3O;
      double scale_NC_CH3OCH3 = scratch[14][tid];
      rr_r_11 *= scale_NC_CH3OCH3;
      double scale_NC_CH3OCH2O2 = scratch[21][tid];
      rr_f_12 *= scale_NC_CH3OCH2O2;
      double scale_NC_O = scratch[2][tid];
      rr_r_13 *= scale_NC_O;
      rr_f_13 *= scale_NC_H;
      rr_r_13 *= scale_NC_OH;
      rr_r_14 *= scale_NC_H2;
      rr_f_14 *= scale_NC_HO2;
      rr_f_14 *= scale_NC_H;
      rr_f_15 *= scale_NC_HO2;
      rr_r_15 *= scale_NC_OH;
      double scale_NC_CH4 = scratch[8][tid];
      rr_f_16 *= scale_NC_CH4;
      rr_f_16 *= scale_NC_O;
      rr_r_16 *= scale_NC_CH3;
      rr_r_16 *= scale_NC_OH;
      rr_r_17 *= scale_NC_H2O2;
      rr_r_17 *= scale_NC_CH2O;
      rr_f_17 *= scale_NC_CH3O;
      rr_f_17 *= scale_NC_HO2;
      rr_r_18 *= scale_NC_CH4;
      rr_r_18 *= scale_NC_C2H5;
      rr_f_18 *= scale_NC_CH3;
      rr_f_18 *= scale_NC_C2H6;
      rr_r_19 *= scale_NC_HO2;
      double scale_NC_CH3OCHO = scratch[15][tid];
      rr_f_19 *= scale_NC_CH3OCHO;
      rr_f_20 *= scale_NC_CH3OCH2O2;
      rr_r_20 *= scale_NC_CH3OCHO;
      rr_r_21 *= scale_NC_H2;
      double scale_NC_HCOOH = scratch[12][tid];
      rr_f_21 *= scale_NC_HCOOH;
      rr_f_21 *= scale_NC_H;
      rr_r_21 *= scale_NC_H;
    }
    else if (wid == 3)
    {
      double scale_NC_H2O2 = scratch[0][tid];
      rr_f_0 *= scale_NC_H2O2;
      double scale_NC_OH = scratch[7][tid];
      rr_r_0 *= scale_NC_OH;
      double scale_NC_CH2O = scratch[3][tid];
      rr_r_1 *= scale_NC_CH2O;
      double scale_NC_CH3O = scratch[11][tid];
      rr_f_1 *= scale_NC_CH3O;
      double scale_NC_HO2 = scratch[4][tid];
      rr_r_1 *= scale_NC_HO2;
      double scale_NC_H = scratch[6][tid];
      rr_r_2 *= scale_NC_H;
      double scale_NC_CH4 = scratch[8][tid];
      rr_r_3 *= scale_NC_CH4;
      double scale_NC_CH3 = scratch[5][tid];
      rr_f_3 *= scale_NC_CH3;
      rr_r_4 *= scale_NC_CH4;
      rr_f_4 *= scale_NC_CH2O;
      rr_f_4 *= scale_NC_CH3;
      rr_f_5 *= scale_NC_CH4;
      rr_r_5 *= scale_NC_CH3;
      double scale_NC_H2 = scratch[1][tid];
      rr_r_6 *= scale_NC_H2;
      double scale_NC_C2H4 = scratch[9][tid];
      rr_f_6 *= scale_NC_C2H4;
      rr_f_6 *= scale_NC_H;
      rr_f_7 *= scale_NC_H2O2;
      rr_r_7 *= scale_NC_C2H4;
      rr_r_7 *= scale_NC_HO2;
      rr_f_8 *= scale_NC_H2;
      rr_r_8 *= scale_NC_CH3;
      rr_r_8 *= scale_NC_H;
      rr_r_9 *= scale_NC_H2;
      double scale_NC_O = scratch[2][tid];
      rr_f_9 *= scale_NC_O;
      double scale_NC_CH3OCH3 = scratch[14][tid];
      rr_f_10 *= scale_NC_CH3OCH3;
      rr_f_10 *= scale_NC_OH;
      rr_f_11 *= scale_NC_CH2O;
      rr_r_11 *= scale_NC_CH3OCH3;
      rr_r_12 *= scale_NC_CH2O;
      rr_r_12 *= scale_NC_OH;
      rr_f_13 *= scale_NC_H2;
      rr_f_13 *= scale_NC_O;
      rr_r_13 *= scale_NC_H;
      rr_r_13 *= scale_NC_OH;
      rr_f_14 *= scale_NC_HO2;
      rr_f_14 *= scale_NC_H;
      rr_r_14 *= scale_NC_OH;
      rr_r_15 *= scale_NC_H;
      rr_f_15 *= scale_NC_OH;
      rr_f_16 *= scale_NC_CH4;
      rr_r_16 *= scale_NC_CH3;
      rr_f_16 *= scale_NC_OH;
      rr_f_17 *= scale_NC_CH3O;
      rr_r_17 *= scale_NC_CH3;
      rr_r_18 *= scale_NC_H2;
      rr_r_18 *= scale_NC_C2H4;
      double scale_NC_C2H5 = scratch[10][tid];
      rr_f_18 *= scale_NC_C2H5;
      rr_f_18 *= scale_NC_H;
      rr_f_19 *= scale_NC_OH;
      double scale_NC_CH3OCHO = scratch[15][tid];
      rr_f_19 *= scale_NC_CH3OCHO;
      double scale_NC_O2CH2OCH2O2H = scratch[16][tid];
      rr_f_20 *= scale_NC_O2CH2OCH2O2H;
      double scale_NC_HO2CH2OCHO = scratch[17][tid];
      rr_r_20 *= scale_NC_HO2CH2OCHO;
      rr_r_20 *= scale_NC_OH;
      rr_r_21 *= scale_NC_H2;
      double scale_NC_HCOOH = scratch[12][tid];
      rr_f_21 *= scale_NC_HCOOH;
      rr_f_21 *= scale_NC_H;
      rr_r_21 *= scale_NC_OH;
    }
    else if (wid == 4)
    {
      double scale_NC_H2O2 = scratch[0][tid];
      rr_f_0 *= scale_NC_H2O2;
      double scale_NC_HO2 = scratch[4][tid];
      rr_r_0 *= scale_NC_HO2;
      double scale_NC_OH = scratch[7][tid];
      rr_f_0 *= scale_NC_OH;
      double scale_NC_CH2O = scratch[3][tid];
      rr_r_1 *= scale_NC_CH2O;
      double scale_NC_CH3O = scratch[11][tid];
      rr_f_1 *= scale_NC_CH3O;
      rr_r_1 *= scale_NC_HO2;
      rr_r_2 *= scale_NC_HO2;
      rr_r_3 *= scale_NC_CH2O;
      rr_r_4 *= scale_NC_CH2O;
      double scale_NC_H = scratch[6][tid];
      rr_r_4 *= scale_NC_H;
      double scale_NC_CH4 = scratch[8][tid];
      rr_f_5 *= scale_NC_CH4;
      double scale_NC_CH3 = scratch[5][tid];
      rr_r_5 *= scale_NC_CH3;
      double scale_NC_C2H4 = scratch[9][tid];
      rr_f_6 *= scale_NC_C2H4;
      rr_f_6 *= scale_NC_OH;
      rr_r_7 *= scale_NC_CH4;
      rr_f_7 *= scale_NC_CH3;
      rr_r_8 *= scale_NC_OH;
      double scale_NC_O = scratch[2][tid];
      rr_f_9 *= scale_NC_O;
      rr_r_9 *= scale_NC_H;
      double scale_NC_H2 = scratch[1][tid];
      rr_r_10 *= scale_NC_H2;
      rr_f_10 *= scale_NC_H;
      double scale_NC_CH3OCH3 = scratch[14][tid];
      rr_f_10 *= scale_NC_CH3OCH3;
      rr_f_11 *= scale_NC_HO2;
      rr_r_11 *= scale_NC_OH;
      double scale_NC_O2CH2OCH2O2H = scratch[16][tid];
      rr_r_12 *= scale_NC_O2CH2OCH2O2H;
      rr_f_13 *= scale_NC_H2;
      rr_r_13 *= scale_NC_H;
      rr_f_13 *= scale_NC_OH;
      rr_f_14 *= scale_NC_O;
      rr_f_14 *= scale_NC_HO2;
      rr_r_14 *= scale_NC_OH;
      rr_r_15 *= scale_NC_H2;
      rr_f_15 *= scale_NC_CH2O;
      rr_r_16 *= scale_NC_CH4;
      rr_f_16 *= scale_NC_HO2;
      rr_f_16 *= scale_NC_CH3;
      double scale_NC_C2H5 = scratch[10][tid];
      rr_r_17 *= scale_NC_C2H5;
      rr_f_17 *= scale_NC_CH3;
      rr_r_17 *= scale_NC_H;
      rr_f_18 *= scale_NC_O;
      rr_f_18 *= scale_NC_C2H5;
      rr_r_18 *= scale_NC_CH2O;
      rr_r_18 *= scale_NC_CH3;
      rr_r_19 *= scale_NC_H2O2;
      rr_f_19 *= scale_NC_HO2;
      double scale_NC_CH3OCHO = scratch[15][tid];
      rr_f_19 *= scale_NC_CH3OCHO;
      double scale_NC_HO2CH2OCHO = scratch[17][tid];
      rr_f_20 *= scale_NC_HO2CH2OCHO;
      double scale_NC_OCH2OCHO = scratch[18][tid];
      rr_r_20 *= scale_NC_OCH2OCHO;
      rr_r_20 *= scale_NC_OH;
      rr_r_21 *= scale_NC_CH4;
      double scale_NC_HCOOH = scratch[12][tid];
      rr_f_21 *= scale_NC_HCOOH;
      rr_f_21 *= scale_NC_CH3;
      rr_r_21 *= scale_NC_OH;
    }
    else if (wid == 5)
    {
      double scale_NC_H2O2 = scratch[0][tid];
      rr_f_0 *= scale_NC_H2O2;
      double scale_NC_HO2 = scratch[4][tid];
      rr_r_0 *= scale_NC_HO2;
      double scale_NC_OH = scratch[7][tid];
      rr_f_0 *= scale_NC_OH;
      double scale_NC_C2H5 = scratch[10][tid];
      rr_f_1 *= scale_NC_C2H5;
      double scale_NC_C2H6 = scratch[13][tid];
      rr_r_1 *= scale_NC_C2H6;
      double scale_NC_H = scratch[6][tid];
      rr_f_1 *= scale_NC_H;
      double scale_NC_H2 = scratch[1][tid];
      rr_r_2 *= scale_NC_H2;
      rr_f_2 *= scale_NC_H;
      double scale_NC_CH2O = scratch[3][tid];
      rr_f_3 *= scale_NC_CH2O;
      rr_r_3 *= scale_NC_H;
      rr_r_4 *= scale_NC_H2;
      rr_r_4 *= scale_NC_CH2O;
      rr_f_4 *= scale_NC_H;
      double scale_NC_CH3 = scratch[5][tid];
      rr_f_5 *= scale_NC_CH3;
      rr_f_5 *= scale_NC_OH;
      double scale_NC_CH4 = scratch[8][tid];
      rr_r_6 *= scale_NC_CH4;
      double scale_NC_C2H4 = scratch[9][tid];
      rr_f_6 *= scale_NC_C2H4;
      rr_f_6 *= scale_NC_CH3;
      rr_r_7 *= scale_NC_C2H4;
      rr_r_8 *= scale_NC_CH2O;
      rr_f_8 *= scale_NC_HO2;
      rr_r_8 *= scale_NC_OH;
      rr_r_9 *= scale_NC_CH2O;
      rr_r_9 *= scale_NC_H;
      rr_f_9 *= scale_NC_OH;
      rr_r_10 *= scale_NC_CH4;
      rr_f_10 *= scale_NC_CH3;
      double scale_NC_CH3OCH3 = scratch[14][tid];
      rr_f_10 *= scale_NC_CH3OCH3;
      rr_r_11 *= scale_NC_H;
      double scale_NC_CH3OCHO = scratch[15][tid];
      rr_r_11 *= scale_NC_CH3OCHO;
      double scale_NC_HOCH2OCO = scratch[20][tid];
      rr_f_12 *= scale_NC_HOCH2OCO;
      double scale_NC_O = scratch[2][tid];
      rr_f_13 *= scale_NC_O;
      rr_r_13 *= scale_NC_OH;
      rr_f_14 *= scale_NC_HO2;
      rr_f_14 *= scale_NC_OH;
      rr_f_15 *= scale_NC_O;
      rr_r_15 *= scale_NC_CH2O;
      rr_f_15 *= scale_NC_CH3;
      rr_r_15 *= scale_NC_H;
      rr_r_16 *= scale_NC_H2O2;
      rr_f_16 *= scale_NC_CH4;
      rr_f_16 *= scale_NC_HO2;
      rr_r_16 *= scale_NC_CH3;
      rr_r_17 *= scale_NC_H2;
      rr_r_17 *= scale_NC_C2H5;
      rr_f_17 *= scale_NC_C2H6;
      rr_f_17 *= scale_NC_H;
      rr_r_18 *= scale_NC_C2H4;
      rr_f_18 *= scale_NC_C2H5;
      rr_r_18 *= scale_NC_HO2;
      rr_f_19 *= scale_NC_O;
      rr_r_19 *= scale_NC_OH;
      rr_f_19 *= scale_NC_CH3OCHO;
      double scale_NC_OCH2OCHO = scratch[18][tid];
      rr_f_20 *= scale_NC_OCH2OCHO;
      rr_r_20 *= scale_NC_HOCH2OCO;
      rr_r_21 *= scale_NC_H2O2;
      rr_f_21 *= scale_NC_HO2;
      double scale_NC_HCOOH = scratch[12][tid];
      rr_f_21 *= scale_NC_HCOOH;
      rr_r_21 *= scale_NC_OH;
    }
    else if (wid == 6)
    {
      double scale_NC_O = scratch[2][tid];
      rr_f_0 *= scale_NC_O;
      double scale_NC_H2 = scratch[1][tid];
      rr_r_1 *= scale_NC_H2;
      double scale_NC_C2H4 = scratch[9][tid];
      rr_f_1 *= scale_NC_C2H4;
      rr_f_2 *= scale_NC_O;
      double scale_NC_OH = scratch[7][tid];
      rr_r_2 *= scale_NC_OH;
      rr_r_3 *= scale_NC_H2;
      double scale_NC_CH2O = scratch[3][tid];
      rr_f_3 *= scale_NC_CH2O;
      double scale_NC_H = scratch[6][tid];
      rr_f_3 *= scale_NC_H;
      double scale_NC_CH3 = scratch[5][tid];
      rr_r_4 *= scale_NC_CH3;
      rr_f_4 *= scale_NC_H;
      rr_r_4 *= scale_NC_OH;
      rr_f_5 *= scale_NC_CH3;
      rr_f_5 *= scale_NC_OH;
      rr_f_6 *= scale_NC_C2H4;
      rr_f_6 *= scale_NC_O;
      rr_r_6 *= scale_NC_CH3;
      rr_r_7 *= scale_NC_CH2O;
      rr_r_8 *= scale_NC_H2;
      rr_f_9 *= scale_NC_H2;
      rr_r_9 *= scale_NC_CH3;
      rr_r_9 *= scale_NC_H;
      rr_f_10 *= scale_NC_O;
      double scale_NC_CH3OCH3 = scratch[14][tid];
      rr_f_10 *= scale_NC_CH3OCH3;
      rr_r_10 *= scale_NC_OH;
      double scale_NC_CH3OCH2O2 = scratch[21][tid];
      rr_r_11 *= scale_NC_CH3OCH2O2;
      double scale_NC_HOCH2OCO = scratch[20][tid];
      rr_f_12 *= scale_NC_HOCH2OCO;
      rr_f_13 *= scale_NC_H2;
      rr_r_13 *= scale_NC_H;
      double scale_NC_H2O2 = scratch[0][tid];
      rr_f_14 *= scale_NC_H2O2;
      rr_f_14 *= scale_NC_H;
      rr_r_14 *= scale_NC_OH;
      rr_r_15 *= scale_NC_O;
      double scale_NC_CH3O = scratch[11][tid];
      rr_r_15 *= scale_NC_CH3O;
      rr_f_15 *= scale_NC_CH3;
      rr_r_16 *= scale_NC_CH2O;
      rr_f_16 *= scale_NC_CH3O;
      rr_r_16 *= scale_NC_H;
      rr_f_17 *= scale_NC_O;
      double scale_NC_C2H5 = scratch[10][tid];
      rr_r_17 *= scale_NC_C2H5;
      double scale_NC_C2H6 = scratch[13][tid];
      rr_f_17 *= scale_NC_C2H6;
      rr_r_17 *= scale_NC_OH;
      rr_r_18 *= scale_NC_C2H4;
      rr_f_18 *= scale_NC_C2H5;
      rr_r_18 *= scale_NC_C2H6;
      rr_r_19 *= scale_NC_H2;
      rr_f_19 *= scale_NC_H;
      double scale_NC_CH3OCHO = scratch[15][tid];
      rr_f_19 *= scale_NC_CH3OCHO;
      double scale_NC_HCOOH = scratch[12][tid];
      rr_f_20 *= scale_NC_HCOOH;
      rr_f_21 *= scale_NC_O;
      rr_f_21 *= scale_NC_HCOOH;
      rr_r_21 *= scale_NC_OH;
    }
    else if (wid == 7)
    {
      double scale_NC_CH3 = scratch[5][tid];
      rr_f_0 *= scale_NC_CH3;
      double scale_NC_C2H6 = scratch[13][tid];
      rr_r_0 *= scale_NC_C2H6;
      double scale_NC_C2H4 = scratch[9][tid];
      rr_f_1 *= scale_NC_C2H4;
      double scale_NC_C2H5 = scratch[10][tid];
      rr_r_1 *= scale_NC_C2H5;
      double scale_NC_H = scratch[6][tid];
      rr_f_1 *= scale_NC_H;
      double scale_NC_OH = scratch[7][tid];
      rr_f_2 *= scale_NC_OH;
      double scale_NC_O = scratch[2][tid];
      rr_f_3 *= scale_NC_O;
      double scale_NC_CH2O = scratch[3][tid];
      rr_f_3 *= scale_NC_CH2O;
      rr_r_3 *= scale_NC_OH;
      rr_f_4 *= scale_NC_O;
      rr_r_4 *= scale_NC_CH2O;
      rr_r_4 *= scale_NC_OH;
      rr_r_5 *= scale_NC_C2H4;
      rr_f_5 *= scale_NC_CH3;
      rr_r_5 *= scale_NC_H;
      rr_f_6 *= scale_NC_OH;
      double scale_NC_HO2 = scratch[4][tid];
      rr_r_7 *= scale_NC_HO2;
      rr_r_9 *= scale_NC_H;
      rr_r_9 *= scale_NC_OH;
      double scale_NC_H2O2 = scratch[0][tid];
      rr_r_10 *= scale_NC_H2O2;
      rr_f_10 *= scale_NC_HO2;
      double scale_NC_CH3OCH3 = scratch[14][tid];
      rr_f_10 *= scale_NC_CH3OCH3;
      double scale_NC_CH3OCH2O2 = scratch[21][tid];
      rr_f_11 *= scale_NC_CH3OCH2O2;
      double scale_NC_HCOOH = scratch[12][tid];
      rr_r_12 *= scale_NC_HCOOH;
      rr_r_12 *= scale_NC_H;
      rr_f_13 *= scale_NC_O;
      rr_f_14 *= scale_NC_H2O2;
      double scale_NC_H2 = scratch[1][tid];
      rr_r_14 *= scale_NC_H2;
      rr_r_14 *= scale_NC_HO2;
      rr_f_14 *= scale_NC_H;
      rr_r_15 *= scale_NC_CH2O;
      rr_f_15 *= scale_NC_CH3;
      rr_r_15 *= scale_NC_OH;
      double scale_NC_CH3O = scratch[11][tid];
      rr_f_16 *= scale_NC_CH3O;
      rr_r_16 *= scale_NC_CH3;
      rr_f_16 *= scale_NC_H;
      rr_r_16 *= scale_NC_OH;
      rr_r_17 *= scale_NC_C2H5;
      rr_f_17 *= scale_NC_C2H6;
      rr_f_17 *= scale_NC_OH;
      rr_f_18 *= scale_NC_O;
      rr_f_18 *= scale_NC_C2H5;
      double scale_NC_CH3HCO = scratch[19][tid];
      rr_r_18 *= scale_NC_CH3HCO;
      rr_r_18 *= scale_NC_H;
      double scale_NC_CH4 = scratch[8][tid];
      rr_r_19 *= scale_NC_CH4;
      rr_f_19 *= scale_NC_CH3;
      double scale_NC_CH3OCHO = scratch[15][tid];
      rr_f_19 *= scale_NC_CH3OCHO;
      rr_r_20 *= scale_NC_H2;
      rr_f_20 *= scale_NC_HCOOH;
    }
    /* Warp specialized output code */
    double output_0 = 0.0;
    double output_1 = 0.0;
    double output_2 = 0.0;
    double output_3 = 0.0;
    asm volatile("bar.sync 0, 256;" : : : "memory");
    {
      double ropl_0 = rr_f_0 - rr_r_0;
      scratch[wid+0][tid] = ropl_0;
    }
    {
      double ropl_1 = rr_f_1 - rr_r_1;
      scratch[wid+8][tid] = ropl_1;
    }
    {
      double ropl_2 = rr_f_2 - rr_r_2;
      scratch[wid+16][tid] = ropl_2;
    }
    {
      double ropl_3 = rr_f_3 - rr_r_3;
      scratch[wid+24][tid] = ropl_3;
    }
    {
      double ropl_4 = rr_f_4 - rr_r_4;
      scratch[wid+32][tid] = ropl_4;
    }
    {
      double ropl_5 = rr_f_5 - rr_r_5;
      scratch[wid+40][tid] = ropl_5;
    }
    {
      double ropl_6 = rr_f_6 - rr_r_6;
      scratch[wid+48][tid] = ropl_6;
    }
    {
      double ropl_7 = rr_f_7 - rr_r_7;
      scratch[wid+56][tid] = ropl_7;
    }
    {
      double ropl_8 = rr_f_8 - rr_r_8;
      scratch[wid+64][tid] = ropl_8;
    }
    {
      double ropl_9 = rr_f_9 - rr_r_9;
      scratch[wid+72][tid] = ropl_9;
    }
    {
      double ropl_10 = rr_f_10 - rr_r_10;
      scratch[wid+80][tid] = ropl_10;
    }
    {
      double ropl_11 = rr_f_11 - rr_r_11;
      scratch[wid+88][tid] = ropl_11;
    }
    asm volatile("bar.sync 0, 256;" : : : "memory");
    if (wid == 0)
    {
      double ropl_109 = scratch[64][tid];
      output_0 += ropl_109;
      double ropl_127 = scratch[80][tid];
      output_0 += ropl_127;
      double ropl_128 = scratch[81][tid];
      output_0 += ropl_128;
      double ropl_32 = scratch[26][tid];
      output_0 = __fma_rn(2.0, ropl_32, output_0);
      double ropl_90 = scratch[50][tid];
      output_0 += ropl_90;
      double ropl_25 = scratch[19][tid];
      output_0 += ropl_25;
      double ropl_33 = scratch[27][tid];
      output_0 += ropl_33;
      double ropl_122 = scratch[75][tid];
      output_0 += ropl_122;
      double ropl_26 = scratch[20][tid];
      output_0 += ropl_26;
      double ropl_34 = scratch[28][tid];
      output_0 += ropl_34;
      double ropl_27 = scratch[21][tid];
      output_0 += ropl_27;
      double ropl_21 = scratch[6][tid];
      output_0 -= ropl_21;
      double ropl_28 = scratch[22][tid];
      output_0 += ropl_28;
      double ropl_29 = scratch[23][tid];
      output_0 += ropl_29;
      double ropl_126 = scratch[79][tid];
      output_0 += ropl_126;
      output_1 += ropl_32;
      double ropl_102 = scratch[58][tid];
      output_1 += ropl_102;
      double ropl_95 = scratch[51][tid];
      output_1 += ropl_95;
      double ropl_114 = scratch[67][tid];
      output_1 -= ropl_114;
      output_1 += ropl_122;
      double ropl_132 = scratch[84][tid];
      output_1 += ropl_132;
      output_1 += ropl_27;
      double ropl_55 = scratch[37][tid];
      output_1 += ropl_55;
      double ropl_92 = scratch[14][tid];
      output_1 += ropl_92;
      double ropl_37 = scratch[30][tid];
      output_1 += ropl_37;
      double ropl_117 = scratch[70][tid];
      output_1 += ropl_117;
      double ropl_125 = scratch[78][tid];
      output_1 -= ropl_125;
      double ropl_129 = scratch[82][tid];
      output_3 -= ropl_129;
    }
    else if (wid == 1)
    {
      double ropl_30 = scratch[24][tid];
      output_0 -= ropl_30;
      double ropl_100 = scratch[56][tid];
      output_0 -= ropl_100;
      double ropl_109 = scratch[64][tid];
      output_0 -= ropl_109;
      double ropl_112 = scratch[65][tid];
      output_0 -= ropl_112;
      double ropl_122 = scratch[75][tid];
      output_0 -= ropl_122;
      double ropl_123 = scratch[76][tid];
      output_0 -= ropl_123;
      double ropl_21 = scratch[6][tid];
      output_0 -= ropl_21;
      double ropl_28 = scratch[22][tid];
      output_0 -= ropl_28;
      double ropl_98 = scratch[54][tid];
      output_0 -= ropl_98;
      double ropl_134 = scratch[86][tid];
      output_0 -= ropl_134;
      double ropl_38 = scratch[31][tid];
      output_0 -= ropl_38;
      double ropl_57 = scratch[39][tid];
      output_0 -= ropl_57;
      double ropl_39 = scratch[32][tid];
      output_1 += ropl_39;
      double ropl_58 = scratch[40][tid];
      output_1 += ropl_58;
      double ropl_127 = scratch[80][tid];
      output_1 += ropl_127;
      double ropl_78 = scratch[49][tid];
      output_1 += ropl_78;
      double ropl_131 = scratch[83][tid];
      output_1 += ropl_131;
      double ropl_19 = scratch[4][tid];
      output_1 += ropl_19;
      double ropl_96 = scratch[52][tid];
      output_1 += ropl_96;
      double ropl_20 = scratch[5][tid];
      output_1 += ropl_20;
      double ropl_74 = scratch[45][tid];
      output_1 += ropl_74;
      double ropl_75 = scratch[46][tid];
      output_1 += ropl_75;
      double ropl_29 = scratch[23][tid];
      output_1 += ropl_29;
      double ropl_99 = scratch[55][tid];
      output_1 += ropl_99;
      double ropl_150 = scratch[94][tid];
      output_2 += ropl_150;
      double ropl_151 = scratch[95][tid];
      output_2 = __fma_rn(-2.0, ropl_151, output_2);
    }
    else if (wid == 2)
    {
      double ropl_8 = scratch[0][tid];
      output_0 -= ropl_8;
      double ropl_127 = scratch[80][tid];
      output_0 -= ropl_127;
      double ropl_136 = scratch[88][tid];
      output_0 -= ropl_136;
      double ropl_13 = scratch[1][tid];
      output_0 += ropl_13;
      double ropl_59 = scratch[9][tid];
      output_0 -= ropl_59;
      double ropl_40 = scratch[33][tid];
      output_0 -= ropl_40;
      double ropl_101 = scratch[57][tid];
      output_0 -= ropl_101;
      double ropl_14 = scratch[2][tid];
      output_0 += ropl_14;
      double ropl_60 = scratch[10][tid];
      output_0 -= ropl_60;
      double ropl_67 = scratch[11][tid];
      output_0 -= ropl_67;
      double ropl_68 = scratch[12][tid];
      output_0 -= ropl_68;
      double ropl_26 = scratch[20][tid];
      output_0 -= ropl_26;
      double ropl_115 = scratch[68][tid];
      output_0 -= ropl_115;
      double ropl_106 = scratch[62][tid];
      output_0 -= ropl_106;
      double ropl_150 = scratch[94][tid];
      output_0 -= ropl_150;
      double ropl_107 = scratch[63][tid];
      output_0 -= ropl_107;
      double ropl_126 = scratch[79][tid];
      output_0 -= ropl_126;
      double ropl_151 = scratch[95][tid];
      output_0 += ropl_151;
      output_1 += ropl_13;
      double ropl_61 = scratch[41][tid];
      output_1 += ropl_61;
      output_1 += ropl_14;
      double ropl_41 = scratch[34][tid];
      output_1 += ropl_41;
      double ropl_15 = scratch[3][tid];
      output_1 -= ropl_15;
      double ropl_103 = scratch[59][tid];
      output_1 -= ropl_103;
      double ropl_19 = scratch[4][tid];
      output_1 -= ropl_19;
      double ropl_20 = scratch[5][tid];
      output_1 -= ropl_20;
      double ropl_135 = scratch[87][tid];
      output_1 += ropl_135;
    }
    else if (wid == 3)
    {
      double ropl_39 = scratch[32][tid];
      output_0 -= ropl_39;
      double ropl_58 = scratch[40][tid];
      output_0 += ropl_58;
      double ropl_59 = scratch[9][tid];
      output_0 += ropl_59;
      double ropl_40 = scratch[33][tid];
      output_0 -= ropl_40;
      double ropl_61 = scratch[41][tid];
      output_0 += ropl_61;
      double ropl_128 = scratch[81][tid];
      output_0 += ropl_128;
      double ropl_137 = scratch[89][tid];
      output_0 += ropl_137;
      double ropl_60 = scratch[10][tid];
      output_0 += ropl_60;
      double ropl_41 = scratch[34][tid];
      output_0 -= ropl_41;
      double ropl_62 = scratch[42][tid];
      output_0 = __fma_rn(2.0, ropl_62, output_0);
      double ropl_113 = scratch[66][tid];
      output_0 += ropl_113;
      double ropl_138 = scratch[90][tid];
      output_0 += ropl_138;
      double ropl_67 = scratch[11][tid];
      output_0 += ropl_67;
      double ropl_42 = scratch[35][tid];
      output_0 -= ropl_42;
      double ropl_139 = scratch[91][tid];
      output_0 -= ropl_139;
      double ropl_68 = scratch[12][tid];
      output_0 += ropl_68;
      double ropl_34 = scratch[28][tid];
      output_0 += ropl_34;
      double ropl_54 = scratch[36][tid];
      output_0 += ropl_54;
      double ropl_35 = scratch[29][tid];
      output_0 -= ropl_35;
      double ropl_55 = scratch[37][tid];
      output_0 += ropl_55;
      double ropl_116 = scratch[69][tid];
      output_0 += ropl_116;
      double ropl_124 = scratch[77][tid];
      output_0 += ropl_124;
      double ropl_37 = scratch[30][tid];
      output_0 -= ropl_37;
      double ropl_106 = scratch[62][tid];
      output_0 += ropl_106;
      double ropl_38 = scratch[31][tid];
      output_0 -= ropl_38;
      double ropl_57 = scratch[39][tid];
      output_0 += ropl_57;
      double ropl_48 = scratch[8][tid];
      output_1 += ropl_48;
      double ropl_33 = scratch[27][tid];
      output_1 += ropl_33;
      output_1 += ropl_42;
      double ropl_72 = scratch[43][tid];
      output_1 -= ropl_72;
      double ropl_73 = scratch[44][tid];
      output_1 -= ropl_73;
      double ropl_104 = scratch[60][tid];
      output_1 += ropl_104;
      double ropl_97 = scratch[53][tid];
      output_1 += ropl_97;
      double ropl_133 = scratch[85][tid];
      output_1 += ropl_133;
      double ropl_141 = scratch[93][tid];
      output_2 += ropl_141;
    }
    else if (wid == 4)
    {
      double ropl_8 = scratch[0][tid];
      output_0 += ropl_8;
      double ropl_136 = scratch[88][tid];
      output_0 += ropl_136;
      double ropl_13 = scratch[1][tid];
      output_0 = __fma_rn(-2.0, ropl_13, output_0);
      double ropl_59 = scratch[9][tid];
      output_0 += ropl_59;
      double ropl_31 = scratch[25][tid];
      output_0 -= ropl_31;
      double ropl_40 = scratch[33][tid];
      output_0 += ropl_40;
      double ropl_61 = scratch[41][tid];
      output_0 -= ropl_61;
      double ropl_101 = scratch[57][tid];
      output_0 += ropl_101;
      double ropl_14 = scratch[2][tid];
      output_0 = __fma_rn(-2.0, ropl_14, output_0);
      double ropl_60 = scratch[10][tid];
      output_0 += ropl_60;
      double ropl_41 = scratch[34][tid];
      output_0 -= ropl_41;
      double ropl_67 = scratch[11][tid];
      output_0 += ropl_67;
      double ropl_103 = scratch[59][tid];
      output_0 += ropl_103;
      double ropl_19 = scratch[4][tid];
      output_0 += ropl_19;
      double ropl_68 = scratch[12][tid];
      output_0 += ropl_68;
      double ropl_26 = scratch[20][tid];
      output_0 += ropl_26;
      double ropl_140 = scratch[92][tid];
      output_0 -= ropl_140;
      double ropl_20 = scratch[5][tid];
      output_0 += ropl_20;
      double ropl_116 = scratch[69][tid];
      output_0 -= ropl_116;
      double ropl_107 = scratch[63][tid];
      output_0 += ropl_107;
      double ropl_135 = scratch[87][tid];
      output_0 -= ropl_135;
      double ropl_94 = scratch[16][tid];
      output_1 += ropl_94;
      double ropl_77 = scratch[48][tid];
      output_1 += ropl_77;
      double ropl_100 = scratch[56][tid];
      output_1 -= ropl_100;
      output_1 -= ropl_101;
      double ropl_95 = scratch[51][tid];
      output_1 -= ropl_95;
      output_1 += ropl_103;
      double ropl_96 = scratch[52][tid];
      output_1 -= ropl_96;
      double ropl_97 = scratch[53][tid];
      output_1 -= ropl_97;
      double ropl_105 = scratch[61][tid];
      output_1 += ropl_105;
      double ropl_92 = scratch[14][tid];
      output_1 -= ropl_92;
      double ropl_98 = scratch[54][tid];
      output_1 -= ropl_98;
      double ropl_93 = scratch[15][tid];
      output_1 -= ropl_93;
      double ropl_76 = scratch[47][tid];
      output_1 += ropl_76;
      output_2 -= ropl_136;
      double ropl_138 = scratch[90][tid];
      output_2 += ropl_138;
      double ropl_131 = scratch[83][tid];
      output_2 -= ropl_131;
      double ropl_139 = scratch[91][tid];
      output_2 += ropl_139;
      double ropl_132 = scratch[84][tid];
      output_2 -= ropl_132;
      double ropl_133 = scratch[85][tid];
      output_2 -= ropl_133;
      double ropl_134 = scratch[86][tid];
      output_2 -= ropl_134;
      output_2 -= ropl_135;
    }
    else if (wid == 5)
    {
      double ropl_48 = scratch[8][tid];
      output_0 -= ropl_48;
      double ropl_77 = scratch[48][tid];
      output_0 -= ropl_77;
      double ropl_137 = scratch[89][tid];
      output_0 += ropl_137;
      double ropl_111 = scratch[18][tid];
      output_0 += ropl_111;
      double ropl_129 = scratch[82][tid];
      output_0 += ropl_129;
      double ropl_33 = scratch[27][tid];
      output_0 -= ropl_33;
      double ropl_42 = scratch[35][tid];
      output_0 -= ropl_42;
      double ropl_72 = scratch[43][tid];
      output_0 = __fma_rn(2.0, ropl_72, output_0);
      double ropl_114 = scratch[67][tid];
      output_0 += ropl_114;
      double ropl_73 = scratch[44][tid];
      output_0 = __fma_rn(2.0, ropl_73, output_0);
      double ropl_104 = scratch[60][tid];
      output_0 -= ropl_104;
      double ropl_74 = scratch[45][tid];
      output_0 -= ropl_74;
      double ropl_97 = scratch[53][tid];
      output_0 -= ropl_97;
      double ropl_133 = scratch[85][tid];
      output_0 -= ropl_133;
      double ropl_56 = scratch[38][tid];
      output_0 += ropl_56;
      double ropl_75 = scratch[46][tid];
      output_0 -= ropl_75;
      double ropl_98 = scratch[54][tid];
      output_0 += ropl_98;
      double ropl_125 = scratch[78][tid];
      output_0 += ropl_125;
      double ropl_47 = scratch[7][tid];
      output_0 = __fma_rn(-2.0, ropl_47, output_0);
      double ropl_76 = scratch[47][tid];
      output_0 -= ropl_76;
      double ropl_90 = scratch[50][tid];
      output_1 -= ropl_90;
      double ropl_85 = scratch[13][tid];
      output_1 -= ropl_85;
      double ropl_93 = scratch[15][tid];
      output_1 += ropl_93;
      output_2 += ropl_90;
      output_2 += ropl_85;
      output_2 += ropl_47;
    }
    else if (wid == 6)
    {
      double ropl_8 = scratch[0][tid];
      output_0 -= ropl_8;
      double ropl_48 = scratch[8][tid];
      output_0 -= ropl_48;
      double ropl_94 = scratch[16][tid];
      output_0 -= ropl_94;
      double ropl_30 = scratch[24][tid];
      output_0 += ropl_30;
      double ropl_77 = scratch[48][tid];
      output_0 += ropl_77;
      double ropl_108 = scratch[17][tid];
      output_0 -= ropl_108;
      double ropl_31 = scratch[25][tid];
      output_0 += ropl_31;
      double ropl_78 = scratch[49][tid];
      output_0 -= ropl_78;
      double ropl_112 = scratch[65][tid];
      output_0 += ropl_112;
      double ropl_111 = scratch[18][tid];
      output_0 -= ropl_111;
      double ropl_102 = scratch[58][tid];
      output_0 -= ropl_102;
      double ropl_113 = scratch[66][tid];
      output_0 += ropl_113;
      double ropl_25 = scratch[19][tid];
      output_0 += ropl_25;
      double ropl_95 = scratch[51][tid];
      output_0 -= ropl_95;
      double ropl_114 = scratch[67][tid];
      output_0 += ropl_114;
      double ropl_54 = scratch[36][tid];
      output_0 += ropl_54;
      double ropl_123 = scratch[76][tid];
      output_0 += ropl_123;
      double ropl_132 = scratch[84][tid];
      output_0 -= ropl_132;
      double ropl_85 = scratch[13][tid];
      output_0 -= ropl_85;
      double ropl_27 = scratch[21][tid];
      output_0 -= ropl_27;
      double ropl_35 = scratch[29][tid];
      output_0 += ropl_35;
      double ropl_55 = scratch[37][tid];
      output_0 -= ropl_55;
      double ropl_124 = scratch[77][tid];
      output_0 += ropl_124;
      double ropl_141 = scratch[93][tid];
      output_0 += ropl_141;
      double ropl_37 = scratch[30][tid];
      output_0 -= ropl_37;
      double ropl_56 = scratch[38][tid];
      output_0 -= ropl_56;
      double ropl_125 = scratch[78][tid];
      output_0 += ropl_125;
      double ropl_93 = scratch[15][tid];
      output_0 -= ropl_93;
      double ropl_76 = scratch[47][tid];
      output_0 += ropl_76;
      double ropl_126 = scratch[79][tid];
      output_0 += ropl_126;
      output_1 -= ropl_78;
      double ropl_138 = scratch[90][tid];
      output_1 -= ropl_138;
      double ropl_67 = scratch[11][tid];
      output_1 -= ropl_67;
      double ropl_68 = scratch[12][tid];
      output_1 -= ropl_68;
      double ropl_109 = scratch[64][tid];
      output_2 -= ropl_109;
      output_2 -= ropl_108;
      output_2 += ropl_102;
      double ropl_104 = scratch[60][tid];
      output_2 += ropl_104;
      double ropl_105 = scratch[61][tid];
      output_2 += ropl_105;
      double ropl_92 = scratch[14][tid];
      output_2 += ropl_92;
      double ropl_117 = scratch[70][tid];
      output_2 += ropl_117;
      double ropl_99 = scratch[55][tid];
      output_2 += ropl_99;
      double ropl_107 = scratch[63][tid];
      output_2 += ropl_107;
    }
    else if (wid == 7)
    {
      double ropl_39 = scratch[32][tid];
      output_0 -= ropl_39;
      double ropl_58 = scratch[40][tid];
      output_0 -= ropl_58;
      double ropl_100 = scratch[56][tid];
      output_0 += ropl_100;
      double ropl_31 = scratch[25][tid];
      output_0 += ropl_31;
      double ropl_113 = scratch[66][tid];
      output_0 -= ropl_113;
      double ropl_15 = scratch[3][tid];
      output_0 = __fma_rn(2.0, ropl_15, output_0);
      double ropl_131 = scratch[83][tid];
      output_0 -= ropl_131;
      double ropl_19 = scratch[4][tid];
      output_0 -= ropl_19;
      double ropl_96 = scratch[52][tid];
      output_0 -= ropl_96;
      double ropl_115 = scratch[68][tid];
      output_0 += ropl_115;
      double ropl_140 = scratch[92][tid];
      output_0 += ropl_140;
      double ropl_20 = scratch[5][tid];
      output_0 -= ropl_20;
      double ropl_74 = scratch[45][tid];
      output_0 -= ropl_74;
      double ropl_116 = scratch[69][tid];
      output_0 += ropl_116;
      double ropl_124 = scratch[77][tid];
      output_0 -= ropl_124;
      double ropl_28 = scratch[22][tid];
      output_0 += ropl_28;
      double ropl_56 = scratch[38][tid];
      output_0 += ropl_56;
      double ropl_75 = scratch[46][tid];
      output_0 -= ropl_75;
      double ropl_134 = scratch[86][tid];
      output_0 += ropl_134;
      double ropl_29 = scratch[23][tid];
      output_0 -= ropl_29;
      double ropl_38 = scratch[31][tid];
      output_0 += ropl_38;
      double ropl_57 = scratch[39][tid];
      output_0 += ropl_57;
      double ropl_99 = scratch[55][tid];
      output_0 -= ropl_99;
      double ropl_126 = scratch[79][tid];
      output_0 += ropl_126;
      double ropl_30 = scratch[24][tid];
      output_1 += ropl_30;
      output_1 += ropl_31;
      double ropl_128 = scratch[81][tid];
      output_1 -= ropl_128;
      double ropl_21 = scratch[6][tid];
      output_1 += ropl_21;
    }
    asm volatile("bar.sync 0, 256;" : : : "memory");
    {
      double ropl_12 = rr_f_12 - rr_r_12;
      scratch[wid+0][tid] = ropl_12;
    }
    {
      double ropl_13 = rr_f_13 - rr_r_13;
      scratch[wid+8][tid] = ropl_13;
    }
    {
      double ropl_14 = rr_f_14 - rr_r_14;
      scratch[wid+16][tid] = ropl_14;
    }
    {
      double ropl_15 = rr_f_15 - rr_r_15;
      scratch[wid+24][tid] = ropl_15;
    }
    {
      double ropl_16 = rr_f_16 - rr_r_16;
      scratch[wid+32][tid] = ropl_16;
    }
    {
      double ropl_17 = rr_f_17 - rr_r_17;
      scratch[wid+40][tid] = ropl_17;
    }
    {
      double ropl_18 = rr_f_18 - rr_r_18;
      scratch[wid+48][tid] = ropl_18;
    }
    {
      double ropl_19 = rr_f_19 - rr_r_19;
      scratch[wid+56][tid] = ropl_19;
    }
    {
      double ropl_20 = rr_f_20 - rr_r_20;
      scratch[wid+64][tid] = ropl_20;
    }
    {
      double ropl_21 = rr_f_21 - rr_r_21;
      scratch[wid+72][tid] = ropl_21;
    }
    asm volatile("bar.sync 0, 256;" : : : "memory");
    if (wid == 0)
    {
      double ropl_110 = scratch[56][tid];
      output_0 += ropl_110;
      double ropl_148 = scratch[64][tid];
      output_0 += ropl_148;
      double ropl_22 = scratch[25][tid];
      output_0 -= ropl_22;
      double ropl_169 = scratch[73][tid];
      output_0 += ropl_169;
      double ropl_23 = scratch[26][tid];
      output_0 -= ropl_23;
      double ropl_24 = scratch[27][tid];
      output_0 -= ropl_24;
      double ropl_70 = scratch[43][tid];
      output_0 -= ropl_70;
      double ropl_171 = scratch[75][tid];
      output_0 += ropl_171;
      double ropl_36 = scratch[28][tid];
      output_0 += ropl_36;
      double ropl_172 = scratch[76][tid];
      output_0 += ropl_172;
      double ropl_161 = scratch[5][tid];
      output_0 += ropl_161;
      double ropl_173 = scratch[77][tid];
      output_0 += ropl_173;
      double ropl_165 = scratch[70][tid];
      output_0 += ropl_165;
      double ropl_174 = scratch[78][tid];
      output_0 += ropl_174;
      double ropl_49 = scratch[33][tid];
      output_1 += ropl_49;
      double ropl_9 = scratch[18][tid];
      output_1 += ropl_9;
      double ropl_170 = scratch[74][tid];
      output_1 += ropl_170;
      double ropl_1 = scratch[11][tid];
      output_1 -= ropl_1;
      double ropl_86 = scratch[51][tid];
      output_1 += ropl_86;
      output_1 += ropl_171;
      double ropl_2 = scratch[12][tid];
      output_1 -= ropl_2;
      output_1 += ropl_36;
      double ropl_79 = scratch[45][tid];
      output_1 += ropl_79;
      double ropl_4 = scratch[14][tid];
      output_1 -= ropl_4;
      double ropl_146 = scratch[62][tid];
      output_1 += ropl_146;
      double ropl_17 = scratch[23][tid];
      output_1 += ropl_17;
      double ropl_166 = scratch[71][tid];
      output_1 += ropl_166;
      output_2 -= ropl_161;
      double ropl_160 = scratch[69][tid];
      output_2 += ropl_160;
      double ropl_162 = scratch[6][tid];
      output_2 -= ropl_162;
      double ropl_91 = scratch[55][tid];
      output_3 += ropl_91;
    }
    else if (wid == 1)
    {
      double ropl_6 = scratch[16][tid];
      output_0 -= ropl_6;
      double ropl_18 = scratch[24][tid];
      output_0 -= ropl_18;
      double ropl_65 = scratch[40][tid];
      output_0 -= ropl_65;
      double ropl_22 = scratch[25][tid];
      output_0 += ropl_22;
      double ropl_0 = scratch[10][tid];
      output_0 += ropl_0;
      double ropl_50 = scratch[34][tid];
      output_0 -= ropl_50;
      double ropl_1 = scratch[11][tid];
      output_0 -= ropl_1;
      double ropl_11 = scratch[20][tid];
      output_0 -= ropl_11;
      double ropl_87 = scratch[52][tid];
      output_0 -= ropl_87;
      double ropl_3 = scratch[13][tid];
      output_0 -= ropl_3;
      double ropl_43 = scratch[29][tid];
      output_0 -= ropl_43;
      double ropl_145 = scratch[61][tid];
      output_0 -= ropl_145;
      double ropl_44 = scratch[30][tid];
      output_0 += ropl_44;
      double ropl_80 = scratch[46][tid];
      output_0 -= ropl_80;
      double ropl_174 = scratch[78][tid];
      output_0 -= ropl_174;
      double ropl_5 = scratch[15][tid];
      output_0 = __fma_rn(-2.0, ropl_5, output_0);
      double ropl_91 = scratch[55][tid];
      output_0 -= ropl_91;
      double ropl_168 = scratch[72][tid];
      output_1 += ropl_168;
      double ropl_7 = scratch[17][tid];
      output_1 += ropl_7;
      double ropl_66 = scratch[41][tid];
      output_1 += ropl_66;
      double ropl_169 = scratch[73][tid];
      output_1 += ropl_169;
      double ropl_51 = scratch[35][tid];
      output_1 += ropl_51;
      double ropl_143 = scratch[59][tid];
      output_1 += ropl_143;
      double ropl_2 = scratch[12][tid];
      output_1 += ropl_2;
      output_1 -= ropl_3;
      double ropl_12 = scratch[21][tid];
      output_1 += ropl_12;
      double ropl_16 = scratch[22][tid];
      output_1 += ropl_16;
      double ropl_165 = scratch[70][tid];
      output_1 += ropl_165;
      double ropl_81 = scratch[47][tid];
      output_1 += ropl_81;
      double ropl_155 = scratch[2][tid];
      output_2 -= ropl_155;
      double ropl_152 = scratch[66][tid];
      output_2 = __fma_rn(-2.0, ropl_152, output_2);
      double ropl_159 = scratch[68][tid];
      output_3 += ropl_159;
      double ropl_160 = scratch[69][tid];
      output_3 -= ropl_160;
    }
    else if (wid == 2)
    {
      double ropl_82 = scratch[48][tid];
      output_0 -= ropl_82;
      double ropl_154 = scratch[1][tid];
      output_0 -= ropl_154;
      double ropl_22 = scratch[25][tid];
      output_0 -= ropl_22;
      double ropl_0 = scratch[10][tid];
      output_0 -= ropl_0;
      double ropl_9 = scratch[18][tid];
      output_0 += ropl_9;
      double ropl_142 = scratch[58][tid];
      output_0 -= ropl_142;
      double ropl_152 = scratch[66][tid];
      output_0 += ropl_152;
      double ropl_157 = scratch[4][tid];
      output_0 -= ropl_157;
      double ropl_11 = scratch[20][tid];
      output_0 += ropl_11;
      double ropl_52 = scratch[36][tid];
      output_0 += ropl_52;
      double ropl_12 = scratch[21][tid];
      output_0 += ropl_12;
      double ropl_88 = scratch[53][tid];
      output_0 -= ropl_88;
      double ropl_44 = scratch[30][tid];
      output_0 -= ropl_44;
      double ropl_5 = scratch[15][tid];
      output_0 += ropl_5;
      double ropl_45 = scratch[31][tid];
      output_0 -= ropl_45;
      double ropl_18 = scratch[24][tid];
      output_1 -= ropl_18;
      double ropl_83 = scratch[49][tid];
      output_1 += ropl_83;
      double ropl_69 = scratch[42][tid];
      output_1 += ropl_69;
      double ropl_144 = scratch[60][tid];
      output_1 += ropl_144;
      double ropl_53 = scratch[37][tid];
      output_1 += ropl_53;
      double ropl_173 = scratch[77][tid];
      output_1 += ropl_173;
      double ropl_16 = scratch[22][tid];
      output_1 -= ropl_16;
      double ropl_17 = scratch[23][tid];
      output_1 -= ropl_17;
      double ropl_148 = scratch[64][tid];
      output_2 -= ropl_148;
      double ropl_149 = scratch[65][tid];
      output_2 -= ropl_149;
      output_2 += ropl_142;
      double ropl_143 = scratch[59][tid];
      output_2 += ropl_143;
      output_2 += ropl_144;
      double ropl_145 = scratch[61][tid];
      output_2 += ropl_145;
      double ropl_146 = scratch[62][tid];
      output_2 += ropl_146;
      double ropl_147 = scratch[63][tid];
      output_2 += ropl_147;
      double ropl_158 = scratch[67][tid];
      output_3 += ropl_158;
      double ropl_159 = scratch[68][tid];
      output_3 -= ropl_159;
    }
    else if (wid == 3)
    {
      double ropl_153 = scratch[0][tid];
      output_0 += ropl_153;
      double ropl_164 = scratch[8][tid];
      output_0 -= ropl_164;
      double ropl_65 = scratch[40][tid];
      output_0 += ropl_65;
      double ropl_66 = scratch[41][tid];
      output_0 += ropl_66;
      double ropl_69 = scratch[42][tid];
      output_0 += ropl_69;
      double ropl_156 = scratch[3][tid];
      output_0 = __fma_rn(2.0, ropl_156, output_0);
      double ropl_36 = scratch[28][tid];
      output_0 -= ropl_36;
      double ropl_87 = scratch[52][tid];
      output_0 += ropl_87;
      double ropl_43 = scratch[29][tid];
      output_0 += ropl_43;
      double ropl_63 = scratch[38][tid];
      output_0 += ropl_63;
      double ropl_45 = scratch[31][tid];
      output_0 += ropl_45;
      double ropl_49 = scratch[33][tid];
      output_1 -= ropl_49;
      double ropl_50 = scratch[34][tid];
      output_1 -= ropl_50;
      double ropl_84 = scratch[50][tid];
      output_1 += ropl_84;
      double ropl_51 = scratch[35][tid];
      output_1 -= ropl_51;
      double ropl_52 = scratch[36][tid];
      output_1 += ropl_52;
      double ropl_172 = scratch[76][tid];
      output_1 += ropl_172;
      double ropl_53 = scratch[37][tid];
      output_1 -= ropl_53;
      double ropl_147 = scratch[63][tid];
      output_1 += ropl_147;
      double ropl_154 = scratch[1][tid];
      output_2 += ropl_154;
      double ropl_142 = scratch[58][tid];
      output_2 -= ropl_142;
      double ropl_152 = scratch[66][tid];
      output_2 += ropl_152;
      double ropl_143 = scratch[59][tid];
      output_2 -= ropl_143;
      double ropl_144 = scratch[60][tid];
      output_2 -= ropl_144;
      double ropl_145 = scratch[61][tid];
      output_2 -= ropl_145;
      double ropl_146 = scratch[62][tid];
      output_2 -= ropl_146;
      output_2 -= ropl_147;
      double ropl_158 = scratch[67][tid];
      output_3 -= ropl_158;
      double ropl_157 = scratch[4][tid];
      output_3 += ropl_157;
    }
    else if (wid == 4)
    {
      double ropl_18 = scratch[24][tid];
      output_0 += ropl_18;
      double ropl_46 = scratch[32][tid];
      output_0 -= ropl_46;
      double ropl_82 = scratch[48][tid];
      output_0 += ropl_82;
      double ropl_154 = scratch[1][tid];
      output_0 += ropl_154;
      double ropl_83 = scratch[49][tid];
      output_0 -= ropl_83;
      double ropl_9 = scratch[18][tid];
      output_0 -= ropl_9;
      double ropl_23 = scratch[26][tid];
      output_0 -= ropl_23;
      double ropl_69 = scratch[42][tid];
      output_0 -= ropl_69;
      double ropl_142 = scratch[58][tid];
      output_0 += ropl_142;
      double ropl_10 = scratch[19][tid];
      output_0 -= ropl_10;
      double ropl_11 = scratch[20][tid];
      output_0 -= ropl_11;
      double ropl_52 = scratch[36][tid];
      output_0 -= ropl_52;
      double ropl_144 = scratch[60][tid];
      output_0 -= ropl_144;
      double ropl_12 = scratch[21][tid];
      output_0 -= ropl_12;
      double ropl_53 = scratch[37][tid];
      output_0 -= ropl_53;
      double ropl_88 = scratch[53][tid];
      output_0 += ropl_88;
      double ropl_173 = scratch[77][tid];
      output_0 -= ropl_173;
      double ropl_17 = scratch[23][tid];
      output_0 += ropl_17;
      double ropl_86 = scratch[51][tid];
      output_1 += ropl_86;
      output_1 += ropl_88;
      double ropl_89 = scratch[54][tid];
      output_1 += ropl_89;
      double ropl_130 = scratch[57][tid];
      output_2 -= ropl_130;
      double ropl_152 = scratch[66][tid];
      output_3 += ropl_152;
    }
    else if (wid == 5)
    {
      double ropl_46 = scratch[32][tid];
      output_0 -= ropl_46;
      double ropl_110 = scratch[56][tid];
      output_0 += ropl_110;
      double ropl_49 = scratch[33][tid];
      output_0 += ropl_49;
      double ropl_130 = scratch[57][tid];
      output_0 += ropl_130;
      double ropl_149 = scratch[65][tid];
      output_0 += ropl_149;
      double ropl_50 = scratch[34][tid];
      output_0 += ropl_50;
      double ropl_84 = scratch[50][tid];
      output_0 -= ropl_84;
      double ropl_51 = scratch[35][tid];
      output_0 += ropl_51;
      double ropl_70 = scratch[43][tid];
      output_0 += ropl_70;
      double ropl_52 = scratch[36][tid];
      output_0 -= ropl_52;
      double ropl_71 = scratch[44][tid];
      output_0 = __fma_rn(-2.0, ropl_71, output_0);
      double ropl_87 = scratch[52][tid];
      output_0 += ropl_87;
      double ropl_172 = scratch[76][tid];
      output_0 -= ropl_172;
      double ropl_43 = scratch[29][tid];
      output_0 -= ropl_43;
      double ropl_53 = scratch[37][tid];
      output_0 += ropl_53;
      double ropl_44 = scratch[30][tid];
      output_0 -= ropl_44;
      double ropl_45 = scratch[31][tid];
      output_0 -= ropl_45;
      double ropl_64 = scratch[39][tid];
      output_0 += ropl_64;
      double ropl_147 = scratch[63][tid];
      output_0 -= ropl_147;
      double ropl_82 = scratch[48][tid];
      output_1 += ropl_82;
      double ropl_83 = scratch[49][tid];
      output_1 += ropl_83;
      output_1 += ropl_84;
      double ropl_86 = scratch[51][tid];
      output_1 -= ropl_86;
      output_1 += ropl_71;
      output_1 -= ropl_87;
      double ropl_79 = scratch[45][tid];
      output_1 += ropl_79;
      double ropl_88 = scratch[53][tid];
      output_1 -= ropl_88;
      double ropl_80 = scratch[46][tid];
      output_1 += ropl_80;
      double ropl_89 = scratch[54][tid];
      output_1 = __fma_rn(-2.0, ropl_89, output_1);
      double ropl_81 = scratch[47][tid];
      output_1 += ropl_81;
      double ropl_91 = scratch[55][tid];
      output_1 -= ropl_91;
      output_2 -= ropl_82;
      output_2 -= ropl_83;
      output_2 -= ropl_84;
      output_2 -= ropl_79;
      output_2 -= ropl_80;
      output_2 += ropl_89;
      output_2 -= ropl_81;
    }
    else if (wid == 6)
    {
      double ropl_6 = scratch[16][tid];
      output_0 -= ropl_6;
      double ropl_168 = scratch[72][tid];
      output_0 += ropl_168;
      double ropl_7 = scratch[17][tid];
      output_0 -= ropl_7;
      double ropl_49 = scratch[33][tid];
      output_0 -= ropl_49;
      double ropl_0 = scratch[10][tid];
      output_0 -= ropl_0;
      double ropl_9 = scratch[18][tid];
      output_0 -= ropl_9;
      double ropl_1 = scratch[11][tid];
      output_0 += ropl_1;
      double ropl_10 = scratch[19][tid];
      output_0 -= ropl_10;
      double ropl_24 = scratch[27][tid];
      output_0 += ropl_24;
      double ropl_86 = scratch[51][tid];
      output_0 -= ropl_86;
      double ropl_171 = scratch[75][tid];
      output_0 -= ropl_171;
      double ropl_2 = scratch[12][tid];
      output_0 += ropl_2;
      double ropl_71 = scratch[44][tid];
      output_0 += ropl_71;
      double ropl_43 = scratch[29][tid];
      output_0 += ropl_43;
      double ropl_79 = scratch[45][tid];
      output_0 -= ropl_79;
      double ropl_4 = scratch[14][tid];
      output_0 = __fma_rn(2.0, ropl_4, output_0);
      double ropl_16 = scratch[22][tid];
      output_0 -= ropl_16;
      double ropl_63 = scratch[38][tid];
      output_0 += ropl_63;
      double ropl_146 = scratch[62][tid];
      output_0 -= ropl_146;
      double ropl_163 = scratch[7][tid];
      output_0 += ropl_163;
      double ropl_17 = scratch[23][tid];
      output_0 -= ropl_17;
      double ropl_64 = scratch[39][tid];
      output_0 -= ropl_64;
      double ropl_91 = scratch[55][tid];
      output_0 += ropl_91;
      double ropl_153 = scratch[0][tid];
      output_1 += ropl_153;
      double ropl_46 = scratch[32][tid];
      output_1 += ropl_46;
      double ropl_65 = scratch[40][tid];
      output_1 -= ropl_65;
      double ropl_148 = scratch[64][tid];
      output_1 += ropl_148;
      double ropl_66 = scratch[41][tid];
      output_1 -= ropl_66;
      double ropl_130 = scratch[57][tid];
      output_1 += ropl_130;
      double ropl_69 = scratch[42][tid];
      output_1 -= ropl_69;
      double ropl_70 = scratch[43][tid];
      output_1 -= ropl_70;
      double ropl_44 = scratch[30][tid];
      output_1 += ropl_44;
      output_1 -= ropl_63;
      output_1 -= ropl_64;
      double ropl_110 = scratch[56][tid];
      output_2 -= ropl_110;
    }
    else if (wid == 7)
    {
      double ropl_164 = scratch[8][tid];
      output_0 -= ropl_164;
      double ropl_6 = scratch[16][tid];
      output_0 += ropl_6;
      double ropl_18 = scratch[24][tid];
      output_0 += ropl_18;
      double ropl_46 = scratch[32][tid];
      output_0 += ropl_46;
      double ropl_65 = scratch[40][tid];
      output_0 += ropl_65;
      double ropl_110 = scratch[56][tid];
      output_0 -= ropl_110;
      double ropl_168 = scratch[72][tid];
      output_0 -= ropl_168;
      double ropl_167 = scratch[9][tid];
      output_0 += ropl_167;
      double ropl_7 = scratch[17][tid];
      output_0 -= ropl_7;
      double ropl_66 = scratch[41][tid];
      output_0 -= ropl_66;
      double ropl_0 = scratch[10][tid];
      output_0 += ropl_0;
      double ropl_23 = scratch[26][tid];
      output_0 += ropl_23;
      double ropl_50 = scratch[34][tid];
      output_0 += ropl_50;
      double ropl_156 = scratch[3][tid];
      output_0 += ropl_156;
      double ropl_1 = scratch[11][tid];
      output_0 += ropl_1;
      double ropl_10 = scratch[19][tid];
      output_0 = __fma_rn(2.0, ropl_10, output_0);
      double ropl_24 = scratch[27][tid];
      output_0 -= ropl_24;
      double ropl_51 = scratch[35][tid];
      output_0 -= ropl_51;
      double ropl_143 = scratch[59][tid];
      output_0 -= ropl_143;
      double ropl_158 = scratch[67][tid];
      output_0 += ropl_158;
      double ropl_171 = scratch[75][tid];
      output_0 += ropl_171;
      double ropl_2 = scratch[12][tid];
      output_0 -= ropl_2;
      double ropl_11 = scratch[20][tid];
      output_0 += ropl_11;
      double ropl_159 = scratch[68][tid];
      output_0 += ropl_159;
      double ropl_172 = scratch[76][tid];
      output_0 += ropl_172;
      double ropl_3 = scratch[13][tid];
      output_0 = __fma_rn(2.0, ropl_3, output_0);
      double ropl_12 = scratch[21][tid];
      output_0 -= ropl_12;
      double ropl_145 = scratch[61][tid];
      output_0 += ropl_145;
      double ropl_173 = scratch[77][tid];
      output_0 += ropl_173;
      double ropl_16 = scratch[22][tid];
      output_0 += ropl_16;
      double ropl_80 = scratch[46][tid];
      output_0 += ropl_80;
      double ropl_174 = scratch[78][tid];
      output_0 = __fma_rn(2.0, ropl_174, output_0);
      double ropl_45 = scratch[31][tid];
      output_0 += ropl_45;
      double ropl_64 = scratch[39][tid];
      output_0 += ropl_64;
      double ropl_81 = scratch[47][tid];
      output_0 -= ropl_81;
      output_1 += ropl_168;
      double ropl_22 = scratch[25][tid];
      output_1 += ropl_22;
      double ropl_149 = scratch[65][tid];
      output_1 += ropl_149;
      output_1 += ropl_23;
      double ropl_170 = scratch[74][tid];
      output_1 += ropl_170;
      output_1 += ropl_24;
      double ropl_70 = scratch[43][tid];
      output_1 += ropl_70;
      double ropl_162 = scratch[6][tid];
      output_1 += ropl_162;
      double ropl_166 = scratch[71][tid];
      output_1 += ropl_166;
      output_2 -= ropl_168;
      output_2 -= ropl_167;
      double ropl_169 = scratch[73][tid];
      output_2 -= ropl_169;
      output_2 -= ropl_170;
      output_2 -= ropl_171;
      output_2 -= ropl_172;
      output_2 -= ropl_173;
      double ropl_165 = scratch[70][tid];
      output_2 -= ropl_165;
      output_2 -= ropl_174;
      double ropl_163 = scratch[7][tid];
      output_2 += ropl_163;
      output_2 -= ropl_166;
    }
    {
      int index = __shfl(index_constants[0], 3, 32);
      {
        output_0 *= (1e-3 * molecular_masses[index]);
        asm volatile("st.global.cs.f64 [%0],  %1;" : : 
          "l"(wdot_array+index*spec_stride) ,  "d"(output_0) : "memory"); 
      }
    }
    {
      int index = __shfl(index_constants[0], 4, 32);
      {
        output_1 *= (1e-3 * molecular_masses[index]);
        asm volatile("st.global.cs.f64 [%0],  %1;" : : 
          "l"(wdot_array+index*spec_stride) ,  "d"(output_1) : "memory"); 
      }
    }
    {
      int index = __shfl(index_constants[0], 5, 32);
      {
        output_2 *= (1e-3 * molecular_masses[index]);
        asm volatile("st.global.cs.f64 [%0],  %1;" : : 
          "l"(wdot_array+index*spec_stride) ,  "d"(output_2) : "memory"); 
      }
    }
    {
      int index = __shfl(index_constants[0], 6, 32);
      if (((threadIdx.x >> 5)+24) < 30)
      {
        output_3 *= (1e-3 * molecular_masses[index]);
        asm volatile("st.global.cs.f64 [%0],  %1;" : : 
          "l"(wdot_array+index*spec_stride) ,  "d"(output_3) : "memory"); 
      }
    }
    {
      temperature_array += slice_stride;
      pressure_array += slice_stride;
      avmolwt_array += slice_stride;
      mass_frac_array += slice_stride;
      diffusion_array += slice_stride;
      wdot_array += slice_stride;
    }
  }
}

