/*
 * Copyright 2015 Stanford University and NVIDIA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Fermi tuned diffusion kernel for DME.
 * Gets 2 CTAs with 10 warps per CTA.  
 * Should compile to 50 registers with 184 bytes spilled.
 * Either L2 latency or SM latency limited due to low occupancy.
 *
 * Launch with:
 *  dim3 grid((nx*ny)/32,1,1);
 *  dim3 block(10*32,1,1);
 *
 * gpu_diffusion<<<grid,block>>>(temperature_ptr, pressure_ptr, 
 *                 mole_frac_input_ptr, nx*ny, nx, nz, nx*ny*nz, output_d);
 *
 * Performance numbers on C2070 with 14 SMs:
 * 
 * 32x32x32
 *   Latency: 2.907 ms
 *   Throughput: 11.273 Mpoints/s
 *   Perf: 209.8 GFLOPS
 *
 * 64x64x64
 *   Latency: 22.951 ms
 *   Throughput: 11.422 Mpoints/s
 *   Perf: 212.6 GFLOPS
 *
 * 128x128x128
 *   Latency: 183.428 ms
 *   Throughput: 11.433 Mpoints/s
 *   Perf: 212.8 GFLOPS
 *
 * Generation command:
 *  ./singe --dir inputs/DME/ --cuda --diff 10
 *
 */

#ifndef TOTAL_STEPS
#define TOTAL_STEPS 32
#endif

__constant__ double recip_molecular_masses[30] = {0.9920930186414277, 
  0.4960465093207139, 0.06651120780362699, 0.06250234383789392, 
  0.06233236489615739, 0.05879803873262004, 0.05550825019122593, 
  0.0384050534905585, 0.03570083414998991, 0.03564531203549703, 
  0.0344090165386938, 0.03330392596670473, 0.03325560390181349, 
  0.03222224585186918, 0.03125117191894696, 0.03029681486555637, 
  0.02939901936631002, 0.02272213442641948, 0.02269963076780593, 
  0.02172690196756651, 0.02170632557057247, 0.01693623220658274, 
  0.01665196298335236, 0.01611112292593459, 0.01332544289441412, 
  0.01332544289441412, 0.01297684217629429, 0.01086345098378326, 
  9.169336089635763e-03, 0.03569720205330306}; 

__constant__ double diffusion_masses[30] = {1.00797, 2.01594, 15.03506, 15.9994, 
  16.04303, 17.00737, 18.01534, 26.03824, 28.01055, 28.05418, 29.06215, 
  30.02649, 30.07012, 31.03446, 31.9988, 33.00677, 34.01474, 44.00995, 44.05358, 
  46.02589, 46.06952, 59.04501, 60.05298000000001, 62.06892000000001, 75.04441, 
  75.04441, 77.06035, 92.05178000000001, 109.05915, 28.0134}; 

__device__ const double across_coeffs[1920] = {8.361686290887316e-03, 
  -0.1860162057484011, 3.033147089100501, -12.0191229465797, 
  0.01929139676017443, -0.4457548701621225, 5.090086348908469, 
  -18.01636401228401, 9.715282317873395e-03, -0.2150511936847471, 
  3.239853677599016, -13.58416798775506, 0.015450973050297, -0.3482328328762868, 
  4.270888004936923, -15.31287558472519, 3.897545152990704e-03, 
  -0.08736463553908935, 2.306135807245676, -10.93372903923921, 
  0.01197280363715555, -0.271240959763248, 3.703886270090693, 
  -15.61687140161808, 0.01910839802389039, -0.4413160055384065, 
  5.054239009523916, -17.90236107824279, 9.644706316049781e-03, 
  -0.2134256737108184, 3.227360672737047, -13.53826022418841, 
  0.01527022787579618, -0.3506765555415378, 4.343240120686327, 
  -17.66458833773856, 0.01549202608989689, -0.3491406935690256, 
  4.277567665477716, -15.33072459328188, 3.897467312077586e-03, 
  -0.0873627460881293, 2.306120327843065, -10.93673502135609, 
  0.0119485782662242, -0.2707080833280793, 3.699988722155256, 
  -15.62210643661616, 0.01018064676069338, -0.2825946969132601, 
  4.220700982568849, -16.51314932188011, 0.01887643503750303, 
  -0.4377066088511249, 5.04362412310166, -18.18497779640277, 
  0.01751957999989956, -0.4324987296990053, 5.222435482812251, 
  -20.42453456473172, 0.01310172053619389, -0.3323549429812104, 4.4471030347451, 
  -16.99414771483977, 0.01473721497221279, -0.3299413515244373, 
  4.116350814298771, -15.86051294474001, 0.01718272806693526, 
  -0.406068533902639, 4.860641368293829, -19.38214525305954, 
  0.01870695312438664, -0.4240579014711124, 4.859366081385168, 
  -17.19132402412691, 7.771157267814767e-03, -0.1707676302238381, 
  2.903434292626104, -12.68298231849476, 0.01314285350732773, 
  -0.2994308129782686, 3.930380704942471, -16.61214440642024, 
  0.0146262800856728, -0.3605874816786189, 4.609955031206802, 
  -17.18717776794484, 0.01334851538330884, -0.2989248768485377, 
  3.885327569302682, -15.21342866871342, 0.01690529184503588, 
  -0.3975468468661103, 4.777587841158367, -19.06497074712664, 
  0.01334268108291998, -0.3398729756059657, 4.517483207515939, 
  -17.39068703770995, 0.014981080885595, -0.3347664000209726, 4.147161703679751, 
  -16.09619381109583, 0.01688978898805172, -0.398782693428465, 
  4.799452728417728, -19.38164785335095, 5.536895739234288e-03, 
  -0.1867583089190002, 3.565008159636777, -15.39084361466359, 
  0.0171138477403258, -0.3935105495781182, 4.673156936930091, -17.4777138062095, 
  0.01704934461227353, -0.4199389693147163, 5.108642883195372, 
  -20.45023975022425, 0.01332456327434385, -0.3395706503024596, 
  4.51602164115593, -17.38939006797175, 0.01501090353608677, -0.335418860179776, 
  4.151908403958016, -16.1085711288622, 0.01686860403443958, 
  -0.3984316068670233, 4.797776439372182, -19.38533027530205, 
  6.792229447080372e-03, -0.2103085359487538, 3.698147584577465, 
  -15.61126528748085, 0.01891300902883566, -0.4293080128514888, 
  4.90501752195591, -17.97853779811946, 0.01694648548163187, 
  -0.4131419577900755, 5.01825068725196, -20.1268971113818, 0.01981330548537777, 
  -0.4490716598832108, 5.048252383884028, -17.61107473004077, 
  7.901250163854623e-03, -0.1739680837285394, 2.929626522788437, 
  -12.70709387778168, 0.01423183077529593, -0.3242841480029669, 
  4.119808689722729, -17.070944000896, 0.01983694950759395, -0.4495998310963165, 
  5.052178473243545, -17.62110951921104, 7.91063674756423e-03, 
  -0.1741690060676314, 2.931054697752604, -12.71125832383727, 
  0.01426685069202663, -0.325066719879144, 4.125626065677507, 
  -17.09002710504034, 7.919537539234882e-03, -0.174359531735583, 
  2.932408989082864, -12.71520205606033, 0.01430141955243729, 
  -0.3258392062302946, 4.131368460333886, -17.10868108206892, 
  0.01667281076360976, -0.3944963416937639, 4.771649901922499, 
  -19.23135414690418, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
  0.0, 0.01186253353791213, -0.2686556473446211, 3.683629037447621, 
  -15.56218013907301, 8.457418012014975e-03, -0.189039657678284, 
  3.062679110774865, -13.5846845098064, 0.01183177254102251, 
  -0.2679777607122745, 3.678661496181423, -15.56533029767279, 
  0.01761870766105015, -0.4192832736941898, 4.989055712509337, 
  -19.06508683685098, 0.01661901022407685, -0.4197153934542214, 
  5.190807260648162, -20.52802326149737, 0.01762633021574164, 
  -0.4194071513631389, 4.989633579791411, -19.0817111553006, 
  0.01601946153369799, -0.3684297830246653, 4.48333144504821, -17.8466966887303, 
  0.01714935570776452, -0.4047676849196055, 4.846411603587372, 
  -19.33922628415921, 0.0159545772153037, -0.366909592210842, 4.471502079973733, 
  -17.83539062741878, 0.0102584978975797, -0.2298575526170802, 3.37109785521221, 
  -14.78200095138266, 0.01299730148779137, -0.2959724763391836, 
  3.902989297942163, -16.54504014910531, 0.0101730735258332, 
  -0.2280054505101951, 3.357756473627201, -14.76986416716022, 
  0.01532051709368729, -0.3515346256464287, 4.346821181168021, 
  -17.41286111571464, 0.01686704317359211, -0.3961873618110683, 
  4.76334419828346, -19.02331942112334, 0.01526172524244872, 
  -0.3501564153046779, 4.336089185778999, -17.40488975953586, 
  0.01594204216011421, -0.3662483329469599, 4.462875336261959, 
  -17.97995444008053, 0.01684654523282157, -0.3972351814453051, 
  4.78322302991886, -19.3354808205356, 0.0158588821517522, -0.3643001920591742, 
  4.447714255340937, -17.96100445430084, 0.01697257048056616, 
  -0.4039216933855035, 4.86489740789333, -19.14986287807598, 
  0.01721821288373084, -0.422870986435835, 5.123416927402899, 
  -20.47278723428071, 0.0170410485125448, -0.4051599172128212, 
  4.871870985671559, -19.18176588166163, 0.01598941534962163, 
  -0.367358462503614, 4.471517397007869, -18.00785616028524, 0.0168271651765628, 
  -0.3969191119628538, 4.781766672581613, -19.33986177626137, 
  0.01590499646282741, -0.3653803846358019, 4.456119901668308, 
  -17.98853893616842, 0.0166365765552174, -0.3924367983867684, 
  4.745967813973647, -18.78354675448943, 0.01724911938009028, 
  -0.4211895731638368, 5.089565275349294, -20.34322303295648, 
  0.01667069852061067, -0.3929509375495964, 4.747893974778327, 
  -18.80408513074376, 0.01111627671020413, -0.2491203680148213, 
  3.515444700971034, -15.11165822172473, 0.01396610989156723, 
  -0.3182573739011489, 4.074165936822435, -16.96131607891197, 
  0.01101912705698624, -0.2470165007803154, 3.500308159504729, 
  -15.09621639507836, 0.01116669950736781, -0.2502123502720223, 
  3.523301396417853, -15.13525216798087, 0.01399974884308098, 
  -0.3190091040547303, 4.079754122314569, -16.98005835597673, 
  0.01106805265226407, -0.2480760211505555, 3.507930920796228, 
  -15.11947081451499, 0.01121620107196187, -0.25128440026553, 3.531014868535837, 
  -15.15825477973445, 0.014033128813055, -0.3197550390977301, 4.08529920451891, 
  -16.99844022429313, 0.01111627671020429, -0.2491203680148245, 
  3.515444700971055, -15.14220600071709, 0.01609251728515954, 
  -0.3697552089183041, 4.489873138391906, -17.93673259258161, 
  0.01668921486599598, -0.3942400992627108, 4.764710227065309, 
  -19.20917400756508, 0.01601858518571832, -0.3680187024810189, 
  4.476324204916731, -17.92453424748907, 0.01639339319066143, 
  -0.3901993432640228, 4.754404091430308, -19.00626201897159, 
  0.01609670331359669, -0.3965435253955804, 4.914483173131496, 
  -20.05722347460514, 0.01644141870947846, -0.3909681420938225, 
  4.757794935034934, -19.03172055435256, 0.01544707727641764, 
  -0.3856330904913191, 4.863182182371991, -20.13383074207051, 
  0.0160441906117713, -0.3854712226807655, 4.744334130135219, 
  -19.20854067629937, 0.01666500998084409, -0.3899919756904059, 
  4.700566007749391, -18.91630557107337, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
  0.0, 0.0, 0.0, 0.0, 0.01276715517710312, -0.3467558983432538, 
  4.769182061492662, -20.00930506299005, 0.01759976282858629, 
  -0.431374579075224, 5.186314414861248, -20.3123444050489, 0.01608218846344772, 
  -0.3730497341488359, 4.544732900243092, -18.50939564665117, 
  0.01393104706159106, -0.3689614203481394, 4.899867871269459, 
  -20.16247345324624, 0.0177470251422625, -0.4303118620542329, 
  5.141705878828438, -20.50229160525336, 0.01574444975162647, 
  -0.3635632171037951, 4.458090368873123, -18.19896210816889, 
  0.01251273318909122, -0.3398284593956539, 4.706359866108304, 
  -20.02166250825629, 0.0176905894606122, -0.4303609922918876, 
  5.153159982358243, -20.79667851668607, 0.01603614256888279, 
  -0.3706447271251463, 4.51545905276349, -18.59114802045471, 
  2.961995181951192e-03, -0.1496107047376196, 3.509439623576637, 
  -17.57470889906346, 0.01487810846600315, -0.3884219464025779, 
  5.028238023247621, -20.9108858688434, 0.01776547635070909, -0.424036435789644, 
  5.037182907598202, -20.09778392705388, 0.01240312218810322, 
  -0.3375016305986661, 4.690224285295936, -19.99140738276309, 
  0.01765710195666045, -0.4296855118108462, 5.148709356637934, 
  -20.79503636026955, 0.01604490332863657, -0.3708580653156933, 
  4.517176561882557, -18.60391748015958, -1.722854872784397e-03, 
  -0.0506481953929987, 2.840074298036828, -16.1879122279262, 
  0.01603486837534695, -0.4085738237685885, 5.126564302650015, 
  -21.01914748570987, 0.01797007519685269, -0.4259383525601979, 
  5.028624961689301, -20.03301698033893, 0.01725358851966463, 
  -0.426062980261422, 5.167992585222853, -20.29800744458825, 
  0.01662299306317554, -0.3866746528753353, 4.658928838069515, 
  -18.81310913052762, 0.01143096775398265, -0.2581899062898846, 
  3.599212287457288, -15.82244530724902, 0.01660123780373732, 
  -0.4062735870564639, 4.975026876334818, -19.69227647126568, 
  0.01662154762449843, -0.3866620330866413, 4.658986052816886, 
  -18.8204774717565, 0.01143956871960472, -0.2583774171294353, 
  3.600570645003726, -15.83284728213591, 0.01652519649257163, -0.40473760142018, 
  4.964899372240972, -19.67562585464342, 0.01662031168714402, 
  -0.3866568678234443, 4.659119682480987, -18.82775721520052, 
  0.01145011749170804, -0.2586074419215186, 3.602237408062738, 
  -15.84365217293951, 9.647092764604211e-03, -0.2835828359206055, 
  4.356727595492845, -19.24814729175656, 0.01727468125584479, 
  -0.4215261145035135, 5.090756014595465, -20.58395629908095, 
  0.01604367644406037, -0.3708426164400376, 4.516961186217023, 
  -18.53079415235116, 5.458543694842259e-03, -0.1987081305704536, 
  3.82006307425918, -18.35811956138697, 0.01527464578286526, 
  -0.3937614207118246, 5.035855423845857, -21.00065693515901, 
  0.01740205764262819, -0.4135431552074462, 4.938189988363134, 
  -19.96442004198294, 4.220579372562574e-03, -0.1727114141289421, 
  3.646823568376245, -18.14292159439013, 0.01427855212817547, 
  -0.3746195297877447, 4.9213716101658, -20.92465637093389, 0.01708637022100646, 
  -0.4091613599751163, 4.927762994179491, -20.12557094589089, 
  8.501857059348715e-03, -0.2588518679238623, 4.192212007663292, 
  -19.20855554427839, 0.01613326247817586, -0.40528110508291, 5.051779331170613, 
  -20.97636201445358, 0.01692140297359912, -0.3970169107027955, 
  4.765732873001947, -19.54574682885651, 6.308850965281987e-03, 
  -0.2138632789225291, 3.90554700669761, -18.7428108929955, 0.01428958335181497, 
  -0.3717174561188799, 4.870280509250251, -20.80529118742287, 
  0.01685556990331726, -0.4017709158779321, 4.852493620481751, 
  -19.97996549790109, 0.01423345322795839, -0.3705508916713779, 
  4.862343376405766, -20.7901180716468, 0.0168351907444687, -0.4014000128382058, 
  4.850382996032597, -19.97892312858702, 0.01684679371909519, 
  -0.3963819676295641, 4.768858707658768, -19.62169697463377, 0.0, 0.0, 0.0, 
  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0177078648346107, 
  -0.4279145838383311, 5.110293120668988, -20.57314095446369, 
  0.01567910370932323, -0.4028192731367471, 5.103555624065509, 
  -20.94984906818039, 0.01543768817634423, -0.3985688522410473, 
  5.082524602390438, -21.16981144671941, 0.01768074206972332, 
  -0.4273724895313247, 5.106762162919154, -20.57390455941299, 
  0.01779079363349239, -0.4303513116901596, 5.133992166243671, 
  -20.87668514859339, 0.01542313357114251, -0.3982610348305202, 
  5.080395939874242, -21.17356928612396, 0.01692223939700398, 
  -0.4246119478607712, 5.212545652269392, -21.08393040216978, 
  0.0165969882168008, -0.4187528258546068, 5.18111860735039, -21.27807800651694, 
  9.373961876002552e-03, -0.2814553224653157, 4.379424310484298, 
  -19.82650548257712, 0.01601226245424021, -0.371222009874247, 
  4.528923919785043, -18.39743682612788, 0.01621138246238222, 
  -0.3763258990701221, 4.572319887381138, -18.76367495662019, 
  0.01803192489534054, -0.4320140228914988, 5.114224090626984, -20.326898812041, 
  0.01601165461959638, -0.3712235497928291, 4.529051633294823, 
  -18.40518687534747, 0.01620851192523879, -0.3762546229946339, 
  4.571736935996034, -18.76945956866688, 0.01802858183516277, 
  -0.4319404969468078, 5.11369276226905, -20.33308645046955, 
  0.01601136059376211, -0.3712347917780965, 4.529271889920254, 
  -18.4128766690898, 0.01620601406889396, -0.3761953302339939, 
  4.571270809742595, -18.77525482385897, 0.01802243384229505, 
  -0.4318116028053465, 5.112806455068217, -20.33819160831386, 
  0.01743629493798964, -0.4221580294036591, 5.069651213972101, 
  -20.41078339354567, 0.0175761502202725, -0.4258236989664007, 
  5.101860069775093, -20.74266187026316, 0.01536584788667469, 
  -0.396684198037172, 5.06619744471396, -21.06202603900746, 0.01581327605008552, 
  -0.4026975385768839, 5.073822719997091, -20.96286228487243, 
  0.0160835441645258, -0.4090117090600895, 5.124133879216221, 
  -21.33138000082259, 8.519324047002192e-03, -0.2638402028055288, 
  4.263553119181736, -19.74614429255436, 0.01483107529775175, 
  -0.3839103898530722, 4.962015890672341, -20.89621281744701, 
  0.01542541303751554, -0.3970692402724551, 5.059981968898623, 
  -21.36315850637573, 7.076029778068204e-03, -0.2342261911150419, 
  4.068998658183347, -19.47442130545115, 0.01651244139193281, 
  -0.4110387930714625, 5.069554525819, -20.90423129483277, 0.01719123713176045, 
  -0.4256066007744396, 5.17441885465442, -21.37421469355437, 
  0.01222478491057203, -0.3368448263965977, 4.716303610294381, 
  -20.74010752889678, 0.01464948423593473, -0.3771685378292693, 
  4.886124764428009, -20.72976384860511, 0.01564529517530012, 
  -0.3984882382224753, 5.038360563664741, -21.30884737441429, 
  9.208443004764425e-03, -0.2764811454324512, 4.335079963781424, 
  -20.09226308738432, 0.01458647906015063, -0.3758681294827105, 
  4.877333817784148, -20.7129352923631, 0.01559906571966491, 
  -0.3975315078265621, 5.03187774149355, -21.29718418410792, 
  9.188677431838987e-03, -0.27603021570242, 4.33178400671293, 
  -20.08729291509497, 0.01551999421200606, -0.3907995530443317, 
  4.934466776029828, -20.65920818821595, 0.01646975887591035, 
  -0.4108520141344763, 5.075664912433869, -21.20949558107147, 
  0.01167636386407826, -0.3249856451788373, 4.63288733096908, -20.6017949146601, 
  0.01483785885135675, -0.3768869342451548, 4.841596996190879, 
  -20.48311873316177, 0.0159435533040175, -0.4000889455055683, 
  5.003614870231607, -21.07933553026604, 0.01128276953889692, 
  -0.3164756849052876, 4.573038427781504, -20.49311353348583, 
  0.0159435533040175, -0.4000889455055683, 5.003614870231607, 
  -21.07933553026604, 0.01128276953889692, -0.3164756849052876, 
  4.573038427781504, -20.49311353348583, 0.0112268653608535, 
  -0.3152669823413235, 4.564538073057616, -20.47730958084015, 0.0, 0.0, 0.0, 
  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01658788139904375, 
  -0.4185621852453963, 5.179811733119763, -21.28386476635458, 
  0.0162148859114813, -0.376416221370762, 4.573081574637201, -18.77458898751097, 
  0.01797181525421941, -0.4281517584207453, 5.063567543310371, 
  -20.16013583575789, 0.01621168406702842, -0.3763335451682168, 
  4.572383506694558, -18.78015861559497, 0.01768642894877549, 
  -0.4200959404692318, 4.98929315472884, -19.94316497820088, 
  0.01187611033178163, -0.2691183051571772, 3.688399522537898, 
  -16.0588777374304, 0.01620886652068069, -0.3762632660238456, 
  4.571806511084312, -18.78574761348539, 0.01768418607937717, 
  -0.4200448104870494, 4.988909576066858, -19.9494567123894, 
  0.01187918561469026, -0.2691862126248797, 3.688898128818054, 
  -16.06742344100748, 0.01760952666922614, -0.4264914778811474, 
  5.106217050160734, -20.76217989449102, 0.01598594961361961, 
  -0.4073078273122722, 5.115002894749336, -21.11193315112983, 
  0.01617305905066158, -0.3754539076071414, 4.565512563284903, 
  -18.68514283240182, 0.01613182942241974, -0.4100138212804433, 
  5.130943281320124, -21.35678986760308, 0.01111635351457155, 
  -0.3155841990403139, 4.589561842347139, -20.39176246821974, 
  0.01739973575042211, -0.415636708201812, 4.972105854634792, 
  -20.09700958225115, 0.01548877078258531, -0.398390424367975, 
  5.069000737507449, -21.39377018190699, 9.894147069085996e-03, 
  -0.2910492891214793, 4.433391294454064, -20.21372071039943, 
  0.01741046904645487, -0.4183963036350812, 5.013530846509192, 
  -20.38668178000485, 0.01725984955592346, -0.427009517936241, 
  5.183807132904281, -21.40524771579032, 0.01402556738272536, 
  -0.371190626102079, 4.917134617563885, -21.08916515696886, 
  0.01693107525007737, -0.3991631789660172, 4.798015411450208, 
  -19.67282954642232, 0.01573709878029865, -0.4003880896981281, 
  5.05123370244048, -21.34887894835055, 0.01125100881328651, 
  -0.3167735568466953, 4.582949146323466, -20.56103033615218, 
  0.01690406096954081, -0.4047490479403464, 4.891097281921525, 
  -20.12863924357937, 0.01569175074940746, -0.3994496322406266, 
  5.044874890045692, -21.33755632791134, 0.01121727463116988, 
  -0.3160434942731527, 4.577808759944576, -20.55208856663434, 
  0.01687689732661911, -0.4042348392899185, 4.887987398257999, 
  -20.12555076593008, 0.01656068325953119, -0.4127116533463194, 
  5.088112871478407, -21.24842870757958, 0.01335168574963909, 
  -0.3569223449053559, 4.818451151767042, -20.92000535772784, 
  0.01674300452558516, -0.3961226148106778, 4.784274271296735, 
  -19.71434723257281, 0.01603967488855693, -0.4020551218816307, 
  5.016777381117837, -21.12052575391307, 0.01285777815506309, 
  -0.3464651099518051, 4.746130739320087, -20.78559266129254, 
  0.01660195894251777, -0.3938193673950928, 4.773629836259699, 
  -19.73273198013653, 0.01603967488855693, -0.4020551218816307, 
  5.016777381117837, -21.12052575391307, 0.01285777815506309, 
  -0.3464651099518051, 4.746130739320087, -20.78559266129254, 
  0.01660195894251777, -0.3938193673950928, 4.773629836259699, 
  -19.73273198013653, 0.01596497221023254, -0.4005270747650573, 
  5.006547933568515, -21.10177478515488, 0.0127871621439714, -0.344969977004665, 
  4.735790710383811, -20.76597312346907, 0.01658162331264033, 
  -0.3934863342901689, 4.772081091442831, -19.7348891861111, 
  0.01546290892894862, -0.3902567454920981, 4.937790266689601, 
  -20.97388198176454, 0.01231294467242273, -0.3349292693683299, 
  4.666350913822046, -20.6323613488596, 0.01644408121217673, 
  -0.3912290413999133, 4.761535901311994, -19.74716619789997, 
  0.01187147930576884, -0.3255815643573291, 4.601702675185011, -20.505735333898, 
  0.01631460272759323, -0.389097814855518, 4.751517515319503, 
  -19.75588741535798, 0.01137272204757107, -0.256871964331196, 
  3.589258796402728, -15.78874095180037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
  0.0, 0.0, 0.0, 0.0, 0.01187604700964037, -0.2691169068977695, 
  3.688389255917085, -16.074130510967, 0.01616757044132468, -0.3752914424287732, 
  4.564003286855588, -18.68972760873219, 0.01616247951262514, 
  -0.3751419311812992, 4.562621216407553, -18.69430895597448, 
  0.01743114230290766, -0.4162402310021222, 4.975836243162725, 
  -20.11340234267185, 0.0174595932067848, -0.4167864186469481, 
  4.979207742162901, -20.12868410872482, 0.01652352773512009, 
  -0.4178141411162211, 5.180859915501394, -21.41485098970703, 
  0.0174580610361681, -0.419321898344613, 5.019351664986811, -20.40768667902061, 
  0.01750205583130883, -0.4201771086365, 5.024726415101657, -20.42738469266181, 
  0.01594432386395693, -0.4075460772871262, 5.128237538960962, 
  -21.48234196390234, 0.01694706252051249, -0.3994185034848949, 
  4.799136859803416, -19.68297531287536, 0.01696178101495658, 
  -0.3996527780187634, 4.800157612023575, -19.69261114433477, 
  0.01769834254227584, -0.4356664314039516, 5.238739937408948, 
  -21.48607931647734, 0.01695310951393357, -0.4056773377950208, 
  4.89670979958589, -20.14954970593606, 0.01699971626290854, 
  -0.4065591528582582, 4.902039121154385, -20.16949743077554, 
  0.01642252923649986, -0.414226021125283, 5.1417295140154, -21.52238818021212, 
  0.01692645907413683, -0.4051729863119613, 4.89366072793903, 
  -20.14664254889118, 0.01697361220173926, -0.4060652884493906, 
  4.899054690201257, -20.16677779869221, 0.0163866247106693, 
  -0.4134836134716063, 5.13670422066241, -21.51480512520413, 
  0.01676490537133993, -0.3964789630238127, 4.785908097736856, 
  -19.72631017971463, 0.01678573318906437, -0.3968174423184244, 
  4.787455823171905, -19.73775415108052, 0.01723100326528766, 
  -0.4261176452956811, 5.174902312075998, -21.41313404755354, 
  0.01662561265359032, -0.3942064736081307, 4.775427372888556, 
  -19.74559607023412, 0.0166483789106802, -0.3945787673734946, 
  4.777153227698086, -19.75794568246729, 0.0167652050318269, 
  -0.4165974512349058, 5.111234764957456, -21.31043129953129, 
  0.01662561265359032, -0.3942064736081307, 4.775427372888556, 
  -19.74559607023412, 0.0166483789106802, -0.3945787673734946, 
  4.777153227698086, -19.75794568246729, 0.0167652050318269, 
  -0.4165974512349058, 5.111234764957456, -21.31043129953129, 
  0.0166054051538909, -0.3938757848085727, 4.773891994789771, 
  -19.74786325277953, 0.01662832613480615, -0.3942508620888456, 
  4.775633299523497, -19.76032378278002, 0.01669228222435651, 
  -0.4151069016606618, 5.101265721056969, -21.29337952253727, 
  0.01646808523668161, -0.3916235297490278, 4.763384188521981, 
  -19.76078463829238, 0.01649140036787047, -0.3920064908270852, 
  4.765176429178698, -19.77389666642353, 0.01616778687629572, 
  -0.4043854597150142, 5.029554599460589, -21.16627173996596, 
  0.01633797483140773, -0.3894829104295383, 4.753331579309927, 
  -19.76998541567083, 0.01636080179691941, -0.3898588654932456, 
  4.755101032068556, -19.78358391083433, 0.01563174795793792, 
  -0.3934269765918732, 4.956251784065515, -21.03101953140061, 
  0.01138172293572765, -0.2570682099052526, 3.590680573100387, 
  -15.79929387864297, 0.01139264370810637, -0.2573063628166207, 
  3.59240637555027, -15.81023928701771, 0.01600568321247894, 
  -0.3699248651570135, 4.509545427950659, -18.5024429944941, 
  0.01983694950759395, -0.4495998310963165, 5.052178473243545, 
  -17.62110951921104, 0.01985957569699271, -0.4501052540237288, 
  5.055935363576013, -17.63070445637847, 0.01402682860856762, 
  -0.3509187795957734, 4.566918361563354, -17.25033892804664, 
  7.919537539234882e-03, -0.174359531735583, 2.932408989082864, 
  -12.71520205606033, 0.01422137871784259, -0.3181198249953437, 
  4.025827521562348, -15.64739655500348, 0.01667281076360976, 
  -0.3944963416937639, 4.771649901922499, -19.23135414690418, 0.0, 0.0, 0.0, 
  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.575579807752714e-03, 
  -0.2854876997921852, 4.405149144692129, -20.35193456269646, 
  0.0139491523715259, -0.3707312407207418, 4.924194321920059, 
  -21.30546447332933, 0.01345541269767703, -0.3619122509759408, 
  4.879355828634514, -21.37643592844271, 0.01134131140988099, 
  -0.3198653608990882, 4.614415577740197, -20.84204172148407, 
  0.01053713663610162, -0.3043843984770711, 4.522131478315447, 
  -20.80210760915337, 0.01458807786682745, -0.3826370390268866, 
  4.991331861562553, -21.63568659298432, 0.01132350456277812, 
  -0.3194764112215697, 4.611658028139981, -20.83925421880993, 
  0.01052766355833828, -0.3041724438249637, 4.520602981674404, 
  -20.80221248336058, 0.01456979693058862, -0.3822520897812069, 
  4.988680641368549, -21.63338236360901, 0.01362116176750284, 
  -0.3637689719188353, 4.87590648809121, -21.26291206885387, 
  0.01330002694361486, -0.3585707121706974, 4.855946692831883, 
  -21.39169084658453, 0.0161192661908447, -0.4098684967504068, 5.13106890369355, 
  -21.76867116744413, 0.01326783732845294, -0.3562736235057222, 
  4.823950767424825, -21.18197618919406, 0.01307425394597842, 
  -0.3537260960515837, 4.822071494950796, -21.35234588189431, 
  0.01581454158324944, -0.4035325779556496, 5.087934817373614, 
  -21.71041313105006, 0.01326783732845294, -0.3562736235057222, 
  4.823950767424825, -21.18197618919406, 0.01307425394597842, 
  -0.3537260960515837, 4.822071494950796, -21.35234588189431, 
  0.01581454158324944, -0.4035325779556496, 5.087934817373614, 
  -21.71041313105006, 0.01321166126035343, -0.3550820315982385, 
  4.815691762073211, -21.16805408022431, 0.01303642415323101, 
  -0.3529145651524985, 4.8163983591427, -21.34435355380187, 0.01576296083391037, 
  -0.4024600695996188, 5.08063320670234, -21.6990754832046, 0.01280372388689693, 
  -0.3464293358677498, 4.755722270170424, -21.06220103413366, 
  0.01275239305626985, -0.3468222688206015, 4.773814478300334, 
  -21.27827621649271, 0.01537335700609398, -0.3943588594626116, 
  5.025479260685903, -21.60709639073198, 0.0123823026739862, 
  -0.3374908314250546, 4.693774452640856, -20.94722048709242, 
  0.01244736118076681, -0.3402801779457002, 4.728091739776819, 
  -21.20029994790442, 0.01495221078008985, -0.3856012650628667, 
  4.965854365178214, -21.50038308074001, 0.01738192517655597, 
  -0.4129816902240582, 4.933052551153176, -19.9408309519916, 
  0.01712216798754908, -0.4099899344319641, 4.933748560778064, 
  -20.13110614783666, 0.01689789413388545, -0.3964018470322727, 
  4.760385853389058, -19.52276535167255, 4.517948517158759e-03, 
  -0.1645512845004073, 3.400144334222293, -15.08764355297302, 
  1.198342438267866e-03, -0.09821904357550085, 2.972261954495235, 
  -14.34857260742947, 6.236610592995685e-03, -0.1996384148079854, 
  3.625576538368873, -15.6965222017684, 0.01778644607069595, -0.40589892949645, 
  4.743684212887175, -17.70170519863036, 0.01947276925128896, 
  -0.4442636336023223, 5.034794328287674, -18.56440021052348, 
  0.01856825753836316, -0.4169336661378619, 4.774819760507476, 
  -17.7979941825457, 0.01589906970550711, -0.3929903033822995, 
  4.895182518344388, -20.02013694597282, 0.01551840200013508, 
  -0.3874275960261506, 4.879130020329604, -20.17297636396011, 
  0.01603138507467474, -0.3895192522242649, 4.81263618987109, -19.7919104234836, 
  0.01639339319066143, -0.3901993432640228, 4.754404091430308, 
  -19.00626201897159, 0.01596102041363235, -0.3839898851675128, 
  4.736214212367926, -19.17250405677621, 0.0166917388200961, 
  -0.3908198819509124, 4.708475230601932, -18.91691701064183, 
  0.01544707727641764, -0.3856330904913191, 4.863182182371991, 
  -20.13383074207051, 0.01610776665596584, -0.3904696845273807, 
  4.81352332904325, -19.78759388906465, 0.01666500998084409, 
  -0.3899919756904059, 4.700566007749391, -18.91630557107337, 0.0, 0.0, 0.0, 
  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01265785079449114, 
  -0.3464564284448639, 4.785842218222557, -21.42678747389941, 
  0.0147306249366153, -0.3856352290690707, 5.011958719531335, 
  -21.76049603388679, 0.01473199307576863, -0.3856644122458763, 
  5.012162109711451, -21.76528061565813, 0.01463793559259989, 
  -0.3836778285216462, 4.998441697245595, -21.77387972550602, 
  0.01465179430003966, -0.3839702598726566, 5.000459602666496, 
  -21.78317063907969, 0.01623367035226293, -0.4122471495028369, 
  5.147262147654125, -21.93017076163049, 0.01463793559259989, 
  -0.3836778285216462, 4.998441697245595, -21.77387972550602, 
  0.01465179430003966, -0.3839702598726566, 5.000459602666496, 
  -21.78317063907969, 0.01623367035226293, -0.4122471495028369, 
  5.147262147654125, -21.93017076163049, 0.01461414068796094, 
  -0.3831757858468834, 4.994977714898363, -21.77182547378199, 
  0.01462962714861432, -0.3835025242209622, 4.997232094240242, 
  -21.78170686253426, 0.01621005830169685, -0.4117562188467454, 
  5.143920034136893, -21.92864921131436, 0.01439360220033007, 
  -0.3785240254015474, 4.962890332793518, -21.73578748628345, 
  0.01441881906488605, -0.3790558550794543, 4.966558415746744, 
  -21.74923340086429, 0.01598028819510619, -0.4069788614848682, 
  5.111396800906332, -21.89359155718996, 0.01410083021273559, 
  -0.3723498163165908, 4.920309299196179, -21.67080309713513, 
  0.0141329718970733, -0.3730276230930601, 4.924983677632217, -21.6868620052329, 
  0.01566226038374453, -0.4003662023243093, 5.066378111092643, 
  -21.82528955758129, 0.01683645173346144, -0.4012450988474866, 
  4.847727062563259, -19.95820513461937, 0.01681618320911379, 
  -0.4008769247507337, 4.845638770971929, -19.95722192764029, 
  0.01682594288190327, -0.395829483551514, 4.76400205277652, -19.59996862327433, 
  9.946430396957434e-04, -0.0945153047093119, 2.944308618231648, 
  -14.33144198720684, 9.67582835561889e-04, -0.09397468017373391, 
  2.940790588799122, -14.32408304776667, 5.885373675076967e-03, 
  -0.1928145452184591, 3.582790325381286, -15.61208985457336, 
  0.02005641636469029, -0.4538461036761604, 5.078381721394932, 
  -18.66727920854099, 0.02006829944074763, -0.4541122322887322, 
  5.08036558601627, -18.67240359007563, 0.01879928558568077, 
  -0.4220337025094116, 4.812277032281624, -17.89359697664186, 
  0.01481937311659824, -0.3701544206643765, 4.733573887115632, 
  -19.84048696731194, 0.01477860059136737, -0.3693407338613307, 
  4.728284622271691, -19.83092928344765, 0.01550280947485409, 
  -0.379256146987773, 4.748313100043996, -19.69362175667486, 
  0.01657369092412962, -0.395154296214342, 4.796857262563064, 
  -19.35098481047572, 0.01656733968623798, -0.3950967177194292, 
  4.79707158017407, -19.35469686949993, 0.01681441552105499, 
  -0.3946441793121106, 4.74515056823209, -19.05867249006957, 
  0.01504183917288854, -0.374232656347211, 4.756597486676818, -19.8893274039839, 
  0.01500060767434612, -0.3734109451244151, 4.751266251329462, 
  -19.87979635557892, 0.01557944902435038, -0.3802355605296097, 
  4.749600249093892, -19.69237447240075, 0.01659681899665369, 
  -0.3953627029194811, 4.79605807658933, -19.36780531053828, 
  0.01659038086724507, -0.3953048910133678, 4.796283536542286, 
  -19.37166032271827, 0.01679046890483367, -0.3938946423059978, 
  4.737945086452731, -19.06168007452958, 6.308850965281987e-03, 
  -0.2138632789225291, 3.90554700669761, -18.7428108929955, 
  6.294067997107787e-03, -0.2134885372340211, 3.902622999559342, 
  -18.73753542577968, 7.811866370889864e-03, -0.2435512042497034, 
  4.082521310659742, -18.98993522059879, 0.01423345322795839, 
  -0.3705508916713779, 4.862343376405766, -20.7901180716468, 
  0.01518990166966528, -0.3859045055915796, 4.921490200084995, 
  -20.73724733814467, 0.01684679371909519, -0.3963819676295641, 
  4.768858707658768, -19.62169697463377, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
  0.0, 0.0, 0.0, 0.0, 0.01631381353256324, -0.4139134366782189, 
  5.158605694760181, -22.00525993798246, 0.01631223411790557, 
  -0.4138805986519444, 5.158382144825794, -22.01134302281761, 
  0.01631223411790557, -0.4138805986519444, 5.158382144825794, 
  -22.01134302281761, 0.01622117472735086, -0.4119873465466709, 
  5.145493485362663, -22.02438533180022, 0.01622117472735086, 
  -0.4119873465466709, 5.145493485362663, -22.02438533180022, 
  0.01624344631200003, -0.4124504061849024, 5.148645858123515, 
  -22.03869711373972, 0.01601239764671065, -0.4076464873459705, 
  5.115941896228071, -21.99456726163089, 0.01601239764671065, 
  -0.4076464873459705, 5.115941896228071, -21.99456726163089, 
  0.01605218054382352, -0.4084736567519756, 5.121573121509476, 
  -22.0149766380066, 0.01677282393141059, -0.3953568796163236, 
  4.765925108535541, -19.64411077239263, 0.01677282393141059, 
  -0.3953568796163236, 4.765925108535541, -19.64411077239263, 
  0.01676522140443547, -0.3952872044638016, 4.766170050356854, 
  -19.64993494875463, 5.682892938320812e-03, -0.1888801510502674, 
  3.558116185352224, -15.56317356418745, 5.682892938320812e-03, 
  -0.1888801510502674, 3.558116185352224, -15.56317356418745, 
  5.655846538805275e-03, -0.1883545789275397, 3.554819803472873, 
  -15.5566262932005, 0.01892735043336727, -0.4248629956507679, 
  4.833074714641756, -17.94643128562877, 0.01892735043336727, 
  -0.4248629956507679, 4.833074714641756, -17.94643128562877, 
  0.01894418056968953, -0.4252349548753668, 4.835810033457547, 
  -17.95336628632041, 0.01519737529087586, -0.3733234851752495, 
  4.711114707698918, -19.63494393702734, 0.01519737529087586, 
  -0.3733234851752495, 4.711114707698918, -19.63494393702734, 
  0.01515701643004046, -0.3725394574619092, 4.706197987870115, 
  -19.62710762666573, 0.01688440846205021, -0.3968433319937479, 
  4.766339275560845, -19.13891627340648, 0.01688440846205021, 
  -0.3968433319937479, 4.766339275560845, -19.13891627340648, 
  0.01689363642025551, -0.3971342216680241, 4.769147389221604, 
  -19.14947331545991, 0.01527044851018354, -0.3742473849184965, 
  4.712179350216234, -19.63449986794348, 0.01527044851018354, 
  -0.3742473849184965, 4.712179350216234, -19.63449986794348, 
  0.01522944736638463, -0.3734526926135804, 4.707212311207702, 
  -19.62672516079136, 0.01686262715349251, -0.3961576198462414, 
  4.759724787772213, -19.14452730116448, 0.01686262715349251, 
  -0.3961576198462414, 4.759724787772213, -19.14452730116448, 
  0.01687216564626523, -0.3964577547063053, 4.762619067972215, 
  -19.15545097541556, 7.398923092054965e-03, -0.2343946259688732, 
  4.016883342936555, -18.85645979161424, 7.398923092054965e-03, 
  -0.2343946259688732, 4.016883342936555, -18.85645979161424, 
  7.343465478205243e-03, -0.2331649476339979, 4.008068871074578, 
  -18.83841122761047, 0.01455661433378379, -0.3728954562376408, 
  4.834009893132144, -20.57011055891577, 0.01455661433378379, 
  -0.3728954562376408, 4.834009893132144, -20.57011055891577, 
  0.01446863424693232, -0.3710880799334739, 4.821855665982699, 
  -20.5466256222119, 0.01679180208398761, -0.395866083530237, 4.77044846207417, 
  -19.66499973830335, 0.01679180208398761, -0.395866083530237, 4.77044846207417, 
  -19.66499973830335, 0.01678393578994711, -0.3957903381737836, 
  4.770646845789734, -19.67070707170018, 0.01483785885135675, 
  -0.3768869342451548, 4.841596996190879, -20.48311873316177, 
  0.01483785885135675, -0.3768869342451548, 4.841596996190879, 
  -20.48311873316177, 0.01474225968413834, -0.3749370292167277, 
  4.828580453150344, -20.45813206744283, 0.0159435533040175, 
  -0.4000889455055683, 5.003614870231607, -21.07933553026604, 
  0.01586861434643186, -0.3985560344691687, 4.993352685847322, 
  -21.06042109609795, 0.0112268653608535, -0.3152669823413235, 
  4.564538073057616, -20.47730958084015, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
  0.0, 0.0, 0.0, 0.0, 0.01624975139793536, -0.4125814981116693, 
  5.149538291961584, -22.12769739348005, 0.01671412406740528, 
  -0.3948089119599393, 4.767667716880863, -19.68676952794811, 
  0.01666646519297767, -0.3943499224517551, 4.768873390738809, 
  -19.71828315609303, 5.481883524736946e-03, -0.1849738808346717, 
  3.533614252024805, -15.51444018497138, 5.327436577901751e-03, 
  -0.181972131773661, 3.514782853160168, -15.47688066504096, 
  0.01855344618681919, -0.4205906575434817, 4.833263530567264, 
  -17.11566826957102, 0.01905091044713881, -0.4275945908565789, 
  4.853168998813324, -17.99730068626329, 0.01914350583060496, 
  -0.429642995453191, 4.868248534707257, -18.03535628485514, 
  7.738735186575013e-03, -0.1700462638479564, 2.898081865116513, 
  -12.66067773360676, 0.01490153586209278, -0.3675758272249446, 
  4.675066542043249, -19.57710032281691, 0.01468246421822933, 
  -0.363318835868341, 4.648361846635586, -19.53370264172737, 
  0.01309926016016264, -0.2983957396801308, 3.922183617690015, 
  -16.58229727389163, 0.01695203857536148, -0.3989806947551504, 
  4.787003405787821, -19.21620476611159, 0.01700221862475968, 
  -0.4005755230154533, 4.802472654131053, -19.27347508617585, 
  0.01019994586293929, -0.2285473221102691, 3.361316901848032, 
  -14.74821144369962, 0.01496907327072761, -0.3684054320912689, 
  4.675660977248493, -19.57689217600287, 0.01474476807762328, 
  -0.3640565131267177, 4.648469059406899, -19.53337286596797, 
  0.01296169192693593, -0.2951168666407832, 3.896131714663516, 
  -16.51845374267443, 0.01693264584232136, -0.3983664798204695, 
  4.781057630953785, -19.22460719579998, 0.01698474101367319, 
  -0.4000190964554385, 4.797070217225778, -19.28407860467514, 
  0.01011604018635442, -0.2267279585032463, 3.348209961387701, 
  -14.73662675035526, 6.986875316322944e-03, -0.2252584591284295, 
  3.951396684538771, -18.72172539380137, 6.672311235276643e-03, 
  -0.2182844020130469, 3.901412364432089, -18.61792437389283, 
  0.01752041063984414, -0.4292621352288661, 5.167061062943798, 
  -20.24331802125277, 0.01389052432734885, -0.3592114791206484, 
  4.74198573458908, -20.39107748587152, 0.0133683785054096, -0.3484838936408337, 
  4.66983962339939, -20.24909175349189, 0.01605610967565784, 
  -0.3723671521293567, 4.538825284308942, -18.48414610794849, 
  0.01673109000569557, -0.3952718911518135, 4.771837137547307, 
  -19.7067715978363, 0.01668183728044754, -0.3947763368120915, 
  4.772763191717539, -19.73758535862802, 0.01067562975746162, 
  -0.2408858507243121, 3.466861174547758, -15.49018246615967, 
  0.01410955736917456, -0.3620314518721118, 4.742426751854439, 
  -20.29132239773672, 0.01353185635921411, -0.3502469557301395, 
  4.663752995734938, -20.13725064581071, 0.01570386697431676, 
  -0.3625777153439032, 4.450097797101236, -18.16875230767832, 
  0.01536752838941727, -0.3883055054812352, 4.924726507640238, 
  -20.93223286510378, 0.01490475581683615, -0.3788378891915134, 
  4.861337194426643, -20.81181538659878, 0.01600311167154667, 
  -0.3698233154242643, 4.508649662313174, -18.56460668096922, 
  0.01085325715695665, -0.3071891014341762, 4.507729748503372, 
  -20.36998824125493, 0.01050767519013052, -0.2997168674281591, 
  4.455180463695319, -20.26865294469341, 0.01774763201206144, 
  -0.4235011164744815, 5.032034577127299, -20.07324021623124, 
  0.01546290892894862, -0.3902567454920981, 4.937790266689601, 
  -20.97388198176454, 0.01499593834194696, -0.3807034057629117, 
  4.873827876156826, -20.85271355370843, 0.01601210918223788, 
  -0.3700424020243533, 4.510413399877581, -18.57749676303557, 
  0.01187147930576884, -0.3255815643573291, 4.601702675185011, -20.505735333898, 
  0.01795666463244159, -0.4253479492459609, 5.021789068381895, 
  -20.00088354859287, 0.01137272204757107, -0.256871964331196, 
  3.589258796402728, -15.78874095180037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
  0.0, 0.0, 0.0, 0.0}; 

__global__ void
__launch_bounds__(320,2)
gpu_diffusion(const double *temperature_array, const double *pressure_array, 
  const double *mass_frac_array, const double *mixmw_array, const int 
  slice_stride/*NX*NY in number of doubles*/, const int row_stride/*NX in number 
  of doubles*/, const int total_steps/*NZ in number of doubles*/, const int 
  spec_stride/*NX*NY*NZ in number of doubles*/, double *diffusion) 
{
  const int tid = threadIdx.x & 0x1f;
  const int wid = threadIdx.x >> 5;
  {
    const int offset = (blockIdx.x*32 + tid);
    temperature_array += offset;
    pressure_array += offset;
    mass_frac_array += offset;
    mixmw_array += offset;
    diffusion += offset;
  }
  volatile __shared__ double sumxod[30][32];
  volatile __shared__ double mole_frac[30][32];
  volatile __shared__ double mirror[10];
  double temperature;
  double mixmw;
  double mole_frac_temp[3];
  double thread_coeffs[6];
  {
    const int offset = wid*192+tid;
    asm volatile("ld.global.cg.f64 %0, [%1];" : "=d"(thread_coeffs[0]) : 
      "l"(across_coeffs+offset+0) : "memory"); 
    asm volatile("ld.global.cg.f64 %0, [%1];" : "=d"(thread_coeffs[1]) : 
      "l"(across_coeffs+offset+32) : "memory"); 
    asm volatile("ld.global.cg.f64 %0, [%1];" : "=d"(thread_coeffs[2]) : 
      "l"(across_coeffs+offset+64) : "memory"); 
    asm volatile("ld.global.cg.f64 %0, [%1];" : "=d"(thread_coeffs[3]) : 
      "l"(across_coeffs+offset+96) : "memory"); 
    asm volatile("ld.global.cg.f64 %0, [%1];" : "=d"(thread_coeffs[4]) : 
      "l"(across_coeffs+offset+128) : "memory"); 
    asm volatile("ld.global.cg.f64 %0, [%1];" : "=d"(thread_coeffs[5]) : 
      "l"(across_coeffs+offset+160) : "memory"); 
  }
#ifdef DYNAMIC
  for (int step = 0; step < total_steps; step++)
#else
  #pragma unroll 1
  for (int step = 0; step < TOTAL_STEPS; step++)
#endif
  {
    asm volatile("ld.global.cg.f64 %0, [%1];" : "=d"(temperature) : 
      "l"(temperature_array) : "memory"); 
    asm volatile("ld.global.cg.f64 %0, [%1];" : "=d"(mixmw) : "l"(mixmw_array) : 
      "memory"); 
    asm volatile("ld.global.cg.f64 %0, [%1];" : "=d"(mole_frac_temp[0]) : 
      "l"(mass_frac_array+(wid+0)*spec_stride) : "memory"); 
    asm volatile("ld.global.cg.f64 %0, [%1];" : "=d"(mole_frac_temp[1]) : 
      "l"(mass_frac_array+(wid+10)*spec_stride) : "memory"); 
    asm volatile("ld.global.cg.f64 %0, [%1];" : "=d"(mole_frac_temp[2]) : 
      "l"(mass_frac_array+(wid+20)*spec_stride) : "memory"); 
    temperature *= 120.0;
    double logt = log(temperature);
    sumxod[wid+0][tid] = 0.0;
    sumxod[wid+10][tid] = 0.0;
    sumxod[wid+20][tid] = 0.0;
    {
      mole_frac_temp[0] *= recip_molecular_masses[wid+0] * 1e3 * mixmw;
      mole_frac[wid+0][tid] = mole_frac_temp[0];
    }
    {
      mole_frac_temp[1] *= recip_molecular_masses[wid+10] * 1e3 * mixmw;
      mole_frac[wid+10][tid] = mole_frac_temp[1];
    }
    {
      mole_frac_temp[2] *= recip_molecular_masses[wid+20] * 1e3 * mixmw;
      mole_frac[wid+20][tid] = mole_frac_temp[2];
    }
    double local_sumxw = 0.0;
    double local_wtm = 0.0;
    asm volatile("bar.sync 0;" : : : "memory");
    double local_fracs[3];
    const int local_wid = wid >> 0;
    const int local_offset = wid & 0x0;
    local_fracs[0] = mole_frac[local_wid*3+0+local_offset][tid];
    local_fracs[1] = mole_frac[local_wid*3+1+local_offset][tid];
    local_fracs[2] = mole_frac[local_wid*3+2+local_offset][tid];
    {
      const double local_mass = 
        diffusion_masses[(local_wid*3+0+local_offset+step*60)%60]; 
      local_wtm = __fma_rn(local_fracs[0],local_mass,local_wtm);
      local_fracs[0] = (local_fracs[0] > 9.999999999999999e-21 ? local_fracs[0] 
        : 9.999999999999999e-21); 
      local_sumxw = __fma_rn(local_fracs[0],local_mass,local_sumxw);
    }
    {
      const double local_mass = 
        diffusion_masses[(local_wid*3+1+local_offset+step*60)%60]; 
      local_wtm = __fma_rn(local_fracs[1],local_mass,local_wtm);
      local_fracs[1] = (local_fracs[1] > 9.999999999999999e-21 ? local_fracs[1] 
        : 9.999999999999999e-21); 
      local_sumxw = __fma_rn(local_fracs[1],local_mass,local_sumxw);
    }
    {
      const double local_mass = 
        diffusion_masses[(local_wid*3+2+local_offset+step*60)%60]; 
      local_wtm = __fma_rn(local_fracs[2],local_mass,local_wtm);
      local_fracs[2] = (local_fracs[2] > 9.999999999999999e-21 ? local_fracs[2] 
        : 9.999999999999999e-21); 
      local_sumxw = __fma_rn(local_fracs[2],local_mass,local_sumxw);
    }
    double local_sumxod[3];
    local_sumxod[0] = 0.0;
    local_sumxod[1] = 0.0;
    local_sumxod[2] = 0.0;
    // Starting point 0
    {
      unsigned index = (local_wid*3+1+step*64)%64;
      if (index >= 30) index -= 30;
      double index_frac = mole_frac[index][tid];
      double index_sumxod = 0.0;
      double index_clamped = (index_frac > 9.999999999999999e-21 ? index_frac : 
        9.999999999999999e-21); 
      // Across point (offset+0)
      {
        double local_thread_coeff;
        if (tid == 0)
          mirror[wid] = thread_coeffs[0];
        double val = mirror[wid];
        if (tid == 1)
          mirror[wid] = thread_coeffs[0];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 2)
          mirror[wid] = thread_coeffs[0];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 3)
          mirror[wid] = thread_coeffs[0];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        val = -val;
        val = exp(val);
        index_sumxod = __fma_rn(local_fracs[0],val,index_sumxod);
        local_sumxod[0] = __fma_rn(index_clamped,val,local_sumxod[0]);
      }
      sumxod[index][tid] += index_sumxod;
    }
    // Starting point 1
    {
      unsigned index = (local_wid*3+2+step*64)%64;
      if (index >= 30) index -= 30;
      double index_frac = mole_frac[index][tid];
      double index_sumxod = 0.0;
      double index_clamped = (index_frac > 9.999999999999999e-21 ? index_frac : 
        9.999999999999999e-21); 
      // Across point (offset+0)
      {
        double local_thread_coeff;
        if (tid == 4)
          mirror[wid] = thread_coeffs[0];
        double val = mirror[wid];
        if (tid == 5)
          mirror[wid] = thread_coeffs[0];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 6)
          mirror[wid] = thread_coeffs[0];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 7)
          mirror[wid] = thread_coeffs[0];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        val = -val;
        val = exp(val);
        index_sumxod = __fma_rn(local_fracs[0],val,index_sumxod);
        local_sumxod[0] = __fma_rn(index_clamped,val,local_sumxod[0]);
      }
      // Across point (offset+1)
      {
        double local_thread_coeff;
        if (tid == 8)
          mirror[wid] = thread_coeffs[0];
        double val = mirror[wid];
        if (tid == 9)
          mirror[wid] = thread_coeffs[0];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 10)
          mirror[wid] = thread_coeffs[0];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 11)
          mirror[wid] = thread_coeffs[0];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        val = -val;
        val = exp(val);
        index_sumxod = __fma_rn(local_fracs[1],val,index_sumxod);
        local_sumxod[1] = __fma_rn(index_clamped,val,local_sumxod[1]);
      }
      sumxod[index][tid] += index_sumxod;
    }
    // Starting point 2
    {
      unsigned index = (local_wid*3+3+step*64)%64;
      if (index >= 30) index -= 30;
      double index_frac = mole_frac[index][tid];
      double index_sumxod = 0.0;
      double index_clamped = (index_frac > 9.999999999999999e-21 ? index_frac : 
        9.999999999999999e-21); 
      // Across point (offset+0)
      {
        double local_thread_coeff;
        if (tid == 12)
          mirror[wid] = thread_coeffs[0];
        double val = mirror[wid];
        if (tid == 13)
          mirror[wid] = thread_coeffs[0];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 14)
          mirror[wid] = thread_coeffs[0];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 15)
          mirror[wid] = thread_coeffs[0];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        val = -val;
        val = exp(val);
        index_sumxod = __fma_rn(local_fracs[0],val,index_sumxod);
        local_sumxod[0] = __fma_rn(index_clamped,val,local_sumxod[0]);
      }
      // Across point (offset+1)
      {
        double local_thread_coeff;
        if (tid == 16)
          mirror[wid] = thread_coeffs[0];
        double val = mirror[wid];
        if (tid == 17)
          mirror[wid] = thread_coeffs[0];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 18)
          mirror[wid] = thread_coeffs[0];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 19)
          mirror[wid] = thread_coeffs[0];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        val = -val;
        val = exp(val);
        index_sumxod = __fma_rn(local_fracs[1],val,index_sumxod);
        local_sumxod[1] = __fma_rn(index_clamped,val,local_sumxod[1]);
      }
      // Across point (offset+2)
      {
        double local_thread_coeff;
        if (tid == 20)
          mirror[wid] = thread_coeffs[0];
        double val = mirror[wid];
        if (tid == 21)
          mirror[wid] = thread_coeffs[0];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 22)
          mirror[wid] = thread_coeffs[0];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 23)
          mirror[wid] = thread_coeffs[0];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        val = -val;
        val = exp(val);
        index_sumxod = __fma_rn(local_fracs[2],val,index_sumxod);
        local_sumxod[2] = __fma_rn(index_clamped,val,local_sumxod[2]);
      }
      sumxod[index][tid] += index_sumxod;
      asm volatile("bar.sync 0;" : : : "memory");
    }
    // Starting point 3
    {
      unsigned index = (local_wid*3+4+step*64)%64;
      if (index >= 30) index -= 30;
      double index_frac = mole_frac[index][tid];
      double index_sumxod = 0.0;
      double index_clamped = (index_frac > 9.999999999999999e-21 ? index_frac : 
        9.999999999999999e-21); 
      // Across point (offset+0)
      {
        double local_thread_coeff;
        if (tid == 24)
          mirror[wid] = thread_coeffs[0];
        double val = mirror[wid];
        if (tid == 25)
          mirror[wid] = thread_coeffs[0];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 26)
          mirror[wid] = thread_coeffs[0];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 27)
          mirror[wid] = thread_coeffs[0];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        val = -val;
        val = exp(val);
        index_sumxod = __fma_rn(local_fracs[0],val,index_sumxod);
        local_sumxod[0] = __fma_rn(index_clamped,val,local_sumxod[0]);
      }
      // Across point (offset+1)
      {
        double local_thread_coeff;
        if (tid == 28)
          mirror[wid] = thread_coeffs[0];
        double val = mirror[wid];
        if (tid == 29)
          mirror[wid] = thread_coeffs[0];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 30)
          mirror[wid] = thread_coeffs[0];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 31)
          mirror[wid] = thread_coeffs[0];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        val = -val;
        val = exp(val);
        index_sumxod = __fma_rn(local_fracs[1],val,index_sumxod);
        local_sumxod[1] = __fma_rn(index_clamped,val,local_sumxod[1]);
      }
      // Across point (offset+2)
      {
        double local_thread_coeff;
        if (tid == 0)
          mirror[wid] = thread_coeffs[1];
        double val = mirror[wid];
        if (tid == 1)
          mirror[wid] = thread_coeffs[1];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 2)
          mirror[wid] = thread_coeffs[1];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 3)
          mirror[wid] = thread_coeffs[1];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        val = -val;
        val = exp(val);
        index_sumxod = __fma_rn(local_fracs[2],val,index_sumxod);
        local_sumxod[2] = __fma_rn(index_clamped,val,local_sumxod[2]);
      }
      sumxod[index][tid] += index_sumxod;
    }
    // Starting point 4
    {
      unsigned index = (local_wid*3+5+step*64)%64;
      if (index >= 30) index -= 30;
      double index_frac = mole_frac[index][tid];
      double index_sumxod = 0.0;
      double index_clamped = (index_frac > 9.999999999999999e-21 ? index_frac : 
        9.999999999999999e-21); 
      // Across point (offset+0)
      {
        double local_thread_coeff;
        if (tid == 4)
          mirror[wid] = thread_coeffs[1];
        double val = mirror[wid];
        if (tid == 5)
          mirror[wid] = thread_coeffs[1];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 6)
          mirror[wid] = thread_coeffs[1];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 7)
          mirror[wid] = thread_coeffs[1];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        val = -val;
        val = exp(val);
        index_sumxod = __fma_rn(local_fracs[0],val,index_sumxod);
        local_sumxod[0] = __fma_rn(index_clamped,val,local_sumxod[0]);
      }
      // Across point (offset+1)
      {
        double local_thread_coeff;
        if (tid == 8)
          mirror[wid] = thread_coeffs[1];
        double val = mirror[wid];
        if (tid == 9)
          mirror[wid] = thread_coeffs[1];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 10)
          mirror[wid] = thread_coeffs[1];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 11)
          mirror[wid] = thread_coeffs[1];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        val = -val;
        val = exp(val);
        index_sumxod = __fma_rn(local_fracs[1],val,index_sumxod);
        local_sumxod[1] = __fma_rn(index_clamped,val,local_sumxod[1]);
      }
      // Across point (offset+2)
      {
        double local_thread_coeff;
        if (tid == 12)
          mirror[wid] = thread_coeffs[1];
        double val = mirror[wid];
        if (tid == 13)
          mirror[wid] = thread_coeffs[1];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 14)
          mirror[wid] = thread_coeffs[1];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 15)
          mirror[wid] = thread_coeffs[1];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        val = -val;
        val = exp(val);
        index_sumxod = __fma_rn(local_fracs[2],val,index_sumxod);
        local_sumxod[2] = __fma_rn(index_clamped,val,local_sumxod[2]);
      }
      sumxod[index][tid] += index_sumxod;
    }
    // Starting point 5
    {
      unsigned index = (local_wid*3+6+step*64)%64;
      if (index >= 30) index -= 30;
      double index_frac = mole_frac[index][tid];
      double index_sumxod = 0.0;
      double index_clamped = (index_frac > 9.999999999999999e-21 ? index_frac : 
        9.999999999999999e-21); 
      // Across point (offset+0)
      {
        double local_thread_coeff;
        if (tid == 16)
          mirror[wid] = thread_coeffs[1];
        double val = mirror[wid];
        if (tid == 17)
          mirror[wid] = thread_coeffs[1];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 18)
          mirror[wid] = thread_coeffs[1];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 19)
          mirror[wid] = thread_coeffs[1];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        val = -val;
        val = exp(val);
        index_sumxod = __fma_rn(local_fracs[0],val,index_sumxod);
        local_sumxod[0] = __fma_rn(index_clamped,val,local_sumxod[0]);
      }
      // Across point (offset+1)
      {
        double local_thread_coeff;
        if (tid == 20)
          mirror[wid] = thread_coeffs[1];
        double val = mirror[wid];
        if (tid == 21)
          mirror[wid] = thread_coeffs[1];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 22)
          mirror[wid] = thread_coeffs[1];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 23)
          mirror[wid] = thread_coeffs[1];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        val = -val;
        val = exp(val);
        index_sumxod = __fma_rn(local_fracs[1],val,index_sumxod);
        local_sumxod[1] = __fma_rn(index_clamped,val,local_sumxod[1]);
      }
      // Across point (offset+2)
      {
        double local_thread_coeff;
        if (tid == 24)
          mirror[wid] = thread_coeffs[1];
        double val = mirror[wid];
        if (tid == 25)
          mirror[wid] = thread_coeffs[1];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 26)
          mirror[wid] = thread_coeffs[1];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 27)
          mirror[wid] = thread_coeffs[1];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        val = -val;
        val = exp(val);
        index_sumxod = __fma_rn(local_fracs[2],val,index_sumxod);
        local_sumxod[2] = __fma_rn(index_clamped,val,local_sumxod[2]);
      }
      sumxod[index][tid] += index_sumxod;
      asm volatile("bar.sync 0;" : : : "memory");
    }
    // Starting point 6
    {
      unsigned index = (local_wid*3+7+step*64)%64;
      if (index >= 30) index -= 30;
      double index_frac = mole_frac[index][tid];
      double index_sumxod = 0.0;
      double index_clamped = (index_frac > 9.999999999999999e-21 ? index_frac : 
        9.999999999999999e-21); 
      // Across point (offset+0)
      {
        double local_thread_coeff;
        if (tid == 28)
          mirror[wid] = thread_coeffs[1];
        double val = mirror[wid];
        if (tid == 29)
          mirror[wid] = thread_coeffs[1];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 30)
          mirror[wid] = thread_coeffs[1];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 31)
          mirror[wid] = thread_coeffs[1];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        val = -val;
        val = exp(val);
        index_sumxod = __fma_rn(local_fracs[0],val,index_sumxod);
        local_sumxod[0] = __fma_rn(index_clamped,val,local_sumxod[0]);
      }
      // Across point (offset+1)
      {
        double local_thread_coeff;
        if (tid == 0)
          mirror[wid] = thread_coeffs[2];
        double val = mirror[wid];
        if (tid == 1)
          mirror[wid] = thread_coeffs[2];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 2)
          mirror[wid] = thread_coeffs[2];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 3)
          mirror[wid] = thread_coeffs[2];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        val = -val;
        val = exp(val);
        index_sumxod = __fma_rn(local_fracs[1],val,index_sumxod);
        local_sumxod[1] = __fma_rn(index_clamped,val,local_sumxod[1]);
      }
      // Across point (offset+2)
      {
        double local_thread_coeff;
        if (tid == 4)
          mirror[wid] = thread_coeffs[2];
        double val = mirror[wid];
        if (tid == 5)
          mirror[wid] = thread_coeffs[2];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 6)
          mirror[wid] = thread_coeffs[2];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 7)
          mirror[wid] = thread_coeffs[2];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        val = -val;
        val = exp(val);
        index_sumxod = __fma_rn(local_fracs[2],val,index_sumxod);
        local_sumxod[2] = __fma_rn(index_clamped,val,local_sumxod[2]);
      }
      sumxod[index][tid] += index_sumxod;
    }
    // Starting point 7
    {
      unsigned index = (local_wid*3+8+step*64)%64;
      if (index >= 30) index -= 30;
      double index_frac = mole_frac[index][tid];
      double index_sumxod = 0.0;
      double index_clamped = (index_frac > 9.999999999999999e-21 ? index_frac : 
        9.999999999999999e-21); 
      // Across point (offset+0)
      {
        double local_thread_coeff;
        if (tid == 8)
          mirror[wid] = thread_coeffs[2];
        double val = mirror[wid];
        if (tid == 9)
          mirror[wid] = thread_coeffs[2];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 10)
          mirror[wid] = thread_coeffs[2];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 11)
          mirror[wid] = thread_coeffs[2];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        val = -val;
        val = exp(val);
        index_sumxod = __fma_rn(local_fracs[0],val,index_sumxod);
        local_sumxod[0] = __fma_rn(index_clamped,val,local_sumxod[0]);
      }
      // Across point (offset+1)
      {
        double local_thread_coeff;
        if (tid == 12)
          mirror[wid] = thread_coeffs[2];
        double val = mirror[wid];
        if (tid == 13)
          mirror[wid] = thread_coeffs[2];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 14)
          mirror[wid] = thread_coeffs[2];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 15)
          mirror[wid] = thread_coeffs[2];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        val = -val;
        val = exp(val);
        index_sumxod = __fma_rn(local_fracs[1],val,index_sumxod);
        local_sumxod[1] = __fma_rn(index_clamped,val,local_sumxod[1]);
      }
      // Across point (offset+2)
      {
        double local_thread_coeff;
        if (tid == 16)
          mirror[wid] = thread_coeffs[2];
        double val = mirror[wid];
        if (tid == 17)
          mirror[wid] = thread_coeffs[2];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 18)
          mirror[wid] = thread_coeffs[2];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 19)
          mirror[wid] = thread_coeffs[2];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        val = -val;
        val = exp(val);
        index_sumxod = __fma_rn(local_fracs[2],val,index_sumxod);
        local_sumxod[2] = __fma_rn(index_clamped,val,local_sumxod[2]);
      }
      sumxod[index][tid] += index_sumxod;
    }
    // Starting point 8
    {
      unsigned index = (local_wid*3+9+step*64)%64;
      if (index >= 30) index -= 30;
      double index_frac = mole_frac[index][tid];
      double index_sumxod = 0.0;
      double index_clamped = (index_frac > 9.999999999999999e-21 ? index_frac : 
        9.999999999999999e-21); 
      // Across point (offset+0)
      {
        double local_thread_coeff;
        if (tid == 20)
          mirror[wid] = thread_coeffs[2];
        double val = mirror[wid];
        if (tid == 21)
          mirror[wid] = thread_coeffs[2];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 22)
          mirror[wid] = thread_coeffs[2];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 23)
          mirror[wid] = thread_coeffs[2];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        val = -val;
        val = exp(val);
        index_sumxod = __fma_rn(local_fracs[0],val,index_sumxod);
        local_sumxod[0] = __fma_rn(index_clamped,val,local_sumxod[0]);
      }
      // Across point (offset+1)
      {
        double local_thread_coeff;
        if (tid == 24)
          mirror[wid] = thread_coeffs[2];
        double val = mirror[wid];
        if (tid == 25)
          mirror[wid] = thread_coeffs[2];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 26)
          mirror[wid] = thread_coeffs[2];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 27)
          mirror[wid] = thread_coeffs[2];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        val = -val;
        val = exp(val);
        index_sumxod = __fma_rn(local_fracs[1],val,index_sumxod);
        local_sumxod[1] = __fma_rn(index_clamped,val,local_sumxod[1]);
      }
      // Across point (offset+2)
      {
        double local_thread_coeff;
        if (tid == 28)
          mirror[wid] = thread_coeffs[2];
        double val = mirror[wid];
        if (tid == 29)
          mirror[wid] = thread_coeffs[2];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 30)
          mirror[wid] = thread_coeffs[2];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 31)
          mirror[wid] = thread_coeffs[2];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        val = -val;
        val = exp(val);
        index_sumxod = __fma_rn(local_fracs[2],val,index_sumxod);
        local_sumxod[2] = __fma_rn(index_clamped,val,local_sumxod[2]);
      }
      sumxod[index][tid] += index_sumxod;
      asm volatile("bar.sync 0;" : : : "memory");
    }
    // Starting point 9
    {
      unsigned index = (local_wid*3+10+step*64)%64;
      if (index >= 30) index -= 30;
      double index_frac = mole_frac[index][tid];
      double index_sumxod = 0.0;
      double index_clamped = (index_frac > 9.999999999999999e-21 ? index_frac : 
        9.999999999999999e-21); 
      // Across point (offset+0)
      {
        double local_thread_coeff;
        if (tid == 0)
          mirror[wid] = thread_coeffs[3];
        double val = mirror[wid];
        if (tid == 1)
          mirror[wid] = thread_coeffs[3];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 2)
          mirror[wid] = thread_coeffs[3];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 3)
          mirror[wid] = thread_coeffs[3];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        val = -val;
        val = exp(val);
        index_sumxod = __fma_rn(local_fracs[0],val,index_sumxod);
        local_sumxod[0] = __fma_rn(index_clamped,val,local_sumxod[0]);
      }
      // Across point (offset+1)
      {
        double local_thread_coeff;
        if (tid == 4)
          mirror[wid] = thread_coeffs[3];
        double val = mirror[wid];
        if (tid == 5)
          mirror[wid] = thread_coeffs[3];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 6)
          mirror[wid] = thread_coeffs[3];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 7)
          mirror[wid] = thread_coeffs[3];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        val = -val;
        val = exp(val);
        index_sumxod = __fma_rn(local_fracs[1],val,index_sumxod);
        local_sumxod[1] = __fma_rn(index_clamped,val,local_sumxod[1]);
      }
      // Across point (offset+2)
      {
        double local_thread_coeff;
        if (tid == 8)
          mirror[wid] = thread_coeffs[3];
        double val = mirror[wid];
        if (tid == 9)
          mirror[wid] = thread_coeffs[3];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 10)
          mirror[wid] = thread_coeffs[3];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 11)
          mirror[wid] = thread_coeffs[3];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        val = -val;
        val = exp(val);
        index_sumxod = __fma_rn(local_fracs[2],val,index_sumxod);
        local_sumxod[2] = __fma_rn(index_clamped,val,local_sumxod[2]);
      }
      sumxod[index][tid] += index_sumxod;
    }
    // Starting point 10
    {
      unsigned index = (local_wid*3+11+step*64)%64;
      if (index >= 30) index -= 30;
      double index_frac = mole_frac[index][tid];
      double index_sumxod = 0.0;
      double index_clamped = (index_frac > 9.999999999999999e-21 ? index_frac : 
        9.999999999999999e-21); 
      // Across point (offset+0)
      {
        double local_thread_coeff;
        if (tid == 12)
          mirror[wid] = thread_coeffs[3];
        double val = mirror[wid];
        if (tid == 13)
          mirror[wid] = thread_coeffs[3];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 14)
          mirror[wid] = thread_coeffs[3];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 15)
          mirror[wid] = thread_coeffs[3];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        val = -val;
        val = exp(val);
        index_sumxod = __fma_rn(local_fracs[0],val,index_sumxod);
        local_sumxod[0] = __fma_rn(index_clamped,val,local_sumxod[0]);
      }
      // Across point (offset+1)
      {
        double local_thread_coeff;
        if (tid == 16)
          mirror[wid] = thread_coeffs[3];
        double val = mirror[wid];
        if (tid == 17)
          mirror[wid] = thread_coeffs[3];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 18)
          mirror[wid] = thread_coeffs[3];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 19)
          mirror[wid] = thread_coeffs[3];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        val = -val;
        val = exp(val);
        index_sumxod = __fma_rn(local_fracs[1],val,index_sumxod);
        local_sumxod[1] = __fma_rn(index_clamped,val,local_sumxod[1]);
      }
      // Across point (offset+2)
      {
        double local_thread_coeff;
        if (tid == 20)
          mirror[wid] = thread_coeffs[3];
        double val = mirror[wid];
        if (tid == 21)
          mirror[wid] = thread_coeffs[3];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 22)
          mirror[wid] = thread_coeffs[3];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 23)
          mirror[wid] = thread_coeffs[3];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        val = -val;
        val = exp(val);
        index_sumxod = __fma_rn(local_fracs[2],val,index_sumxod);
        local_sumxod[2] = __fma_rn(index_clamped,val,local_sumxod[2]);
      }
      sumxod[index][tid] += index_sumxod;
    }
    // Starting point 11
    {
      unsigned index = (local_wid*3+12+step*64)%64;
      if (index >= 30) index -= 30;
      double index_frac = mole_frac[index][tid];
      double index_sumxod = 0.0;
      double index_clamped = (index_frac > 9.999999999999999e-21 ? index_frac : 
        9.999999999999999e-21); 
      // Across point (offset+0)
      {
        double local_thread_coeff;
        if (tid == 24)
          mirror[wid] = thread_coeffs[3];
        double val = mirror[wid];
        if (tid == 25)
          mirror[wid] = thread_coeffs[3];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 26)
          mirror[wid] = thread_coeffs[3];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 27)
          mirror[wid] = thread_coeffs[3];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        val = -val;
        val = exp(val);
        index_sumxod = __fma_rn(local_fracs[0],val,index_sumxod);
        local_sumxod[0] = __fma_rn(index_clamped,val,local_sumxod[0]);
      }
      // Across point (offset+1)
      {
        double local_thread_coeff;
        if (tid == 28)
          mirror[wid] = thread_coeffs[3];
        double val = mirror[wid];
        if (tid == 29)
          mirror[wid] = thread_coeffs[3];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 30)
          mirror[wid] = thread_coeffs[3];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 31)
          mirror[wid] = thread_coeffs[3];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        val = -val;
        val = exp(val);
        index_sumxod = __fma_rn(local_fracs[1],val,index_sumxod);
        local_sumxod[1] = __fma_rn(index_clamped,val,local_sumxod[1]);
      }
      // Across point (offset+2)
      {
        double local_thread_coeff;
        if (tid == 0)
          mirror[wid] = thread_coeffs[4];
        double val = mirror[wid];
        if (tid == 1)
          mirror[wid] = thread_coeffs[4];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 2)
          mirror[wid] = thread_coeffs[4];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 3)
          mirror[wid] = thread_coeffs[4];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        val = -val;
        val = exp(val);
        index_sumxod = __fma_rn(local_fracs[2],val,index_sumxod);
        local_sumxod[2] = __fma_rn(index_clamped,val,local_sumxod[2]);
      }
      sumxod[index][tid] += index_sumxod;
      asm volatile("bar.sync 0;" : : : "memory");
    }
    // Starting point 12
    {
      unsigned index = (local_wid*3+13+step*64)%64;
      if (index >= 30) index -= 30;
      double index_frac = mole_frac[index][tid];
      double index_sumxod = 0.0;
      double index_clamped = (index_frac > 9.999999999999999e-21 ? index_frac : 
        9.999999999999999e-21); 
      // Across point (offset+0)
      {
        double local_thread_coeff;
        if (tid == 4)
          mirror[wid] = thread_coeffs[4];
        double val = mirror[wid];
        if (tid == 5)
          mirror[wid] = thread_coeffs[4];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 6)
          mirror[wid] = thread_coeffs[4];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 7)
          mirror[wid] = thread_coeffs[4];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        val = -val;
        val = exp(val);
        index_sumxod = __fma_rn(local_fracs[0],val,index_sumxod);
        local_sumxod[0] = __fma_rn(index_clamped,val,local_sumxod[0]);
      }
      // Across point (offset+1)
      {
        double local_thread_coeff;
        if (tid == 8)
          mirror[wid] = thread_coeffs[4];
        double val = mirror[wid];
        if (tid == 9)
          mirror[wid] = thread_coeffs[4];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 10)
          mirror[wid] = thread_coeffs[4];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 11)
          mirror[wid] = thread_coeffs[4];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        val = -val;
        val = exp(val);
        index_sumxod = __fma_rn(local_fracs[1],val,index_sumxod);
        local_sumxod[1] = __fma_rn(index_clamped,val,local_sumxod[1]);
      }
      // Across point (offset+2)
      {
        double local_thread_coeff;
        if (tid == 12)
          mirror[wid] = thread_coeffs[4];
        double val = mirror[wid];
        if (tid == 13)
          mirror[wid] = thread_coeffs[4];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 14)
          mirror[wid] = thread_coeffs[4];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 15)
          mirror[wid] = thread_coeffs[4];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        val = -val;
        val = exp(val);
        index_sumxod = __fma_rn(local_fracs[2],val,index_sumxod);
        local_sumxod[2] = __fma_rn(index_clamped,val,local_sumxod[2]);
      }
      sumxod[index][tid] += index_sumxod;
    }
    // Starting point 13
    {
      unsigned index = (local_wid*3+14+step*64)%64;
      if (index >= 30) index -= 30;
      double index_frac = mole_frac[index][tid];
      double index_sumxod = 0.0;
      double index_clamped = (index_frac > 9.999999999999999e-21 ? index_frac : 
        9.999999999999999e-21); 
      // Across point (offset+0)
      {
        double local_thread_coeff;
        if (tid == 16)
          mirror[wid] = thread_coeffs[4];
        double val = mirror[wid];
        if (tid == 17)
          mirror[wid] = thread_coeffs[4];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 18)
          mirror[wid] = thread_coeffs[4];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 19)
          mirror[wid] = thread_coeffs[4];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        val = -val;
        val = exp(val);
        index_sumxod = __fma_rn(local_fracs[0],val,index_sumxod);
        local_sumxod[0] = __fma_rn(index_clamped,val,local_sumxod[0]);
      }
      // Across point (offset+1)
      {
        double local_thread_coeff;
        if (tid == 20)
          mirror[wid] = thread_coeffs[4];
        double val = mirror[wid];
        if (tid == 21)
          mirror[wid] = thread_coeffs[4];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 22)
          mirror[wid] = thread_coeffs[4];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 23)
          mirror[wid] = thread_coeffs[4];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        val = -val;
        val = exp(val);
        index_sumxod = __fma_rn(local_fracs[1],val,index_sumxod);
        local_sumxod[1] = __fma_rn(index_clamped,val,local_sumxod[1]);
      }
      // Across point (offset+2)
      {
        double local_thread_coeff;
        if (tid == 24)
          mirror[wid] = thread_coeffs[4];
        double val = mirror[wid];
        if (tid == 25)
          mirror[wid] = thread_coeffs[4];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 26)
          mirror[wid] = thread_coeffs[4];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 27)
          mirror[wid] = thread_coeffs[4];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        val = -val;
        val = exp(val);
        index_sumxod = __fma_rn(local_fracs[2],val,index_sumxod);
        local_sumxod[2] = __fma_rn(index_clamped,val,local_sumxod[2]);
      }
      sumxod[index][tid] += index_sumxod;
    }
    // Starting point 14
    {
      unsigned index = (local_wid*3+15+step*64)%64;
      if (index >= 30) index -= 30;
      double index_frac = mole_frac[index][tid];
      double index_sumxod = 0.0;
      double index_clamped = (index_frac > 9.999999999999999e-21 ? index_frac : 
        9.999999999999999e-21); 
      // Across point (offset+0)
      if (((14 - (0+local_offset)) < (14+((local_wid*3+0+local_offset) < 15 ? 1 
        : 0)))) 
      {
        double local_thread_coeff;
        if (tid == 28)
          mirror[wid] = thread_coeffs[4];
        double val = mirror[wid];
        if (tid == 29)
          mirror[wid] = thread_coeffs[4];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 30)
          mirror[wid] = thread_coeffs[4];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 31)
          mirror[wid] = thread_coeffs[4];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        val = -val;
        val = exp(val);
        index_sumxod = __fma_rn(local_fracs[0],val,index_sumxod);
        local_sumxod[0] = __fma_rn(index_clamped,val,local_sumxod[0]);
      }
      // Across point (offset+1)
      if (((14 - (1+local_offset)) < (14+((local_wid*3+1+local_offset) < 15 ? 1 
        : 0)))) 
      {
        double local_thread_coeff;
        if (tid == 0)
          mirror[wid] = thread_coeffs[5];
        double val = mirror[wid];
        if (tid == 1)
          mirror[wid] = thread_coeffs[5];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 2)
          mirror[wid] = thread_coeffs[5];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 3)
          mirror[wid] = thread_coeffs[5];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        val = -val;
        val = exp(val);
        index_sumxod = __fma_rn(local_fracs[1],val,index_sumxod);
        local_sumxod[1] = __fma_rn(index_clamped,val,local_sumxod[1]);
      }
      // Across point (offset+2)
      if (((14 - (2+local_offset)) < (14+((local_wid*3+2+local_offset) < 15 ? 1 
        : 0)))) 
      {
        double local_thread_coeff;
        if (tid == 4)
          mirror[wid] = thread_coeffs[5];
        double val = mirror[wid];
        if (tid == 5)
          mirror[wid] = thread_coeffs[5];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 6)
          mirror[wid] = thread_coeffs[5];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 7)
          mirror[wid] = thread_coeffs[5];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        val = -val;
        val = exp(val);
        index_sumxod = __fma_rn(local_fracs[2],val,index_sumxod);
        local_sumxod[2] = __fma_rn(index_clamped,val,local_sumxod[2]);
      }
      sumxod[index][tid] += index_sumxod;
      asm volatile("bar.sync 0;" : : : "memory");
    }
    // Starting point 15
    {
      unsigned index = (local_wid*3+16+step*64)%64;
      if (index >= 30) index -= 30;
      double index_frac = mole_frac[index][tid];
      double index_sumxod = 0.0;
      double index_clamped = (index_frac > 9.999999999999999e-21 ? index_frac : 
        9.999999999999999e-21); 
      // Across point (offset+1)
      if (((15 - (1+local_offset)) < (14+((local_wid*3+1+local_offset) < 15 ? 1 
        : 0)))) 
      {
        double local_thread_coeff;
        if (tid == 8)
          mirror[wid] = thread_coeffs[5];
        double val = mirror[wid];
        if (tid == 9)
          mirror[wid] = thread_coeffs[5];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 10)
          mirror[wid] = thread_coeffs[5];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 11)
          mirror[wid] = thread_coeffs[5];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        val = -val;
        val = exp(val);
        index_sumxod = __fma_rn(local_fracs[1],val,index_sumxod);
        local_sumxod[1] = __fma_rn(index_clamped,val,local_sumxod[1]);
      }
      // Across point (offset+2)
      if (((15 - (2+local_offset)) < (14+((local_wid*3+2+local_offset) < 15 ? 1 
        : 0)))) 
      {
        double local_thread_coeff;
        if (tid == 12)
          mirror[wid] = thread_coeffs[5];
        double val = mirror[wid];
        if (tid == 13)
          mirror[wid] = thread_coeffs[5];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 14)
          mirror[wid] = thread_coeffs[5];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 15)
          mirror[wid] = thread_coeffs[5];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        val = -val;
        val = exp(val);
        index_sumxod = __fma_rn(local_fracs[2],val,index_sumxod);
        local_sumxod[2] = __fma_rn(index_clamped,val,local_sumxod[2]);
      }
      sumxod[index][tid] += index_sumxod;
    }
    // Starting point 16
    {
      unsigned index = (local_wid*3+17+step*64)%64;
      if (index >= 30) index -= 30;
      double index_frac = mole_frac[index][tid];
      double index_sumxod = 0.0;
      double index_clamped = (index_frac > 9.999999999999999e-21 ? index_frac : 
        9.999999999999999e-21); 
      // Across point (offset+2)
      if (((16 - (2+local_offset)) < (14+((local_wid*3+2+local_offset) < 15 ? 1 
        : 0)))) 
      {
        double local_thread_coeff;
        if (tid == 16)
          mirror[wid] = thread_coeffs[5];
        double val = mirror[wid];
        if (tid == 17)
          mirror[wid] = thread_coeffs[5];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 18)
          mirror[wid] = thread_coeffs[5];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        if (tid == 19)
          mirror[wid] = thread_coeffs[5];
        local_thread_coeff = mirror[wid];
        val = __fma_rn(val,logt,local_thread_coeff);
        val = -val;
        val = exp(val);
        index_sumxod = __fma_rn(local_fracs[2],val,index_sumxod);
        local_sumxod[2] = __fma_rn(index_clamped,val,local_sumxod[2]);
      }
      sumxod[index][tid] += index_sumxod;
      asm volatile("bar.sync 0;" : : : "memory");
    }
    sumxod[local_wid*3+0+local_offset][tid] += local_sumxod[0];
    sumxod[local_wid*3+1+local_offset][tid] += local_sumxod[1];
    sumxod[local_wid*3+2+local_offset][tid] += local_sumxod[2];
    asm volatile("bar.sync 0;" : : : "memory");
    double pressure;
    asm volatile("ld.global.cg.f64 %0, [%1];" : "=d"(pressure) : 
      "l"(pressure_array) : "memory"); 
    double output_fracs[3];
    output_fracs[0] = mole_frac[wid+0][tid];
    output_fracs[1] = mole_frac[wid+10][tid];
    output_fracs[2] = mole_frac[wid+20][tid];
    asm volatile("bar.sync 0;" : : : "memory");
    mole_frac[wid][tid] = local_sumxw;
    mole_frac[wid+10][tid] = local_wtm;
    asm volatile("bar.sync 0;" : : : "memory");
    double sumxw = 0.0;
    double wtm = 0.0;
    {
      double reduc_sumxw[10];
      double reduc_wtm[10];
      reduc_sumxw[0] = mole_frac[0][tid];
      reduc_wtm[0] = mole_frac[10][tid];
      reduc_sumxw[1] = mole_frac[1][tid];
      reduc_wtm[1] = mole_frac[11][tid];
      reduc_sumxw[2] = mole_frac[2][tid];
      reduc_wtm[2] = mole_frac[12][tid];
      reduc_sumxw[3] = mole_frac[3][tid];
      reduc_wtm[3] = mole_frac[13][tid];
      reduc_sumxw[4] = mole_frac[4][tid];
      reduc_wtm[4] = mole_frac[14][tid];
      reduc_sumxw[5] = mole_frac[5][tid];
      reduc_wtm[5] = mole_frac[15][tid];
      reduc_sumxw[6] = mole_frac[6][tid];
      reduc_wtm[6] = mole_frac[16][tid];
      reduc_sumxw[7] = mole_frac[7][tid];
      reduc_wtm[7] = mole_frac[17][tid];
      reduc_sumxw[8] = mole_frac[8][tid];
      reduc_wtm[8] = mole_frac[18][tid];
      reduc_sumxw[9] = mole_frac[9][tid];
      reduc_wtm[9] = mole_frac[19][tid];
      sumxw += reduc_sumxw[0];
      wtm += reduc_wtm[0];
      sumxw += reduc_sumxw[1];
      wtm += reduc_wtm[1];
      sumxw += reduc_sumxw[2];
      wtm += reduc_wtm[2];
      sumxw += reduc_sumxw[3];
      wtm += reduc_wtm[3];
      sumxw += reduc_sumxw[4];
      wtm += reduc_wtm[4];
      sumxw += reduc_sumxw[5];
      wtm += reduc_wtm[5];
      sumxw += reduc_sumxw[6];
      wtm += reduc_wtm[6];
      sumxw += reduc_sumxw[7];
      wtm += reduc_wtm[7];
      sumxw += reduc_sumxw[8];
      wtm += reduc_wtm[8];
      sumxw += reduc_sumxw[9];
      wtm += reduc_wtm[9];
    }
    pressure *= 1.41836588544e+06;
    double pfac = 1.01325e+06/pressure;
    {
      double clamped = (output_fracs[0] > 9.999999999999999e-21 ? 
        output_fracs[0] : 9.999999999999999e-21); 
      double result = pfac * (sumxw - 
        (diffusion_masses[(wid+0+step*64)%64]*clamped)) / (wtm * 
        sumxod[wid+0][tid]); 
      result *= 6.386577550694006e-05;
      asm volatile("st.global.cs.f64 [%0], %1;" : : 
        "l"(diffusion+(wid+0)*spec_stride), "d"(result) : "memory"); 
    }
    {
      double clamped = (output_fracs[1] > 9.999999999999999e-21 ? 
        output_fracs[1] : 9.999999999999999e-21); 
      double result = pfac * (sumxw - 
        (diffusion_masses[(wid+10+step*64)%64]*clamped)) / (wtm * 
        sumxod[wid+10][tid]); 
      result *= 6.386577550694006e-05;
      asm volatile("st.global.cs.f64 [%0], %1;" : : 
        "l"(diffusion+(wid+10)*spec_stride), "d"(result) : "memory"); 
    }
    {
      double clamped = (output_fracs[2] > 9.999999999999999e-21 ? 
        output_fracs[2] : 9.999999999999999e-21); 
      double result = pfac * (sumxw - 
        (diffusion_masses[(wid+20+step*64)%64]*clamped)) / (wtm * 
        sumxod[wid+20][tid]); 
      result *= 6.386577550694006e-05;
      asm volatile("st.global.cs.f64 [%0], %1;" : : 
        "l"(diffusion+(wid+20)*spec_stride), "d"(result) : "memory"); 
    }
    asm volatile("bar.sync 0;" : : : "memory");
    // Update pointers for the next iteration
    {
      temperature_array += slice_stride;
      pressure_array += slice_stride;
      mass_frac_array += slice_stride;
      mixmw_array += slice_stride;
      diffusion += slice_stride;
    }
  }
}

